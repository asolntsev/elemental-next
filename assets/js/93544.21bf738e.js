"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[93544],{93544:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>s,default:()=>h,frontMatter:()=>r,toc:()=>l});var a=n(87462),i=(n(67294),n(3905));const r={},s=void 0,l=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}],o={toc:l},p="wrapper";function h(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Let's start by importing our requisite libraries (",(0,i.kt)("inlineCode",{parentName:"p"},"import unittest")," for our test framework, ",(0,i.kt)("inlineCode",{parentName:"p"},"from selenium import webdriver")," to drive the browser, and ",(0,i.kt)("inlineCode",{parentName:"p"},"import sys")," to determine when there's a test failure), declare our test class, and write test ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# filename: screenshot.py\nimport sys\nimport unittest\nfrom selenium import webdriver\n\n\nclass ScreenShotOnFailure(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Chrome()\n\n    def tearDown(self):\n        if sys.exc_info():\n            self.driver.save_screenshot("failshot_%s.png" % self._testMethodName)\n        self.driver.quit()\n# ...\n')),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown")," we check to see if ",(0,i.kt)("inlineCode",{parentName:"p"},"sys.exc_info()")," exists. If it does, then there's been a test failure and we capture a screenshot through the help of Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},".save_screenshot")," method. ",(0,i.kt)("inlineCode",{parentName:"p"},".save_screenshot")," accepts a filename as a string (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"'failshot.png'"),"). To make the filename unique we use the test method name (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"self._testMethodName"),"). When this command executes it will save an image file to the local system in the current working directory."),(0,i.kt)("p",null,"Now to wire up a test which will fail."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: screenshot.py\n# ...\n    def test_example_1(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com')\n        assert driver.title == 'blah blah blah'\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (",(0,i.kt)("inlineCode",{parentName:"p"},"python screenshot.py")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Load the homepage of ",(0,i.kt)("a",{parentName:"li",href:"http://github.com/tourdedave/the-internet"},"the-internet")),(0,i.kt)("li",{parentName:"ul"},"Check the text of the page header and fail"),(0,i.kt)("li",{parentName:"ul"},"Output a failure message in the terminal"),(0,i.kt)("li",{parentName:"ul"},"Capture a screenshot in the current working directory"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Having a screenshot to aid in troubleshooting failing tests along with a stack trace helps in having more insight. Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"import sys")," determines when there's been a test failure."),(0,i.kt)("p",null,"If you want truly unique filenames, then you should use a unique ID in the filename instead of a timestamp (e.g., something like ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/assaf/uuid"},(0,i.kt)("inlineCode",{parentName:"a"},"uuid")),"). This will prevent screenshots from getting overwritten when you have two (or more) tests taking screenshots at the same time."))}h.isMDXComponent=!0}}]);