"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[2095],{72095:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>r,default:()=>p,frontMatter:()=>l,toc:()=>o});var i=n(87462),a=(n(67294),n(3905));const l={},r=void 0,o=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],s={toc:o},u="wrapper";function p(e){let{components:t,...l}=e;return(0,a.kt)(u,(0,i.Z)({},s,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"First let's include our requisite classes for our test framework (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"NUnit.Framework"),"), driving the browser with Selenium (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"OpenQA.Selenium"),", etc.), access to C# collections (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"System.Collections.Generic"),"), and start our class off with some setup and teardown methods."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: HighlightElements.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\nusing System.Threading;\n\npublic class HighlightElements\n{\n    IWebDriver Driver;\n    IJavaScriptExecutor JSDriver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n        JSDriver = (IJavaScriptExecutor) Driver;\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n")),(0,a.kt)("p",null,"Now let's create a ",(0,a.kt)("inlineCode",{parentName:"p"},"HighlightElement")," helper method that will accept a Selenium WebDriver ",(0,a.kt)("inlineCode",{parentName:"p"},"IWebElement")," and a time to wait (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"Duration"),") as parameters."),(0,a.kt)("p",null,"By setting a duration we can control how long to highlight an element on the page before reverting the styling back. And we can make this an optional argument by setting a sensible default (e.g., 3 seconds)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: HighlightElements.cs\n// ...\n    private void HighlightElement(IWebElement Element, int Duration = 3)\n    {\n        string OriginalStyle = Element.GetAttribute("style");\n\n        JSDriver.ExecuteScript("arguments[0].setAttribute(arguments[1], arguments[2])",\n                               Element,\n                               "style",\n                               "border: 2px solid red; border-style: dashed;");\n\n        Thread.Sleep(Duration * 1000);\n        JSDriver.ExecuteScript("arguments[0].setAttribute(arguments[1], arguments[2])",\n                               Element,\n                               "style",\n                               OriginalStyle);\n    }\n// ...\n')),(0,a.kt)("p",null,"There are three things going on here."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We store the style of the element so we can revert it back when we're done"),(0,a.kt)("li",{parentName:"ul"},"We change the style of the element so it visually stands out (e.g., a red dashed border)"),(0,a.kt)("li",{parentName:"ul"},"We revert the style of the element back after 3 seconds (or longer if specified)")),(0,a.kt)("p",null,"We're accomplishing the style change through JavaScript's ",(0,a.kt)("inlineCode",{parentName:"p"},"setAttribute")," function. And we're executing it with Selenium's ",(0,a.kt)("inlineCode",{parentName:"p"},"ExecuteScript")," command."),(0,a.kt)("p",null,"Now to use this in our test is a simple matter to finding an element and passing it to ",(0,a.kt)("inlineCode",{parentName:"p"},"HighlightElement"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: HighlightElements.cs\n// ...\n    [Test]\n    public void HighlightElementExample()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/large");\n        IWebElement TargetElement = Driver.FindElement(By.Id("sibling-2.3"));\n        HighlightElement(TargetElement);\n    }\n\n}\n')),(0,a.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,a.kt)("p",null,"When you save this file and run it (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\HighlightElements.sln")," from the command-line) here is what will happen."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Open the browser"),(0,a.kt)("li",{parentName:"ul"},"Load the page"),(0,a.kt)("li",{parentName:"ul"},"Find the element to highlight"),(0,a.kt)("li",{parentName:"ul"},"Change the styling of the element so it has a red dashed-line border"),(0,a.kt)("li",{parentName:"ul"},"Wait 3 seconds"),(0,a.kt)("li",{parentName:"ul"},"Revert the styling of the element back (removing the red border)"),(0,a.kt)("li",{parentName:"ul"},"Close the browser")),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,"If you wanted to take this a step further, you could leverage this approach along with an interactive debugger."),(0,a.kt)("p",null,"Alternatively, you could verify your locators by using a browser plugin like FireFinder."),(0,a.kt)("p",null,"Happy Testing!"),(0,a.kt)("h2",{id:"about-the-author"},"About The Author"),(0,a.kt)("p",null,"You can follow Brian D. Goad on Twitter at ",(0,a.kt)("a",{parentName:"p",href:"https://twitter.com/bbbco"},"@bbbco"),"."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Brian D. Goad profile picture",src:n(93330).Z+"#author-img",title:"a title",width:"400",height:"400"})))}p.isMDXComponent=!0},93330:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/brian-goad-f109f0435f7d26dd999383b3b4ba1994.jpeg"}}]);