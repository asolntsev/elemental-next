"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[43605],{43605:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>u,frontMatter:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={},o=void 0,p=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}],s={toc:p},l="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(l,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"In the first half of our example we include our libraries and our usual setup, teardown, and run actions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'selenium-webdriver'\nrequire 'rspec/expectations'\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,r.kt)("p",null,"In the run action we define our loop and its behavior, creating the interactive prompt we want."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  loop do\n    print '>> '\n    input = gets.chomp\n    if input == 'q'\n      puts 'Quitting...'\n      @driver.quit\n      exit 0\n    end\n    begin\n      eval input\n    rescue Exception => e\n      puts e.message\n    end\n  end\nend\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"print")," command is used instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"puts")," because we want ",(0,r.kt)("inlineCode",{parentName:"p"},">> ")," to appear on the same line as the input that we are issuing. This gives us the look and feel of a prompt. And we use ",(0,r.kt)("inlineCode",{parentName:"p"},"gets.chomp")," to take in input. ",(0,r.kt)("inlineCode",{parentName:"p"},"gets")," is responsible for receiving the input. And ",(0,r.kt)("inlineCode",{parentName:"p"},"chomp")," removes the carriage return character (e.g. '\\n') from the input."),(0,r.kt)("p",null,"Before executing the input we perform a check to see if the letter ",(0,r.kt)("strong",{parentName:"p"},"q")," is issued. If so, the script will post a message to the terminal, close the browser, and exit the prompt."),(0,r.kt)("p",null,"We then execute the input provided with ",(0,r.kt)("inlineCode",{parentName:"p"},"eval")," and rescue exceptions, posting their message to the terminal when they occur."),(0,r.kt)("p",null,"Here is an example command you may issue to start: ",(0,r.kt)("inlineCode",{parentName:"p"},"@driver.get 'https://www.google.com'"),"."),(0,r.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Firefox loads"),(0,r.kt)("li",{parentName:"ul"},"An interactive prompt is presented"),(0,r.kt)("li",{parentName:"ul"},"Issue a Selenium command and see it execute in the browser"),(0,r.kt)("li",{parentName:"ul"},"Issue a command that it does not recognize (or that errors), and see a message stating the issue in the prompt"),(0,r.kt)("li",{parentName:"ul"},"Issue ",(0,r.kt)("strong",{parentName:"li"},"q"),", the browser will close and the prompt will terminate")),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"Hopefully this REPL will help save you some time and frustration -- making it easier to write and debug your tests."))}u.isMDXComponent=!0}}]);