"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[705],{90705:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>r,default:()=>d,frontMatter:()=>l,toc:()=>o});var a=n(87462),i=(n(67294),n(3905));const l={},r=void 0,o=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}],s={toc:o},p="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"For this example we will use ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the dropdown list")," from ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/dropdown"},"the-internet"),". In this list there a few options to select, one which should be disabled. Let's find this element and assert that it is in fact disabled."),(0,i.kt)("p",null,"Let's start by including our requisite classes for our test framework (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"NUnit.Framework"),"), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenQA.Selenium"),", etc.), and start our class off with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: DisabledElements.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\nusing OpenQA.Selenium.Support.UI;\n\npublic class DisabledElements\n{\n    IWebDriver Driver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now to wire up our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: DisabledElements.cs\n// ...\n    [Test]\n    public void ElementDisabled()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/dropdown");\n        var Dropdown = new SelectElement(Driver.FindElement(By.Id("dropdown")));\n        // The SelectedOption we want is selected by default on page load\n        Assert.False(Dropdown.SelectedOption.Enabled);\n    }\n}\n')),(0,i.kt)("p",null,"After visiting the page we find the dropdown list with the ",(0,i.kt)("inlineCode",{parentName:"p"},"SelectElement")," function and store it in a variable. We then use in our assertion, focusing on the currently selected option which is the first one by default on page load (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"Dropdown.SelectedOption"),") and check that it is enabled (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},".Enabled"),"). This will return a boolean result. If the element is disabled (e.g., not selectable) then Selenium will return ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),". So that's what we use in our assertion (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"Assert.False"),")."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\DisabledElements.sln")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open a browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Grab the dropdown list"),(0,i.kt)("li",{parentName:"ul"},"Assert that the target element is not enabled"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip has helped make the task of seeing whether or not an element is enabled or disabled more approachable."),(0,i.kt)("p",null,"Happy Testing!"))}d.isMDXComponent=!0}}]);