"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[7820],{27820:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>s,default:()=>c,frontMatter:()=>r,toc:()=>l});var i=t(85893),o=t(11151);const r={},s=void 0,l=[{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"example-1",children:"Example 1"}),"\n",(0,i.jsxs)(n.p,{children:["First let's pull in our requisite libraries and write some simple ",(0,i.jsx)(n.code,{children:"setup"}),", ",(0,i.jsx)(n.code,{children:"teardown"}),", and ",(0,i.jsx)(n.code,{children:"run"})," methods."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"# filename: dropdown.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now let's write up our test."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"# filename: dropdown.rb\n...\nrun do\n  @driver.get 'http://the-internet.herokuapp.com/dropdown'\n\n  dropdown_list = @driver.find_element(id: 'dropdown')\n  options = dropdown_list.find_elements(tag_name: 'option')\n  options.each { |option| option.click if option.text == 'Option 1' }\n\n  selected_option = options.map { |option| option.text if option.selected? }.join\n  expect(selected_option).to eql 'Option 1'\nend\n"})}),"\n",(0,i.jsxs)(n.p,{children:["After visiting ",(0,i.jsx)(n.a,{href:"http://the-internet.herokuapp.com/dropdown",children:"the example application"})," we find the dropdown list by its ID and store it in a variable. We then find each clickable element in the dropdown list (e.g., each ",(0,i.jsx)(n.code,{children:"option"}),") with ",(0,i.jsx)(n.code,{children:"find_elements"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Grabbing all of the options returns a collection that we iterate over and when the text matches what we want it will click on it."}),"\n",(0,i.jsx)(n.p,{children:"We finish the test by performing a check to see that our selection was made correctly. This is done by reiterating over the dropdown options collection one more time. This time we're getting the text of the item that was selected, storing it in a variable, and making an assertion against it."}),"\n",(0,i.jsx)(n.p,{children:"While this works, there is a more accessible way to do this."}),"\n",(0,i.jsx)(n.h2,{id:"example-2",children:"Example 2"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"# filename: dropdown.rb\n...\nrun do\n  @driver.get 'http://the-internet.herokuapp.com/dropdown'\n\n  dropdown = @driver.find_element(id: 'dropdown')\n  select_list = Selenium::WebDriver::Support::Select.new(dropdown)\n  select_list.select_by(:text, 'Option 1')\n\n  selected_option = select_list.selected_options[0].text\n  expect(selected_option).to eql 'Option 1'\nend\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Similar to the first example, we are finding the dropdown list by its ID. Instead of iterating over its option elements and clicking based on a conditional check, we are leveraging a built-in helper function of Selenium, ",(0,i.jsx)(n.a,{href:"https://seleniumhq.github.io/selenium/docs/api/rb/Selenium/WebDriver/Support/Select.html",children:(0,i.jsx)(n.code,{children:"Select"})}),", and it's ",(0,i.jsx)(n.a,{href:"https://seleniumhq.github.io/selenium/docs/api/rb/Selenium/WebDriver/Support/Select.html#select_by-instance_method",children:(0,i.jsx)(n.code,{children:"select_by"})})," method to choose the item we want."]}),"\n",(0,i.jsxs)(n.p,{children:["We then ask the ",(0,i.jsx)(n.code,{children:"select_list"})," what option was selected by using the ",(0,i.jsx)(n.a,{href:"https://seleniumhq.github.io/selenium/docs/api/rb/Selenium/WebDriver/Support/Select.html#selected_options-instance_method",children:(0,i.jsx)(n.code,{children:"selected_options"})})," method. This returns an array of Selenium Elements (which in this case is an array of just one element). So we need to reference the first element by it's index (e.g., ",(0,i.jsx)(n.code,{children:"[0]"}),"), ask for it's text, and store it in a variable (e.g., ",(0,i.jsx)(n.code,{children:"selected_option"}),")."]}),"\n",(0,i.jsx)(n.p,{children:"Then we perform our assertion against this variable (just like in the previous example)."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"NOTE: In addition to selecting by text, you can also select by value using the code below."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"  select_list.select_by(:value, '1')\n"})}),"\n",(0,i.jsx)(n.h2,{id:"expected-behavior",children:"Expected Behavior"}),"\n",(0,i.jsxs)(n.p,{children:["If you save this file with either of these examples and run it (e.g., ",(0,i.jsx)(n.code,{children:"ruby dropdown.rb"})," from the command-line) here is what will happen:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Open the browser"}),"\n",(0,i.jsx)(n.li,{children:"Visit the example application"}),"\n",(0,i.jsx)(n.li,{children:"Find the dropdown list"}),"\n",(0,i.jsx)(n.li,{children:"Select the requested item from the dropdown list"}),"\n",(0,i.jsx)(n.li,{children:"Assert that the selected option is the one you expect"}),"\n",(0,i.jsx)(n.li,{children:"Close the browser"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(n.p,{children:"In this tip, we've gone over using Selenium to select from a drop down using the drop down list, or a built-in helper function of Selenium to find an element within the dropdown list."}),"\n",(0,i.jsx)(n.p,{children:"Hopefully this will help you when selecting items from a dropdown list."}),"\n",(0,i.jsx)(n.p,{children:"Happy Testing!"})]})}function c(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);