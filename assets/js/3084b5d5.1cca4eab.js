"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[75921],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(n),c=a,m=d["".concat(s,".").concat(c)]||d[c]||h[c]||o;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},83107:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const o={hide_table_of_contents:!0,publish_date:new Date("2015-10-14T00:00:00.000Z"),last_update:{date:new Date("2023-02-24T00:00:00.000Z")},level:2,language:"ruby"},i=void 0,l={unversionedId:"headless/ruby",id:"headless/ruby",title:"ruby",description:"A Solution",source:"@site/docs/38-headless/ruby.md",sourceDirName:"38-headless",slug:"/headless/ruby",permalink:"/docs/headless/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/38-headless/ruby.md",tags:[],version:"current",lastUpdatedBy:"dependabot[bot]",lastUpdatedAt:1677196800,formattedLastUpdatedAt:"Feb 24, 2023",frontMatter:{hide_table_of_contents:!0,publish_date:"2015-10-14T00:00:00.000Z",last_update:{date:"2023-02-24T00:00:00.000Z"},level:2,language:"ruby"}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Option 1",id:"option-1",level:3},{value:"Option 2",id:"option-2",level:3},{value:"Option 3",id:"option-3",level:3},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Choosing The Best Option",id:"choosing-the-best-option",level:2},{value:"Running Concurrent Builds",id:"running-concurrent-builds",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],p={toc:u},d="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"a-solution"},"A Solution"),(0,a.kt)("p",null,"In order to run your tests using a browser that's loaded on your CI Server you will need to configure your tests\nto launch the browser virtually (e.g., using something like Xvfb)."),(0,a.kt)("blockquote",null,(0,a.kt)("h3",{parentName:"blockquote",id:"an-xvfb-primer"},"An Xvfb primer"),(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Xvfb"},"Xvfb")," (short for X virtual framebuffer) is an in-memory display server for\nUNIX-like operating system (e.g., Linux). It enables you to run graphical applications without a display\n(e.g., browser tests on a CI server) while also having the ability to take screenshots.")),(0,a.kt)("p",null,"Let's take a look at an example."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"Before we can use Xvfb, we need to install it (along with the browser we want if it's not already loaded)."),(0,a.kt)("p",null,"In Linux we need to find the relevant package names for the package manager and install them\n(e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"apt-get install xvfb firefox")," for Debian based systems like Ubuntu, ",(0,a.kt)("inlineCode",{parentName:"p"},"yum install Xvfb firefox")," for\nRedHat based systems, etc.)."),(0,a.kt)("p",null,"Now let's create a simple Selenium script."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: headless.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n\nrun do\n  @driver.get 'https://the-internet.herokuapp.com'\n  expect(@driver.title).to eql 'The Internet'\n  @driver.save_screenshot 'headless.png'\nend\n")),(0,a.kt)("p",null,"Here we are loading a page, asserting the title (to make sure we're in the right place), and grabbing a screenshot\n(so we can make sure our Xvfb setup is working). The screenshot will render in the directory alongside the test script."),(0,a.kt)("p",null,"Next we need to setup Xvfb, and we have a few options."),(0,a.kt)("h3",{id:"option-1"},"Option 1"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Start Xvfb on a specific display port and background the process"),(0,a.kt)("li",{parentName:"ul"},"Tell the terminal session to use the display port"),(0,a.kt)("li",{parentName:"ul"},"Run the test")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"Xvfb :99 &\nexport DISPLAY=:99\nruby headless.rb\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NOTE: This approach will keep Xvfb running in the background until the process is killed.")),(0,a.kt)("h3",{id:"option-2"},"Option 2"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Use ",(0,a.kt)("inlineCode",{parentName:"li"},"xvfb-run")," to launch the tests (no display port declaration necessary)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"xvfb-run ruby headless.rb\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NOTE: This approach will start and stop Xvfb for you.")),(0,a.kt)("h3",{id:"option-3"},"Option 3"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Install ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/leonid-shevtsov/headless"},"the headless gem")),(0,a.kt)("li",{parentName:"ul"},"Update the test ",(0,a.kt)("inlineCode",{parentName:"li"},"setup")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"teardown")," to use it"),(0,a.kt)("li",{parentName:"ul"},"Run the test")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: headless2.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\nrequire 'headless'\n\ndef setup\n  @headless = Headless.new\n  @headless.start\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\n  @headless.destroy\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n\nrun do\n  @driver.get 'https://the-internet.herokuapp.com'\n  expect(@driver.title).to eql 'The Internet'\n  @driver.save_screenshot 'headless2.png'\nend\n")),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"setup")," we are creating an instance of the headless library and issuing a ",(0,a.kt)("inlineCode",{parentName:"p"},".start")," command (which starts Xvfb).\nIn ",(0,a.kt)("inlineCode",{parentName:"p"},"teardown")," we stop Xvfb by with the ",(0,a.kt)("inlineCode",{parentName:"p"},".destroy")," after closing the browser with ",(0,a.kt)("inlineCode",{parentName:"p"},"@driver.quit"),". The only thing\nthat changed in our ",(0,a.kt)("inlineCode",{parentName:"p"},"run")," action is the name of the screenshot (from ",(0,a.kt)("inlineCode",{parentName:"p"},"headless.png")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"headless2.png"),")."),(0,a.kt)("p",null,"With the library in place, running the test (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"ruby headless2.rb"),") will automatically run it headless --\nstarting and stopping Xvfb for us."),(0,a.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,a.kt)("p",null,"When we save either file and run it (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"ruby headless.rb")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"ruby headless2.rb")," from the command-line) here is\nwhat will happen:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Xvfb starts"),(0,a.kt)("li",{parentName:"ul"},"Browser opens in a virtual framebuffer"),(0,a.kt)("li",{parentName:"ul"},"Test runs and captures a screenshot from the browser"),(0,a.kt)("li",{parentName:"ul"},"Browser closes"),(0,a.kt)("li",{parentName:"ul"},"Xvfb terminates (unless using Option 1)")),(0,a.kt)("h2",{id:"choosing-the-best-option"},"Choosing The Best Option"),(0,a.kt)("p",null,"The headless gem is a handy resource. But if you use it, you'll want to make its use configurable so it does not load\nevery time. This will be helpful when running your tests in non-Linux environments."),(0,a.kt)("p",null,"If you're just looking to try out headless testing and you're unsure of how much time you want to invest, then using\nthe Xvfb application (e.g., options 1 or 2) is a sound path since you won't need to update your test code to use it."),(0,a.kt)("h2",{id:"running-concurrent-builds"},"Running Concurrent Builds"),(0,a.kt)("p",null,"If you're running tests headless across different builds at the same time (e.g., in parallel) on your CI server,\nthen jobs will start to break unexpectedly. This is because of a display port collision with Xvfb (e.g., two or more\nXvfb sessions trying to run on the same display port at the same time)."),(0,a.kt)("p",null,"When this happens you can issue a runtime flag when launching ",(0,a.kt)("inlineCode",{parentName:"p"},"xvfb-run")," that will keep trying display ports\nuntil it finds a free one (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"xvfb-run -a"),"). You can read more about it in the man page ",(0,a.kt)("a",{parentName:"p",href:"http://manpages.ubuntu.com/manpages/lucid/man1/xvfb-run.1.html"},"here"),"."),(0,a.kt)("p",null,"Alternatively you can use the CI build number as your Xvfb display port. This way each display port is unique.\nEach CI server is different, but you should have access to this value somehow. For example, this is made available\nthrough an environment variable in Jenkins."),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,"Hopefully this tip has helped you get your tests running smoothly on your CI Server. For more information on\ntaking screenshots with Selenium, check out\n",(0,a.kt)("a",{parentName:"p",href:"https://elementalselenium.com/docs/take-screenshot-on-failure/16-take-screenshot-on-failure"},"tip 16"),". And to learn\nhow to run a different browser locally (e.g., Chrome), check out\n",(0,a.kt)("a",{parentName:"p",href:"https://elementalselenium.com/docs/chrome-driver/29-chrome-driver"},"tip 29"),"."),(0,a.kt)("h2",{id:"about-the-author"},"About The Author"),(0,a.kt)("p",null,"Thanks to Amelia Downs and ",(0,a.kt)("a",{parentName:"p",href:"https://twitter.com/bbbco"},"Brian Goad")," for contributing these solutions!"))}h.isMDXComponent=!0}}]);