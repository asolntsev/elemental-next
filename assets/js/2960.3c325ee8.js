"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[2960],{62960:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>d,frontMatter:()=>i,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={},l=void 0,p=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}],s={toc:p},o="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(o,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"First we'll set up our requisite libraries to drive the browser (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"selenium-webdriver"),") and perform an assertion (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"rspec/expections")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers"),"). After that, we'll create some simple ",(0,a.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"run")," methods."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: key_presses.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,a.kt)("p",null,"Now we can write up our test."),(0,a.kt)("p",null,"Let's use an example from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet")," that will display what key has been pressed (",(0,a.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/key_presses"},"link"),"). We'll use the result text that gets displayed to perform our assertion."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/key_presses'\n  @driver.find_element(id: 'target').send_keys :space\n  expect(@driver.find_element(id: 'result').text).to eql('You entered: SPACE')\nend\n")),(0,a.kt)("p",null,"After visiting the page we find an element that's visible (e.g., the one that contains the example on the page ",(0,a.kt)("inlineCode",{parentName:"p"},"(id: 'target')"),") and send the space key to it (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},".send_keys :space"),"). Then we grab the resulting text (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"@driver.find_element(id: 'result').text)"),") and assert that it says what we expect (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"'You entered: SPACE'"),")."),(0,a.kt)("p",null,"Alternatively, we can also issue a key press without finding the element first."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/key_presses'\n  @driver.action.send_keys(:tab).perform\n  expect(@driver.find_element(id: 'result').text).to eql('You entered: TAB')\nend\n")),(0,a.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,a.kt)("p",null,"If we save this and run it (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"ruby key_presses.rb")," from the command-line) here is what will happen:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Open the browser"),(0,a.kt)("li",{parentName:"ul"},"Visit the page"),(0,a.kt)("li",{parentName:"ul"},"Find the element and send the space key to it"),(0,a.kt)("li",{parentName:"ul"},"Find the result text on the page and check to that it's what we expect"),(0,a.kt)("li",{parentName:"ul"},"Send the tab key to the element that's currently in focus"),(0,a.kt)("li",{parentName:"ul"},"Find the result text on the page and check to that it's what we expect"),(0,a.kt)("li",{parentName:"ul"},"Close the browser")),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,"If you have a specific element that you want to issue key presses to, then finding the element first is the way to go. If you don't have a receiving element, or you need to string together multiple key presses, then the Action Builder is what you should use."),(0,a.kt)("p",null,"Happy Testing!"))}d.isMDXComponent=!0}}]);