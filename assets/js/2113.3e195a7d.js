"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[2113],{2113:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>a,default:()=>o,frontMatter:()=>s,toc:()=>h});var i=t(5893),r=t(1151);const s={},a=void 0,h=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(n.p,{children:["First we'll need to include our requisite classes for our test framework (e.g., ",(0,i.jsx)(n.code,{children:"NUnit.Framework"}),"), driving the browser with Selenium (e.g., ",(0,i.jsx)(n.code,{children:"OpenQA.Selenium"}),", etc.), and start our class off with some setup and teardown methods."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// filename: Frames.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\n\npublic class Frames\n{\n    IWebDriver Driver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now onto our test. In it we'll step through ",(0,i.jsx)(n.a,{href:"http://the-internet.herokuapp.com/nested_frames",children:"an example of nested frames"})," from ",(0,i.jsx)(n.a,{href:"https://github.com/tourdedave/the-internet",children:"the-internet"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// filename: Frames.cs\n// ...\n    [Test]\n    public void NestedFrames()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/nested_frames");\n        Driver.SwitchTo().Frame("frame-top");\n        Driver.SwitchTo().Frame("frame-middle");\n        Assert.That(Driver.FindElement(By.Id("content")).Text.Equals("MIDDLE"));\n    }\n// ...\n'})}),"\n",(0,i.jsxs)(n.p,{children:["With Selenium's ",(0,i.jsx)(n.a,{href:"http://seleniumhq.github.io/selenium/docs/api/dotnet/html/M_OpenQA_Selenium_IWebDriver_SwitchTo.htm",children:(0,i.jsx)(n.code,{children:".SwitchTo()"})})," method we can easily switch to the frame we want. When using it for frames (e.g., ",(0,i.jsx)(n.code,{children:"Driver.SwitchTo().Frame();"}),") it accepts either an ID or name attribute. But in order to get the text of the middle frame (e.g., a frame nested within another frame), we need to switch to the parent frame (e.g., the top frame) first ",(0,i.jsx)(n.em,{children:"and then"})," switch to the child frame (e.g., the middle frame)."]}),"\n",(0,i.jsx)(n.p,{children:"Once we've done that we're able to find the element we need, grab its text, and assert that it's what we expect."}),"\n",(0,i.jsx)(n.p,{children:"While this example helps illustrate the point of frame switching, it's not very practical."}),"\n",(0,i.jsxs)(n.p,{children:["Here is a more likely example you'll run into -- working with a WYSIWYG Editor like ",(0,i.jsx)(n.a,{href:"http://www.tinymce.com/",children:"TinyMCE"}),". You can see the page we're testing ",(0,i.jsx)(n.a,{href:"http://the-internet.herokuapp.com/tinymce",children:"here"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// filename: Frames.cs\n// ...\n    [Test]\n    public void Iframes()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/tinymce");\n        Driver.SwitchTo().Frame("mce_0_ifr");\n        IWebElement Editor = Driver.FindElement(By.Id("tinymce"));\n        string StartText = Editor.Text;\n        Editor.Clear();\n        Editor.SendKeys("Hello World!");\n        string EndText = Editor.Text;\n        Assert.AreNotEqual(EndText, StartText);\n// ...\n'})}),"\n",(0,i.jsx)(n.p,{children:"Once the page loads we switch into the frame that contains TinyMCE and..."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"grab the original text and store it"}),"\n",(0,i.jsx)(n.li,{children:"clear and input new text"}),"\n",(0,i.jsx)(n.li,{children:"grab the new text value"}),"\n",(0,i.jsx)(n.li,{children:"assert that the original and new texts are not the same"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Keep in mind that if we need to access a part of the page outside of the frame we're currently in we'll need to switch to it. Thankfully Selenium has a method that enables us to quickly jump back to the top level of the page -- ",(0,i.jsx)(n.a,{href:"http://seleniumhq.github.io/selenium/docs/api/dotnet/html/M_OpenQA_Selenium_ITargetLocator_DefaultContent.htm",children:(0,i.jsx)(n.code,{children:".DefaultContent();"})}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Here is what that looks like in practice."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// filename: Frames.cs\n// ...\n        Driver.SwitchTo().DefaultContent();\n        string HeaderText = Driver.FindElement(By.CssSelector("h3")).Text;\n        Assert.That(HeaderText.Equals("An iFrame containing the TinyMCE WYSIWYG Editor"));\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"expected-behavior",children:"Expected Behavior"}),"\n",(0,i.jsxs)(n.p,{children:["When you save this file and run it (e.g., ",(0,i.jsx)(n.code,{children:"nunit3-console.exe .\\Frames.sln"})," from the command-line) here is what will happen:"]}),"\n",(0,i.jsx)("u",{children:"Example 1"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Open the browser"}),"\n",(0,i.jsx)(n.li,{children:"Visit the page"}),"\n",(0,i.jsx)(n.li,{children:"Switch to the nested frame"}),"\n",(0,i.jsx)(n.li,{children:"Grab the text from the frame and assert that Selenium is in the correct place"}),"\n",(0,i.jsx)(n.li,{children:"Close the browser"}),"\n"]}),"\n",(0,i.jsx)("u",{children:"Example 2"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Open the browser"}),"\n",(0,i.jsx)(n.li,{children:"Visit the page"}),"\n",(0,i.jsx)(n.li,{children:"Switch to the frame that contains the TinyMCE editor"}),"\n",(0,i.jsx)(n.li,{children:"Find and store the text in the editor"}),"\n",(0,i.jsx)(n.li,{children:"Clear the text in the editor"}),"\n",(0,i.jsx)(n.li,{children:"Input new text in the editor"}),"\n",(0,i.jsx)(n.li,{children:"Find and store the new text in the editor"}),"\n",(0,i.jsx)(n.li,{children:"Assert that the original and new text entries don't match"}),"\n",(0,i.jsx)(n.li,{children:"Switch to the top level of the page"}),"\n",(0,i.jsx)(n.li,{children:"Grab the text from the top of the page and assert it's what we expect"}),"\n",(0,i.jsx)(n.li,{children:"Close the browser"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(n.p,{children:"Now you're ready to handily defeat frames when they cross your path."}),"\n",(0,i.jsx)(n.p,{children:"Thanks to Jonathan Taylor for contributing the initial C# code for this tip!"}),"\n",(0,i.jsx)(n.p,{children:"Happy Testing!"})]})}function o(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);