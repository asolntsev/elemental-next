"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[10331],{10331:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>h,frontMatter:()=>i,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={},o=void 0,p=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}],s={toc:p},l="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(l,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"To start things off let's import our requisite classes (for annotations (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"org.junit.After"),", etc.), driving the browser with Selenium (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"org.openqa.selenium.WebDriver"),", etc.), matchers for our assertions (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"org.hamcrest.CoreMatchers"),", etc.), and an HTTP library to handle our HEAD request (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"org.apache.http.HttpResponse"),", etc.) and start our class with some setup and teardown methods."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// filename: DownloadFileRevisited.java\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.CoreMatchers.not;\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpHead;\nimport org.apache.http.impl.client.HttpClientBuilder;\n\npublic class DownloadFileRevisited {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n// ...\n")),(0,a.kt)("p",null,"Now we're ready to wire up our test."),(0,a.kt)("p",null,"It's just a simple matter of visiting the page with download links, grabbing a URL from one of them, and performing a ",(0,a.kt)("inlineCode",{parentName:"p"},"HEAD")," request with it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// filename: DownloadFileRevisited.java\n// ...\n    @Test\n    public void downloadFileRevisitedTest() throws Exception {\n        driver.get("http://the-internet.herokuapp.com/download");\n        String link = driver.findElement(By.cssSelector(".example a:nth-of-type(1)")).getAttribute("href");\n\n        HttpClient httpClient = HttpClientBuilder.create().build();\n        HttpHead request = new HttpHead(link);\n        HttpResponse response = httpClient.execute(request);\n        String contentType = response.getFirstHeader("Content-Type").getValue();\n        int contentLength = Integer.parseInt(response.getFirstHeader("Content-Length").getValue());\n\n        assertThat(contentType, is("application/octet-stream"));\n        assertThat(contentLength, is(not(0)));\n    }\n\n}\n')),(0,a.kt)("p",null,"Once we receive the response we check it's header for the content type (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},'response.getFirstHeader("Content-Type")'),") and content length (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},'response.getFirstHeader("Content-Length")'),") to make sure the file is the correct type and not empty."),(0,a.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,a.kt)("p",null,"When you save this and run it (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"mvn clean install")," from the command-line) here is what will will happen:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Open the browser"),(0,a.kt)("li",{parentName:"ul"},"Load the page"),(0,a.kt)("li",{parentName:"ul"},"Grab the URL of the first download link"),(0,a.kt)("li",{parentName:"ul"},"Perform a ",(0,a.kt)("inlineCode",{parentName:"li"},"HEAD")," request against it with an HTTP library"),(0,a.kt)("li",{parentName:"ul"},"Store the response headers"),(0,a.kt)("li",{parentName:"ul"},"Check the response headers to see that the file type is correct"),(0,a.kt)("li",{parentName:"ul"},"Check the response headers to see that the file is not empty"),(0,a.kt)("li",{parentName:"ul"},"Close the browser")),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,"Compared to the browser specific configuration with Selenium this is hands-down a leaner, faster, and more maintainable approach."),(0,a.kt)("p",null,"Thanks to ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/RomanIsko"},"Roman Isko")," for contributing the initial Java code for this tip."),(0,a.kt)("p",null,"Happy Testing!"))}h.isMDXComponent=!0}}]);