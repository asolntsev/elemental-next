"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[7415],{7415:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>l,default:()=>u,frontMatter:()=>o,toc:()=>i});var n=r(87462),a=(r(67294),r(3905));const o={},l=void 0,i=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}],p={toc:i},s="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(s,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"Before we get started we'll need to ",(0,a.kt)("a",{parentName:"p",href:"http://bmp.lightbody.net/"},"download a copy of BrowserMob Proxy"),". Once we have that, we'll want to include our requisite libraries:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"selenium-webdriver")," to control the browser"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"browsermob/proxy")," to configure/user BrowserMob Proxy"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"rspec=expectations")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"RSpec::Matchers")," for assertions"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"json")," to consume JSON data for the performance checks")),(0,a.kt)("p",null,"After that, we can create methods to configure the proxy server (",(0,a.kt)("inlineCode",{parentName:"p"},"configure_proxy"),"), set the browser profile to use the proxy server (",(0,a.kt)("inlineCode",{parentName:"p"},"browser_profile"),"), pull these together so the test will have a working browser that uses the proxy server (",(0,a.kt)("inlineCode",{parentName:"p"},"setup"),"), and tear things down after running the test (",(0,a.kt)("inlineCode",{parentName:"p"},"teardown"),")."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: performance.rb\n\nrequire 'selenium-webdriver'\nrequire 'browsermob/proxy'\nrequire 'rspec-expectations'\ninclude RSpec::Matchers\nrequire 'json'\n\ndef configure_proxy\n  proxy_binary = BrowserMob::Proxy::Server.new('./browsermob-proxy/bin/browsermob-proxy')\n  proxy_binary.start\n  proxy_binary.create_proxy\nend\n\ndef browser_profile\n  browser_profile = Selenium::WebDriver::Firefox::Profile.new\n  browser_profile.proxy = @proxy.selenium_proxy\n  browser_profile\nend\n\ndef setup\n  @proxy = configure_proxy\n  @driver = Selenium::WebDriver.for :firefox, profile: browser_profile\nend\n\ndef teardown\n  @driver.quit\n  @proxy.close\nend\n")),(0,a.kt)("p",null,"Next we'll want to tell the proxy server to capture traffic and return a payload (a.k.a. a HTTP Archive, or HAR for short)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"def capture_traffic\n  @proxy.new_har\n  yield\n  @proxy.har\nend\n")),(0,a.kt)("p",null,"We then tie this all together with a ",(0,a.kt)("inlineCode",{parentName:"p"},"run")," method. It will call ",(0,a.kt)("inlineCode",{parentName:"p"},"setup"),", execute test commands while capturing traffic (",(0,a.kt)("inlineCode",{parentName:"p"},"capture_traffic"),"), save the HAR to a uniquely named file (which is named with a time stamp), and tear everything down when it's done (",(0,a.kt)("inlineCode",{parentName:"p"},"teardown"),")."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'def run\n  setup\n  har = capture_traffic { yield }\n  @har_file = "./selenium_#{Time.now.strftime("%m%d%y_%H%M%S")}.har"\n  har.save_to @har_file\n  teardown\nend\n')),(0,a.kt)("p",null,"Now we can put all of this to use by exercising a feature of our application with some Selenium commands."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/dynamic_loading/2'\n  @driver.find_element(css: '#start button').click\n  Selenium::WebDriver::Wait.new(timeout: 8).until do\n    @driver.find_element(css: '#finish')\n  end\nend\n")),(0,a.kt)("p",null,"If we run this script (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"ruby performance.rb")," from the command-line) then we will see the browser load, complete some actions, and close. After which, a HAR file will appear in the working directory."),(0,a.kt)("p",null,"This outputted file is what we'll use to perform some simple benchmark checks."),(0,a.kt)("p",null,"Rather than identify specific benchmarks to check, let's run through a gamut of them by leveraging a pre-existing benchmarking tool like ",(0,a.kt)("a",{parentName:"p",href:"https://developer.yahoo.com/yslow/"},"YSlow"),". Fortunately, there is ",(0,a.kt)("a",{parentName:"p",href:"http://yslow.org/command-line-har/"},"a command-line YSlow tool")," that can consume a HAR file and provide us with useful output."),(0,a.kt)("p",null,"It's a Node.js app. So first we'll need to ",(0,a.kt)("a",{parentName:"p",href:"http://nodejs.org/"},"install Node.js"),", and then install the app (with ",(0,a.kt)("inlineCode",{parentName:"p"},"npm install yslow -g"),")."),(0,a.kt)("p",null,"After that, we can run it from the command line like so:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"yslow --info basic --format plain example.har")),(0,a.kt)("p",null,"This will consume a HAR file and output some helpful information -- including an overall score."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"size: 476.8K (476888 bytes)\noverall score: A (99)\nurl: http://the-internet.herokuapp.com/dynamic_loading/2\n# of requests: 16\nruleset: ydefault\n")),(0,a.kt)("p",null,"This overall score is what we are interested in. To get at it, we'll need to change the format type from ",(0,a.kt)("inlineCode",{parentName:"p"},"plain")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"json"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"yslow --info basic --format json example.har")),(0,a.kt)("p",null,"This will return a Hash that we can then easily parse through to get the value we want (e.g., the overall score with a key of ",(0,a.kt)("inlineCode",{parentName:"p"},'"o"'),")."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'{"w":476887,"o":99,"u":"http%3A%2F%2Fthe-internet.herokuapp.com%2Fdynamic_loading%2F2","r":16,"i":"ydefault"}\n')),(0,a.kt)("p",null,"Now we can automate the YSlow command-line execution and perform an assertion by adding the following to the end of our script."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},'performance_results = JSON.parse `yslow --info basic --format json #{@har_file}`\nperformance_grade = performance_results["o"]\nperformance_grade.should be > 95\n')),(0,a.kt)("p",null,"Now when we run this if the overall score drops below a 95 out of 100 then the test will fail."),(0,a.kt)("p",null,"From here we can wire this up to a Continuous Integration server and run it headlessly (either with Xvfb or GhostDriver) to perform these checks in an ongoing basis."),(0,a.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Load the browser"),(0,a.kt)("li",{parentName:"ul"},"Capture all requests through the proxy server"),(0,a.kt)("li",{parentName:"ul"},"Save the captured requests to a HTTP Archive (HAR) file on disk"),(0,a.kt)("li",{parentName:"ul"},"Run the HAR file through YSlow to get a numeric grade"),(0,a.kt)("li",{parentName:"ul"},"Assert that the grade is above a certain level")),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,"You can see the full code example ",(0,a.kt)("a",{parentName:"p",href:"https://gist.github.com/tourdedave/bc4b75fd6cdc1eef7860"},"here"),"."),(0,a.kt)("p",null,"For more insights into what HAR is and the many uses of it, check out ",(0,a.kt)("a",{parentName:"p",href:"http://www.igvita.com/2012/08/28/web-performance-power-tool-http-archive-har/"},"this write-up and video from Ilya Grigorik's blog"),". You can also ",(0,a.kt)("a",{parentName:"p",href:"http://www.softwareishard.com/blog/har-12-spec/"},"check out the HAR spec"),". And there's also ",(0,a.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=qQgDDAan4rM"},"a great presentation from David Burns and David Henderson at GTAC 2009")," on using Selenium to do performance benchmarking."),(0,a.kt)("p",null,"Happy Testing!"))}u.isMDXComponent=!0}}]);