"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[1590],{21590:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>l,default:()=>u,frontMatter:()=>s,toc:()=>o});var a=t(87462),r=(t(67294),t(3905));const s={},l=void 0,o=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}],i={toc:o},p="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"First, we'll need to ",(0,r.kt)("a",{parentName:"p",href:"https://www.selenium.dev/downloads/"},"download a copy of Selenium Server")," and launch it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"java -jar selenium-server-4.8.2.jar standalone\n")),(0,r.kt)("p",null,"Next, we'll want to create a mechanism to access the Selenium Server logs through the WebDriver Wire Protocol via an\nHTTP library -- filtering out the logs we don't want and return the most recent one."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'# filename: logger.rb\n\nrequire \'rest-client\'\nrequire \'json\'\n\nclass Logger\n\n  def initialize(session_id)\n    @session_id = session_id\n  end\n\n  def latest\n    parse(fetch).last\n  end\n\n  private\n\n  def fetch\n    RestClient.post(\n      "http://127.0.0.1:4444/wd/hub/session/#{@session_id}/log",\n      { "type" => "client" }.to_json,\n      content_type: :json,\n      accept: :json\n    )\n  end\n\n  def parse(input)\n    logs = JSON.parse(input)\n    messages = []\n    logs["value"].each do |entry|\n      msg = entry["message"]\n      unless msg.include? "session:" or\n        msg.include? "fetching logs" or\n          msg.include? "execute script"\n            messages << msg.scan(/handle(.*)$/)[-1][-1]\n      end\n    end\n    messages\n  end\n\nend\n')),(0,r.kt)("p",null,"A couple of things to note."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"session_id")," will come from the instance of Selenium that gets created in our test (via Selenium Grid). To see\nyour sessions, navigate to the instance in your web browser (http://localhost:4444/) and then click Sessions in the\nside panel. This session ID maps to a URI endpoint on the Selenium Server that we use to get the logging payload\nwith an HTTP POST (see ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch"),"). We are then taking that payload (which comes back as a JSON object in String form)\nand parsing it into JSON, iterating through it, grabbing the relevant bits we want (see ",(0,r.kt)("inlineCode",{parentName:"p"},"parse"),"). When that's all\ndone, we return the last entry found (see ",(0,r.kt)("inlineCode",{parentName:"p"},"latest"),")."),(0,r.kt)("p",null,"And of ",(0,r.kt)("a",{parentName:"p",href:"https://code.google.com/p/selenium/wiki/Logging#Log_Types"},"all the available log types we can access"),", we're grabbing the client logs\n(which will give us the real time actions taken in our test)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE: Each time we access the logs, it will clear the cache of logs. So the next time we access them, it will\nonly return new entries.")),(0,r.kt)("p",null,"Now we're ready to wire up our test to use the Selenium Server, access our logger class, and output the latest\nlog entries after each Selenium action."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: log_test.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\nrequire_relative 'logger'\n\ndef setup\n  @driver = Selenium::WebDriver.for :remote, url: 'http://127.0.0.1:4444/wd/hub'\n  @logger = Logger.new(@driver.session_id)\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n\nrun do\n  @driver.get 'https://the-internet.herokuapp.com'\n  puts @logger.latest\n  @driver.find_elements(css: 'a').last.click\n  puts @logger.latest\nend\n")),(0,r.kt)("p",null,"When we run this (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"ruby log_test.rb"),"), here's what we should see."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"}," Done: [get: http://the-internet.herokuapp.com]\n Done: [click: 23 [[FirefoxDriver: firefox on MAC (2afa5f83-1aba-ad43-b1f3-9b4907ae9471)] -> css selector: a]]\n")),(0,r.kt)("p",null,"If we couple this with jQuery Growl Notifications (",(0,r.kt)("a",{parentName:"p",href:"https://elementalselenium.com/docs/growl/53-growl"},"covered in the last tip"),")\nthen we can really put this information to work."),(0,r.kt)("p",null,"Let's add some helper methods to add jQuery Growl to the page and display notification messages."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"def add_growl_notifications\n  @driver.execute_script(\"if (!window.jQuery) {\n      var jquery = document.createElement('script'); jquery.type = 'text/javascript';\n      jquery.src = 'https://ajax.googleapis.com/ajax/libs/jquery/2.0.2/jquery.min.js';\n      document.getElementsByTagName('head')[0].appendChild(jquery);\n    }\")\n\n  @driver.execute_script(\"$.getScript('http://the-internet.herokuapp.com/js/vendor/jquery.growl.js')\")\n\n  @driver.execute_script(\"$('head').append('<link rel=\\\"stylesheet\\\" href=\\\"http://the-internet.herokuapp.com/css/jquery.growl.css\\\" type=\\\"text/css\\\" />');\")\nend\n\ndef display_growl_message(message)\n  @driver.execute_script(\"$.growl({ title: 'Selenium', message: '#{message}' });\")\n  sleep 2\nend\n")),(0,r.kt)("p",null,"Now let's update our test to perform an action and then display it through jQuery Growl notifications."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com'\n  add_growl_notifications\n  display_growl_message(@logger.latest)\nend\n")),(0,r.kt)("p",null,"When we run this (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"ruby log_test.rb"),"), we should see the latest log action appear in a growl notification within\nthe browser window."),(0,r.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Load the browser"),(0,r.kt)("li",{parentName:"ul"},"Take an action"),(0,r.kt)("li",{parentName:"ul"},"Grab the action from the logs"),(0,r.kt)("li",{parentName:"ul"},"Display the action")),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"Hopefully that was a helpful tip on how to get browser-agnostic, real-time logging information."),(0,r.kt)("p",null,"Happy Testing!"))}u.isMDXComponent=!0}}]);