"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[4940],{4940:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>h,frontMatter:()=>a,toc:()=>o});var i=n(87462),r=(n(67294),n(3905));const a={},l=void 0,o=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],s={toc:o},p="wrapper";function h(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,i.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"For our initial setup let's pull in our requisite libraries (",(0,r.kt)("inlineCode",{parentName:"p"},"import unittest")," for our test framework, ",(0,r.kt)("inlineCode",{parentName:"p"},"from selenium import webdriver")," to drive the browser, and ",(0,r.kt)("inlineCode",{parentName:"p"},"import time")," to add a delay in our script so we're able to see the notification messages), declare our test class, and wire up some test ",(0,r.kt)("inlineCode",{parentName:"p"},"setUp")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"tearDown")," methods."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# filename: highlight_elements.py\nimport unittest\nfrom selenium import webdriver\nimport time\nfrom selenium.webdriver.common.by import By\n\nclass HighlightElements(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n\n    def tearDown(self):\n        self.driver.quit()\n\n# ...\n")),(0,r.kt)("p",null,"Now let's create a ",(0,r.kt)("inlineCode",{parentName:"p"},"highlight")," helper method that will accept a Selenium WebDriver ",(0,r.kt)("inlineCode",{parentName:"p"},"element")," and a time to wait (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"duration"),") as arguments."),(0,r.kt)("p",null,"By setting a duration, we can control how long to highlight an element on the page before reverting the styling back. And we can make this an optional argument by setting a default value for it (e.g., 3 seconds)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# filename: highlight_elements.py\n# ...\n    def highlight(self, element, duration=3):\n        driver = self.driver\n\n        # Store original style so it can be reset later\n        original_style = element.get_attribute("style")\n\n        # Style element with dashed red border\n        driver.execute_script(\n            "arguments[0].setAttribute(arguments[1], arguments[2])",\n            element,\n            "style",\n            "border: 2px solid red; border-style: dashed;")\n\n        # Keep element highlighted for a spell and then revert\n        if (duration > 0):\n            time.sleep(duration)\n            driver.execute_script(\n                "arguments[0].setAttribute(arguments[1], arguments[2])",\n                element,\n                "style",\n                original_style)\n\n# ...\n')),(0,r.kt)("p",null,"There are three things going on here."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"We store the style of the element so we can revert it back when we're done"),(0,r.kt)("li",{parentName:"ol"},"We change the style of the element so it visually stands out (e.g., a red dashed border)"),(0,r.kt)("li",{parentName:"ol"},"We revert the style of the element back after 3 seconds")),(0,r.kt)("p",null,"We're accomplishing the style change through JavaScript's ",(0,r.kt)("inlineCode",{parentName:"p"},"setAttribute")," function. And we're executing it with Selenium's ",(0,r.kt)("inlineCode",{parentName:"p"},"execute_script")," command."),(0,r.kt)("p",null,"Now to use this in our test is simple, we just prepend a ",(0,r.kt)("inlineCode",{parentName:"p"},"find_element")," command with a call to the ",(0,r.kt)("inlineCode",{parentName:"p"},"highlight")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# filename: highlight_element.py\n# ...\n    def test_example_1(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/large')\n        self.highlight(driver.find_element(By.ID,'sibling-2.3'))\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,r.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,r.kt)("p",null,"When we save this file and run it (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"python highlight_elements.py")," from the command-line) here is what will happen."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Browser opens"),(0,r.kt)("li",{parentName:"ul"},"Load the page"),(0,r.kt)("li",{parentName:"ul"},"Find the element"),(0,r.kt)("li",{parentName:"ul"},"Change the styling of the element so it has a red dashed-line border"),(0,r.kt)("li",{parentName:"ul"},"Wait 3 seconds"),(0,r.kt)("li",{parentName:"ul"},"Revert the styling to remove the border"),(0,r.kt)("li",{parentName:"ul"},"Browser closes")),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"If you wanted to take this a step further, you could leverage this approach along with an interactive debugger."),(0,r.kt)("p",null,"Alternatively, you could verify your locators by using a browser plugin like FireFinder."),(0,r.kt)("p",null,"Happy Testing!"),(0,r.kt)("h2",{id:"about-the-author"},"About The Author"),(0,r.kt)("p",null,"This is a pseudo guest post from Brian Goad. I've adapted a blog post of his with permission. You can see the original ",(0,r.kt)("a",{parentName:"p",href:"http://swdandruby.wordpress.com/2013/07/19/did-i-select-the-right-element/"},"here"),".  You can follow him on Twitter at ",(0,r.kt)("a",{parentName:"p",href:"https://twitter.com/bbbco"},"@bbbco")," and check out his testing blog ",(0,r.kt)("a",{parentName:"p",href:"http://swdandruby.wordpress.com/"},"here"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Brian D. Goad profile picture",src:n(93330).Z+"#author-img",title:"a title",width:"400",height:"400"})))}h.isMDXComponent=!0},93330:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/brian-goad-f109f0435f7d26dd999383b3b4ba1994.jpeg"}}]);