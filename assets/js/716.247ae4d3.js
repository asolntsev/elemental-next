"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[716],{30716:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>u,frontMatter:()=>i,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const i={},o=void 0,s=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}],l={toc:s},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"First let's import our requisite classes (for annotations (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"org.junit.After"),", etc.), driving the browser with Selenium (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"org.openqa.selenium.WebDriver"),", etc.), and matchers for our assertions (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"org.hamcrest.CoreMatchers"),", etc.)) and start our class with some setup and teardown methods."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// filename: KeyboardKeys.java\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.Keys;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.assertThat;\n\npublic class KeyboardKeys {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n// ...\n")),(0,a.kt)("p",null,"Now we can wire up our test."),(0,a.kt)("p",null,"Let's use an example from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet")," that will display what key has been pressed (",(0,a.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/key_presses"},"link"),"). We'll use the result text that gets displayed to perform our assertion."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// filename: KeyboardKeys.java\n// ...\n    @Test\n    public void uploadFile() throws Exception {\n        driver.get("http://the-internet.herokuapp.com/key_presses");\n        driver.findElement(By.id("target")).sendKeys(Keys.SPACE);\n        assertThat(driver.findElement(By.id("result")).getText(), is("You entered: SPACE"));\n// ...\n')),(0,a.kt)("p",null,"After visiting the page we find an element that's visible (e.g., the one that contains the example on the page) and send the space key to it (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"builder.sendKeys(Keys.SPACE).build().perform()"),"). Then we grab the resulting text (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},'driver.findElement(By.id("result")).getText()'),") and assert that it says what we expect (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},'is("You entered: SPACE"));'),")."),(0,a.kt)("p",null,"Alternatively, we can also issue a key press without finding the element first."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// filename: KeyboardKeys.java\n// ...\n        Actions builder = new Actions(driver);\n        builder.sendKeys(Keys.LEFT).build().perform();\n        assertThat(driver.findElement(By.id("result")).getText(), is("You entered: LEFT"));\n    }\n\n}\n')),(0,a.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,a.kt)("p",null,"When you save this file and run it (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"mvn clean test")," from the command-line) here is what will happen:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Open the browser"),(0,a.kt)("li",{parentName:"ul"},"Visit the page"),(0,a.kt)("li",{parentName:"ul"},"Find the element and send the space key to it"),(0,a.kt)("li",{parentName:"ul"},"Find the result text on the page and check to that it's what we expect"),(0,a.kt)("li",{parentName:"ul"},"Send the left arrow key to the element that's currently in focus"),(0,a.kt)("li",{parentName:"ul"},"Find the result text on the page and check to that it's what we expect"),(0,a.kt)("li",{parentName:"ul"},"Close the browser")),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,"If you have a specific element that you want to issue key presses to, then finding the element first is the way to go. But if you don't have a receiving element, or you need to string together multiple key presses, then the Action Builder is what you should use."),(0,a.kt)("p",null,"Thanks to ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/RomanIsko"},"Roman Isko")," for contributing the initial Java code for this ti."),(0,a.kt)("p",null,"Happy Testing!"))}u.isMDXComponent=!0}}]);