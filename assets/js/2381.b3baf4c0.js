"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[2381],{42381:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>p,default:()=>u,frontMatter:()=>r,toc:()=>o});var a=n(87462),l=(n(67294),n(3905));const r={},p=void 0,o=[{value:"Example",id:"example",level:2},{value:"Summary",id:"summary",level:2}],s={toc:o},i="wrapper";function u(e){let{components:t,...n}=e;return(0,l.kt)(i,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"example"},"Example"),(0,l.kt)("p",null,"In ",(0,l.kt)("a",{parentName:"p",href:"http://rspec.info/"},"RSpec"),", you need a plugin to configure JUnit XML output. There are two popular ones:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/natritmeyer/yarjuf"},"yarjuf (Yet Another RSpec JUnit Formatter)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/sj26/rspec_junit_formatter"},"RSpec JUnit Formatter"))),(0,l.kt)("p",null,"Let's step through how to use the latter of the two."),(0,l.kt)("p",null,"After installing RSpec JUnit Formatter we need to specify two new parameters at run-time: a formatter, and an output file."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"rspec --format RspecJunitFormatter  --out result.xml\n")),(0,l.kt)("p",null,"Running tests with these parameters will format the test results into JUnit XML and pipe them into a ",(0,l.kt)("inlineCode",{parentName:"p"},"result.xml")," file (and overwrite it on subsequent runs)."),(0,l.kt)("p",null,"If we didn't want to type these parameters out every time we could place them into an RSpec command helper file (e.g., ",(0,l.kt)("inlineCode",{parentName:"p"},".rspec"),")."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: .rspec\n\n--format RspecJunitFormatter\n--out result.xml\n")),(0,l.kt)("p",null,"If we want to run our tests in parallel (using something like ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/grosser/parallel_tests"},"parallel_tests"),"), then we will want to generate a uniquely named result file for each parallel process (otherwise concurrent test runs will overwrite the same file rendering the results effectively useless). To do that we can use interpolation thanks to ",(0,l.kt)("a",{parentName:"p",href:"http://www.stuartellis.eu/articles/erb/"},"ERB")," and an environment variable made available by parallel_tests."),(0,l.kt)("p",null,"Thankfully parallel_tests has a RSpec command helper file as well (e.g., ",(0,l.kt)("inlineCode",{parentName:"p"},".parallel_rspec"),")."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: .parallel_rspec\n\n--format RspecJunitFormatter\n--out result<%= ENV['TEST_ENV_NUMBER'] %>.xml\n")),(0,l.kt)("p",null,"Now with numerous tests being run through ",(0,l.kt)("inlineCode",{parentName:"p"},"parallel_tests")," the final result will be a series of JUnit XML files (e.g., ",(0,l.kt)("inlineCode",{parentName:"p"},"result1.xml"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"result2.xml"),", etc.)."),(0,l.kt)("p",null,"And if we didn't want this to run all of the time (like if we only wanted JUnit XML output to get generated when running our tests on a CI server) then we can add a conditional to our ",(0,l.kt)("inlineCode",{parentName:"p"},".parallel_rspec")," file."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: .parallel_rspec\n\n<% if ENV['CI'] %>\n--format RspecJunitFormatter\n--out results/result<%= ENV['TEST_ENV_NUMBER'] %>.xml\n<% end %>\n")),(0,l.kt)("p",null,"Now all we need to do is specify an environment variable at run time in order to trigger JUnit XML output (e.g., ",(0,l.kt)("inlineCode",{parentName:"p"},"CI=on parallel_rspec"),")."),(0,l.kt)("h2",{id:"summary"},"Summary"),(0,l.kt)("p",null,"Now you're ready to plug your Selenium tests into a CI Server and let them report the results."))}u.isMDXComponent=!0}}]);