"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[9988],{19988:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>u,frontMatter:()=>o,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const o={},i=void 0,s=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}],l={toc:s},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"First let's include our requisite classes for our test framework (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"NUnit.Framework"),"), driving the browser with Selenium (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"OpenQA.Selenium"),", etc.), access to C#'s Thread.Sleep function (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"System.Threading"),"), and start our class off with some setup and teardown methods."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: Growl.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\nusing System.Threading;\n\npublic class Growl\n{\n    IWebDriver Driver;\n    IJavaScriptExecutor JSDriver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n        JSDriver = (IJavaScriptExecutor) Driver;\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n")),(0,a.kt)("p",null,"Next we'll need to visit the page we want to display notifications on and do some work with JavaScript to load ",(0,a.kt)("a",{parentName:"p",href:"http://jquery.com/"},"jQuery"),", jQuery Growl, and styles for jQuery Growl. After that we can issue commands to jQuery Growl to make notification messages display on the page."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: Growl.cs\n// ...\n    [Test]\n    public void GrowlNotificationExample()\n    {\n        Driver.Navigate().GoToUrl(\"http://the-internet.herokuapp.com\");\n\n        // check for jQuery, add it if it's not on the page\n        JSDriver.ExecuteScript(\"if (!window.jQuery) {\" +\n                               \"var jquery = document.createElement('script'); jquery.type = 'text/javascript';\" +\n                               \"jquery.src = 'https://ajax.googleapis.com/ajax/libs/jquery/2.0.2/jquery.min.js';\" +\n                               \"document.getElementsByTagName('head')[0].appendChild(jquery);\" +\n                               \"}\");\n\n        // add jQuery Growl to the page\n        JSDriver.ExecuteScript(\"$.getScript('http://the-internet.herokuapp.com/js/vendor/jquery.growl.js')\");\n\n        // add jQuery Growl Styles to the page\n        JSDriver.ExecuteScript(\"$('head').append(\\\"<link rel='stylesheet' \" +\n                               \"href='http://the-internet.herokuapp.com/css/jquery.growl.css' \" +\n                               \"type='text/css' />\\\");\");\n\n        // Adding 5 seconds of extra time\n        Thread.Sleep(5000);\n\n        // trigger a plain jQuery Growl notification to display on the page\n        JSDriver.ExecuteScript(\"$.growl({ title: 'GET', message: '/' });\");\n\n        // Adding 5 seconds of extra time to see 'GET' message\n        Thread.Sleep(5000);\n// ...\n")),(0,a.kt)("p",null,"If we wanted to see color-coded notifications we would use one of the following."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: Growl.cs\n// ...\n        JSDriver.ExecuteScript(\"$.growl.error({ title: 'ERROR', message: 'your message goes here' });\");\n        JSDriver.ExecuteScript(\"$.growl.notice({ title: 'Notice', message: 'your notice message goes here' });\");\n        JSDriver.ExecuteScript(\"$.growl.notice({ title: 'Warning!', message: 'your warning message goes here' });\");\n        Thread.Sleep(5000);\n    }\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Thread.Sleep(5000);")," is there for demonstration purposes. It will keep the Growl notifications on the page for 5 seconds so they're easier to see. However, if your test fails due to ",(0,a.kt)("inlineCode",{parentName:"p"},"growl"),", you can also use ",(0,a.kt)("inlineCode",{parentName:"p"},"Thread.Sleep(5000);")," to add some more time to your test."),(0,a.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,a.kt)("p",null,"When you save this file and run it (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\Growl.sln")," from the command-line) this is what will happen:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Browser opens"),(0,a.kt)("li",{parentName:"ul"},"Visit the page"),(0,a.kt)("li",{parentName:"ul"},"Make sure jQuery is on the page, add it if it's not"),(0,a.kt)("li",{parentName:"ul"},"Add jQuery Growl and its styles to the page"),(0,a.kt)("li",{parentName:"ul"},"Display a set of notification messages in the top-right corner of the page with jQuery Growl"),(0,a.kt)("li",{parentName:"ul"},"Notification messages disappear after 5 seconds"),(0,a.kt)("li",{parentName:"ul"},"Browser closes")),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,"In order to use this approach you will need to load jQuery Growl on every page you want to display output to -- which can be a bit of overhead. But if you want rich messaging like this, then that's the price you have to pay (unless you can get your team to add it to the application under test)."),(0,a.kt)("p",null,"I'd like to give a big thanks to Jon Austen (",(0,a.kt)("a",{parentName:"p",href:"https://twitter.com/austenjt"},"Twitter"),", ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/djangofan"},"GitHub"),", ",(0,a.kt)("a",{parentName:"p",href:"http://jonausten.info/"},"Blog"),") for giving me the idea to use jQuery Growl with Selenium."),(0,a.kt)("p",null,"Happy Testing!"))}u.isMDXComponent=!0}}]);