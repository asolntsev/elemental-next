"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[43994],{43994:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>u,frontMatter:()=>i,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={},o=void 0,l=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}],s={toc:l},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"Let's start by including our requisite libraries (",(0,r.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to drive the browser and ",(0,r.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," & ",(0,r.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers")," for our assertion) and wire up some simple ",(0,r.kt)("inlineCode",{parentName:"p"},"setup")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"teardown")," methods."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: screenshot.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n")),(0,r.kt)("p",null,"Next we'll want to create a method to execute our tests. This is where we'll capture when a failure occurs and take a screenshot."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'def run\n  setup\n  begin\n    yield\n  rescue RSpec::Expectations::ExpectationNotMetError => error\n    puts error.message\n    @driver.save_screenshot "./#{Time.now.strftime("failshot__%d_%m_%Y__%H_%M_%S")}.png"\n  end\n  teardown\nend\n')),(0,r.kt)("p",null,"After calling ",(0,r.kt)("inlineCode",{parentName:"p"},"setup")," and before calling ",(0,r.kt)("inlineCode",{parentName:"p"},"teardown")," we wrap our test code execution (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"yield"),") in a ",(0,r.kt)("inlineCode",{parentName:"p"},"rescue")," block. This handles the exception that a test failure will return. When a failure occurs the error message will get outputted to the terminal (just like it normally would) but now we are also capturing a screenshot through the help of Selenium's ",(0,r.kt)("inlineCode",{parentName:"p"},".save_screenshot")," method."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},".save_screenshot")," accepts a filename as a string (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"'failshot.png'"),"). When this command executes it will save an image file to your local system in the current working directory."),(0,r.kt)("p",null,"Note the use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Time.now.strftime")," in the screenshot filename. This is adding a timestamp (down to the second) to the filename. This provides a (reasonably) unique file name and has the added benefit of listing the files in the order taken."),(0,r.kt)("p",null,"Now let's wire up our test."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com'\n  expect(@driver.find_element(css: 'h1').text).to eql 'blah blah blah'\nend\n")),(0,r.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,r.kt)("p",null,"If we save this file and run it (",(0,r.kt)("inlineCode",{parentName:"p"},"ruby screenshot.rb")," from the command-line) here is what would happen:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Open the browser"),(0,r.kt)("li",{parentName:"ul"},"Load the homepage of ",(0,r.kt)("a",{parentName:"li",href:"http://github.com/tourdedave/the-internet"},"the-internet")),(0,r.kt)("li",{parentName:"ul"},"Check the text of the page header and fail"),(0,r.kt)("li",{parentName:"ul"},"Output a failure message in the terminal"),(0,r.kt)("li",{parentName:"ul"},"Capture a timestamped screenshot in the current working directory"),(0,r.kt)("li",{parentName:"ul"},"Close the browser")),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"For more info on ",(0,r.kt)("inlineCode",{parentName:"p"},"strftime")," (a.k.a. String Formatted Time) go ",(0,r.kt)("a",{parentName:"p",href:"http://apidock.com/ruby/DateTime/strftime"},"here"),"."),(0,r.kt)("p",null,"But if you want truly unique filenames, then you should use a unique ID in the filename instead of a timestamp (e.g., something like ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/assaf/uuid"},(0,r.kt)("inlineCode",{parentName:"a"},"uuid")),"). This will prevent screenshots from getting overwritten when you have two (or more) tests taking screenshots at the same time."))}u.isMDXComponent=!0}}]);