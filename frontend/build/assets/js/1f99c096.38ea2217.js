"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[6966],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>g});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},h=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,g=u["".concat(s,".").concat(m)]||u[m]||c[m]||a;return n?r.createElement(g,l(l({ref:t},h),{},{components:n})):r.createElement(g,l({ref:t},h))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<a;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7102:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const a={title:"How To Visually Verify Your Locators",slug:"65-highlight-elements",number:65,publish_date:new Date("2016-06-13T00:00:00.000Z"),tags:["guest post","highlight","javascript","locators"],level:2,category:"testing"},l=void 0,o={unversionedId:"non-updated-tips/highlight-elements/csharp/readme",id:"non-updated-tips/highlight-elements/csharp/readme",title:"How To Visually Verify Your Locators",description:"This is a pseudo guest post from Brian Goad. I've adapted a blog post of his with permission. You can see the original here. Brian is a Test Engineer at Digitalsmiths. You can follow him on Twitter at @bbbco and check out his testing blog here.",source:"@site/docs/non-updated-tips/65-highlight-elements/csharp/readme.md",sourceDirName:"non-updated-tips/65-highlight-elements/csharp",slug:"/non-updated-tips/highlight-elements/csharp/65-highlight-elements",permalink:"/docs/non-updated-tips/highlight-elements/csharp/65-highlight-elements",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/non-updated-tips/65-highlight-elements/csharp/readme.md",tags:[{label:"guest post",permalink:"/docs/tags/guest-post"},{label:"highlight",permalink:"/docs/tags/highlight"},{label:"javascript",permalink:"/docs/tags/javascript"},{label:"locators",permalink:"/docs/tags/locators"}],version:"current",frontMatter:{title:"How To Visually Verify Your Locators",slug:"65-highlight-elements",number:65,publish_date:"2016-06-13T00:00:00.000Z",tags:["guest post","highlight","javascript","locators"],level:2,category:"testing"},sidebar:"tutorialSidebar",previous:{title:"How To Simulate Slow Connections",permalink:"/docs/non-updated-tips/limit-bandwidth/64-limit-bandwidth"},next:{title:"How To Visually Verify Your Locators",permalink:"/docs/non-updated-tips/highlight-elements/java/65-highlight-elements"}},s={},p=[{value:"The Problem",id:"the-problem",level:2},{value:"A Solution",id:"a-solution",level:2},{value:"An Example",id:"an-example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Outro",id:"outro",level:2}],h={toc:p},u="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This is a pseudo guest post from Brian Goad. I've adapted a blog post of his with permission. You can see the original ",(0,i.kt)("a",{parentName:"p",href:"http://swdandruby.wordpress.com/2013/07/19/did-i-select-the-right-element/"},"here"),". Brian is a Test Engineer at ",(0,i.kt)("a",{parentName:"p",href:"http://www.digitalsmiths.com/"},"Digitalsmiths"),". You can follow him on Twitter at ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/bbbco"},"@bbbco")," and check out his testing blog ",(0,i.kt)("a",{parentName:"p",href:"http://swdandruby.wordpress.com/"},"here"),"."),(0,i.kt)("h2",{id:"the-problem"},"The Problem"),(0,i.kt)("p",null,"It's likely that you'll run into odd test behavior that makes you question the locators you're using in a test. But how do you interrogate your locators to make sure they are doing what you expect?"),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By leveraging some simple JavaScript and CSS styling you can highlight a targeted element on the page so you can visually inspect it to make sure it's the one you want."),(0,i.kt)("p",null,"Let's take a look at an example."),(0,i.kt)("h2",{id:"an-example"},"An Example"),(0,i.kt)("p",null,"First let's include our requisite classes for our test framework (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"NUnit.Framework"),"), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenQA.Selenium"),", etc.), access to C# collections (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Collections.Generic"),"), and start our class off with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: HighlightElements.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\nusing System.Threading;\n\npublic class HighlightElements\n{\n    IWebDriver Driver;\n    IJavaScriptExecutor JSDriver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n        JSDriver = (IJavaScriptExecutor) Driver;\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now let's create a ",(0,i.kt)("inlineCode",{parentName:"p"},"HighlightElement")," helper method that will accept a Selenium WebDriver ",(0,i.kt)("inlineCode",{parentName:"p"},"IWebElement")," and a time to wait (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"Duration"),") as parameters."),(0,i.kt)("p",null,"By setting a duration we can control how long to highlight an element on the page before reverting the styling back. And we can make this an optional argument by setting a sensible default (e.g., 3 seconds)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: HighlightElements.cs\n// ...\n    private void HighlightElement(IWebElement Element, int Duration = 3)\n    {\n        string OriginalStyle = Element.GetAttribute("style");\n\n        JSDriver.ExecuteScript("arguments[0].setAttribute(arguments[1], arguments[2])",\n                               Element,\n                               "style",\n                               "border: 2px solid red; border-style: dashed;");\n\n        Thread.Sleep(Duration * 1000);\n        JSDriver.ExecuteScript("arguments[0].setAttribute(arguments[1], arguments[2])",\n                               Element,\n                               "style",\n                               OriginalStyle);\n    }\n// ...\n')),(0,i.kt)("p",null,"There are three things going on here."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We store the style of the element so we can revert it back when we're done"),(0,i.kt)("li",{parentName:"ul"},"We change the style of the element so it visually stands out (e.g., a red dashed border)"),(0,i.kt)("li",{parentName:"ul"},"We revert the style of the element back after 3 seconds (or longer if specified)")),(0,i.kt)("p",null,"We're accomplishing the style change through JavaScript's ",(0,i.kt)("inlineCode",{parentName:"p"},"setAttribute")," function. And we're executing it with Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},"ExecuteScript")," command."),(0,i.kt)("p",null,"Now to use this in our test is a simple matter to finding an element and passing it to ",(0,i.kt)("inlineCode",{parentName:"p"},"HighlightElement"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: HighlightElements.cs\n// ...\n    [Test]\n    public void HighlightElementExample()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/large");\n        IWebElement TargetElement = Driver.FindElement(By.Id("sibling-2.3"));\n        HighlightElement(TargetElement);\n    }\n\n}\n')),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\HighlightElements.sln")," from the command-line) here is what will happen."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Find the element to highlight"),(0,i.kt)("li",{parentName:"ul"},"Change the styling of the element so it has a red dashed-line border"),(0,i.kt)("li",{parentName:"ul"},"Wait 3 seconds"),(0,i.kt)("li",{parentName:"ul"},"Revert the styling of the element back (removing the red border)"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"outro"},"Outro"),(0,i.kt)("p",null,"This approach can be handy when trying to debug your test. Alternatively, you could verify your locators in-browser with a plugin like FireFinder, or through the JavaScript console. You can read more about how to do that in ",(0,i.kt)("a",{parentName:"p",href:"/tips/verifying-locators"},"tip 35"),"."),(0,i.kt)("p",null,"Happy Testing!"))}c.isMDXComponent=!0}}]);