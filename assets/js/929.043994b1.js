"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[929],{929:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>s,default:()=>l,frontMatter:()=>a,toc:()=>h});var r=n(5893),i=n(1151);const a={},s=void 0,h=[{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}];function o(e){const t={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"example-1",children:"Example 1"}),"\n",(0,r.jsxs)(t.p,{children:["First we'll need to import our requisite classes (for annotations (e.g., ",(0,r.jsx)(t.code,{children:"org.junit.After"}),", etc.), driving the browser with Selenium (e.g., ",(0,r.jsx)(t.code,{children:"org.openqa.selenium.WebDriver"}),", etc.), and matchers for our assertions (e.g., ",(0,r.jsx)(t.code,{children:"org.hamcrest.CoreMatchers"}),", etc.)) and start our class with some setup and teardown methods."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"// filename: Frames.java\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.assertThat;\n\npublic class Frames {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n// ...\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Now onto our test. In it we'll step through ",(0,r.jsx)(t.a,{href:"http://the-internet.herokuapp.com/nested_frames",children:"an example of nested frames"})," from ",(0,r.jsx)(t.a,{href:"https://github.com/tourdedave/the-internet",children:"the-internet"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'// filename: Frames.java\n// ...\n    @Test\n    public void nestedFrames() throws Exception {\n        driver.get("http://the-internet.herokuapp.com/nested_frames");\n        driver.switchTo().frame("frame-top");\n        driver.switchTo().frame("frame-middle");\n        assertThat(driver.findElement(By.id("content")).getText(), is(equalTo("MIDDLE")));\n    }\n// ...\n'})}),"\n",(0,r.jsxs)(t.p,{children:["With Selenium's ",(0,r.jsx)(t.a,{href:"https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/WebDriver.html#switchTo--",children:(0,r.jsx)(t.code,{children:".switchTo()"})})," method we can easily switch to the frame we want. When using it for frames (e.g., ",(0,r.jsx)(t.code,{children:"driver.switchTo().frame();"}),") it accepts either an ID or name attribute. But in order to get the text of the middle frame (e.g., a frame nested within another frame), we need to switch to the parent frame (e.g., the top frame) first ",(0,r.jsx)(t.em,{children:"and then"})," switch to the child frame (e.g., the middle frame)."]}),"\n",(0,r.jsx)(t.p,{children:"Once we've done that we're able to find the element we need, grab it's text, and assert that it's what we expect."}),"\n",(0,r.jsx)(t.p,{children:"While this example helps illustrate the point of frame switching, it's not very practical."}),"\n",(0,r.jsx)(t.h2,{id:"example-2",children:"Example 2"}),"\n",(0,r.jsxs)(t.p,{children:["Here is a more likely example you'll run into -- working with a WYSIWYG Editor like ",(0,r.jsx)(t.a,{href:"http://www.tinymce.com/",children:"TinyMCE"}),". You can see the page we're testing ",(0,r.jsx)(t.a,{href:"http://the-internet.herokuapp.com/tinymce",children:"here"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'// filename: Frames.java\n// ...\n    @Test\n    public void iFrames() throws Exception {\n        driver.get("http://the-internet.herokuapp.com/tinymce");\n        driver.switchTo().frame("mce_0_ifr");\n        WebElement editor = driver.findElement(By.id("tinymce"));\n        String beforeText = editor.getText();\n        editor.clear();\n        editor.sendKeys("Hello World!");\n        String afterText = editor.getText();\n        assertThat(afterText, not(equalTo((beforeText))));\n// ...\n'})}),"\n",(0,r.jsx)(t.p,{children:"Once the page loads we switch into the frame that contains TinyMCE and..."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"grab the original text and store it"}),"\n",(0,r.jsx)(t.li,{children:"clear and input new text"}),"\n",(0,r.jsx)(t.li,{children:"grab the new text value"}),"\n",(0,r.jsx)(t.li,{children:"assert that the original and new texts are not the same"}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["Keep in mind that if we need to access a part of the page outside of the frame we're currently in we'll need to switch to it. Thankfully Selenium has a method that enables us to quickly jump back to the top level of the page -- ",(0,r.jsx)(t.a,{href:"https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/WebDriver.TargetLocator.html#defaultContent--",children:(0,r.jsx)(t.code,{children:"driver.switchTo().defaultContent();"})}),"."]}),"\n",(0,r.jsx)(t.p,{children:"Here is what that looks like in practice."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'// filename: Frames.java\n// ...\n        driver.switchTo().defaultContent();\n        assertThat(driver.findElement(By.cssSelector("h3")).getText(),\n                is("An iFrame containing the TinyMCE WYSIWYG Editor"));\n    }\n\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"expected-behavior",children:"Expected Behavior"}),"\n",(0,r.jsxs)(t.p,{children:["When you save this file and run it (e.g., ",(0,r.jsx)(t.code,{children:"mvn clean test"})," from the command-line) here is what will happen:"]}),"\n",(0,r.jsx)("u",{children:"Example 1"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Open the browser"}),"\n",(0,r.jsx)(t.li,{children:"Visit the page"}),"\n",(0,r.jsx)(t.li,{children:"Switch to the nested frame"}),"\n",(0,r.jsx)(t.li,{children:"Grab the text from the frame and assert that Selenium is in the correct place"}),"\n",(0,r.jsx)(t.li,{children:"Close the browser"}),"\n"]}),"\n",(0,r.jsx)("u",{children:"Example 2"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Open the browser"}),"\n",(0,r.jsx)(t.li,{children:"Visit the page"}),"\n",(0,r.jsx)(t.li,{children:"Switch to the frame that contains the TinyMCE editor"}),"\n",(0,r.jsx)(t.li,{children:"Find and store the text in the editor"}),"\n",(0,r.jsx)(t.li,{children:"Clear the text in the editor"}),"\n",(0,r.jsx)(t.li,{children:"Input new text in the editor"}),"\n",(0,r.jsx)(t.li,{children:"Find and store the new text in the editor"}),"\n",(0,r.jsx)(t.li,{children:"Assert that the original and new text entries don't match"}),"\n",(0,r.jsx)(t.li,{children:"Switch to the top level of the page"}),"\n",(0,r.jsx)(t.li,{children:"Grab the text from the top of the page and assert it's what we expect"}),"\n",(0,r.jsx)(t.li,{children:"Close the browser"}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(t.p,{children:"Now you're ready to handily defeat frames when they cross your path."}),"\n",(0,r.jsxs)(t.p,{children:["Thanks to ",(0,r.jsx)(t.a,{href:"https://github.com/RomanIsko",children:"Roman Isko"})," for contributing the initial Java code for this tip."]}),"\n",(0,r.jsx)(t.p,{children:"Happy Testing!"})]})}function l(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);