"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[5538],{5538:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>u,frontMatter:()=>i,toc:()=>o});var a=n(87462),r=(n(67294),n(3905));const i={},l=void 0,o=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:o},s="wrapper";function u(e){let{components:t,...i}=e;return(0,r.kt)(s,(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"For our initial setup let's pull in the ",(0,r.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," gem and wire up some simple ",(0,r.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," methods."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: highlight.rb\n\nrequire 'selenium-webdriver'\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,r.kt)("p",null,"Now let's create a ",(0,r.kt)("inlineCode",{parentName:"p"},"highlight")," helper method that will accept a Selenium WebDriver ",(0,r.kt)("inlineCode",{parentName:"p"},"element")," and a time to wait (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"duration"),") as arguments."),(0,r.kt)("p",null,"By setting a duration, we can control how long to highlight an element on the page before reverting the styling back. And we can make this an optional argument by setting a default (e.g., 3 seconds)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'def highlight(element, duration = 3)\n\n  # store original style so it can be reset later\n  original_style = element.attribute("style")\n\n  # style element with yellow border\n  @driver.execute_script(\n    "arguments[0].setAttribute(arguments[1], arguments[2])",\n    element,\n    "style",\n    "border: 2px solid red; border-style: dashed;")\n\n  # keep element highlighted for a spell and then revert\n  if duration > 0\n    sleep duration\n    @driver.execute_script(\n      "arguments[0].setAttribute(arguments[1], arguments[2])",\n      element,\n      "style",\n      original_style)\n  end\n\nend\n')),(0,r.kt)("p",null,"There are three things going on here."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"We store the style of the element so we can revert it back when we're done"),(0,r.kt)("li",{parentName:"ol"},"We change the style of the element so it visually stands out (e.g., a red dashed border)"),(0,r.kt)("li",{parentName:"ol"},"We revert the style of the element back after 3 seconds")),(0,r.kt)("p",null,"We're accomplishing the style change through JavaScript's ",(0,r.kt)("inlineCode",{parentName:"p"},"setAttribute")," function. And we're executing it with Selenium's ",(0,r.kt)("inlineCode",{parentName:"p"},"execute_script")," command."),(0,r.kt)("p",null,"Now to use this in our test is simple, we just prepend a ",(0,r.kt)("inlineCode",{parentName:"p"},"find_element")," action with the ",(0,r.kt)("inlineCode",{parentName:"p"},"highlight")," command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/large'\n  highlight @driver.find_element(id: 'sibling-2.3')\nend\n")),(0,r.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,r.kt)("p",null,"If you were to save this file and run it (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"ruby highlight.rb")," from the command-line), here is what you would see."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Load the page"),(0,r.kt)("li",{parentName:"ol"},"Find the element"),(0,r.kt)("li",{parentName:"ol"},"Change the styling of the element so it has a red dashed-line border"),(0,r.kt)("li",{parentName:"ol"},"Wait 3 seconds"),(0,r.kt)("li",{parentName:"ol"},"Revert the styling to remove the border")),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"If you wanted to take this a step further, you could leverage this approach along with an interactive debugger."),(0,r.kt)("p",null,"Alternatively, you could verify your locators by using a browser plugin like FireFinder."),(0,r.kt)("p",null,"Happy Testing!"),(0,r.kt)("h2",{id:"about-the-author"},"About The Author"),(0,r.kt)("p",null,"You can follow Brian on Twitter at ",(0,r.kt)("a",{parentName:"p",href:"https://twitter.com/bbbco"},"@bbbco"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Brian D. Goad profile picture",src:n(93330).Z+"#author-img",title:"a title",width:"400",height:"400"})))}u.isMDXComponent=!0},93330:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/brian-goad-f109f0435f7d26dd999383b3b4ba1994.jpeg"}}]);