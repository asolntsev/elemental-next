"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[9873],{89873:(e,n,i)=>{i.r(n),i.d(n,{contentTitle:()=>s,default:()=>a,frontMatter:()=>o,toc:()=>d});var t=i(85893),r=i(11151);const o={},s=void 0,d=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsxs)(n.p,{children:["Let's start by pulling in our requisite libraries for interacting with the operating system (e.g., ",(0,t.jsx)(n.code,{children:"import os"}),"), creating a temporary directory and cleaning it up, using our testing framework (e.g., ",(0,t.jsx)(n.code,{children:"import unittest"}),"), and driving the browser with Selenium (e.g., ",(0,t.jsx)(n.code,{children:"from selenium import webdriver"}),")."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# filename: download.py\nimport os\nimport time\nimport shutil\nimport tempfile\nimport unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.firefox.options import Options\nfrom selenium.webdriver.common.by import By\n\n# ...\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now to create a test class and add our test's setup."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# filename: download.py\nclass Download(unittest.TestCase):\n\n    def setUp(self):\n        self.download_dir = tempfile.mkdtemp()\n        options = Options()\n        options.set_preference("browser.download.dir", self.download_dir)\n        options.set_preference("browser.download.folderList", 2)\n        options.set_preference(\n            "browser.helperApps.neverAsk.saveToDisk",\n            "images/jpeg, application/pdf, application/octet-stream")\n        options.set_preference("pdfjs.disabled", True)\n        self.driver = webdriver.Firefox(options=options)\n# ...\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Our ",(0,t.jsx)(n.code,{children:"setUp(self):"})," method is where the magic is happening in this example. In it we're creating a uniquely named temp directory (e.g., ",(0,t.jsx)(n.code,{children:"self.download_dir = tempfile.mkdtemp()"}),"), configuring a browser profile object (for Firefox in this case), and plying it with the necessary configuration parameters to make it automatically download the file where we want (e.g., in the newly created temp directory)."]}),"\n",(0,t.jsx)(n.p,{children:"Here's a breakdown of each of the browser preferences being set:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"browser.download.dir"})," accepts a string. This is how we set the custom download path. It needs to be an absolute path."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"browser.download.folderList"})," takes a number. It tells Firefox which download directory to use. ",(0,t.jsx)(n.code,{children:"2"})," tells it to use a custom download path, wheras ",(0,t.jsx)(n.code,{children:"1"})," would use the browser's default path, and ",(0,t.jsx)(n.code,{children:"0"})," would place them on the Desktop."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"browser.helperApps.neverAsk.saveToDisk"})," tells Firefox when not to prompt for a file download. It accepts a string of ",(0,t.jsx)(n.a,{href:"http://en.wikipedia.org/wiki/Internet_media_type",children:"the file's MIME type"}),". If you want to specify more than one, you do it with a comma-separated string (which we've done)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pdfjs.disabled"})," is for when downloading PDFs. This overrides the sensible default in Firefox that previews PDFs in the browser. It accepts a boolean."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["This object is then passed into our instance of Selenium (e.g., ",(0,t.jsx)(n.code,{children:"self.driver = webdriver.Firefox(options=options"}),")."]}),"\n",(0,t.jsx)(n.p,{children:"Now let's take care of our test's teardown."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# filename: download.py\n# ...\n  def tearDown(self):\n      self.driver.quit()\n      shutil.rmtree(self.download_dir)\n# ...\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.code,{children:"tearDown(self):"})," we close the browser instance and then clean up the temp directory by deleting it, which will recursively delete the files in the folder before deleting it."]}),"\n",(0,t.jsx)(n.p,{children:"Now to wire up our test."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# filename: download.py\n# ...\n    def test_example_1(self):\n        driver = self.driver\n        driver.get(\'http://the-internet.herokuapp.com/download\')\n        download_link = driver.find_element(By.CSS_SELECTOR, \'.example a\')\n        download_link.click()\n\n        time.sleep(1.0)  # necessary for slow download speeds\n\n        files = os.listdir(self.download_dir)\n        files = [os.path.join(self.download_dir, f)\n                 for f in files]  # add directory to each filename\n        assert len(files) > 0, "no files were downloaded"\n        assert os.path.getsize(files[0]) > 0, "downloaded file was empty"\n\n\nif __name__ == "__main__":\n    unittest.main()\n'})}),"\n",(0,t.jsxs)(n.p,{children:["After visiting the page we find the first download link and click it. The click triggers an automatic download to the temp directory created in ",(0,t.jsx)(n.code,{children:"setUp()"}),". We need to wait for the download to finish, so we add a brief sleep (e.g., ",(0,t.jsx)(n.code,{children:"time.sleep(1.0)"}),"). After the file downloads, we perform some rudimentary checks to make sure the unique temp directory isn't empty and then check the file to see that it isn't empty either."]}),"\n",(0,t.jsx)(n.p,{children:"The last two lines of the file are so the file can be executed directly from the command-line."}),"\n",(0,t.jsx)(n.h2,{id:"expected-behavior",children:"Expected Behavior"}),"\n",(0,t.jsxs)(n.p,{children:["When we save this file and run it (e.g., ",(0,t.jsx)(n.code,{children:"python download.py"})," from the command-line) this is what will happen:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Create a uniquely named temp directory in the present working directory"}),"\n",(0,t.jsx)(n.li,{children:"Open the browser"}),"\n",(0,t.jsx)(n.li,{children:"Visit the page"}),"\n",(0,t.jsx)(n.li,{children:"Find and click the first download link on the page"}),"\n",(0,t.jsx)(n.li,{children:"Automatically download the file to the temp directory without prompting"}),"\n",(0,t.jsx)(n.li,{children:"Check that the temp directory is not empty"}),"\n",(0,t.jsx)(n.li,{children:"Check that the downloaded file is not empty"}),"\n",(0,t.jsx)(n.li,{children:"Close the browser"}),"\n",(0,t.jsx)(n.li,{children:"Delete the temp directory"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsxs)(n.p,{children:["A similar approach can be applied to some other browsers with varying configurations. But downloading files this way is not sustainable or recommended. Mark Collin articulates this point well in his prominent write-up about it ",(0,t.jsx)(n.a,{href:"http://ardesco.lazerycode.com/index.php/2012/07/how-to-download-files-with-selenium-and-why-you-shouldnt/",children:"here"}),". In a future tip I'll cover a more reliable, faster, and scalable browser agnostic approach to downloading files. Stay tuned."]}),"\n",(0,t.jsxs)(n.p,{children:["Thanks to ",(0,t.jsx)(n.a,{href:"https://github.com/trabulmonkee",children:"Mike Millgate"})," for contributing the Python code for this tip, and to ",(0,t.jsx)(n.a,{href:"https://github.com/Dude-X",children:"Isaul Vargas"})," & ",(0,t.jsx)(n.a,{href:"https://github.com/bittner",children:"Peter Bittner"})," for code reviewing!"]}),"\n",(0,t.jsx)(n.p,{children:"Happy Testing!"})]})}function a(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);