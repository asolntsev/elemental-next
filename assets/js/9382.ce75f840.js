"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[9382],{99382:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>u,frontMatter:()=>r,toc:()=>o});var a=n(87462),i=(n(67294),n(3905));const r={},l=void 0,o=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}],p={toc:o},s="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(s,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Our example application is available ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/javascript_alerts"},"here")," on ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the-internet"),". It has various JavaScript Alerts available (e.g., an alert, a confirmation, and a prompt). Let's demonstrate testing a confirmation dialog (e.g., a prompt which asks the user to click ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Cancel"),")."),(0,i.kt)("p",null,"First, we'll include our requisite libraries, declare the test class, and wire up some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: javascript_alerts.py\nimport unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\n\nclass JavaScriptAlerts(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n\n    def tearDown(self):\n        self.driver.quit()\n# ...\n")),(0,i.kt)("p",null,"Now let's write our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: javascript_alerts.py\n# ...\n    def test_example_1(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/javascript_alerts')\n        driver.find_element(By.CSS_SELECTOR, \"ul > li:nth-child(1) > button\").click()\n        popup = driver.switch_to.alert\n        popup.accept()\n        result = driver.find_element(By.ID, 'result').text\n        assert result == 'You successfully clicked an alert'\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,i.kt)("p",null,"A quick glance at the page's markup shows that there are no unique IDs on the buttons. So to click on the second button (to trigger the JavaScript confirmation dialog) we find all of the buttons on the page using ",(0,i.kt)("inlineCode",{parentName:"p"},"find_elements")," and click on the second one. Since ",(0,i.kt)("inlineCode",{parentName:"p"},"find_elements")," returns a list of all found elements, we can assume that the first item can be selected using ",(0,i.kt)("inlineCode",{parentName:"p"},"[0]")," (since lists in Python start counting at ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),"). So the second item would be ",(0,i.kt)("inlineCode",{parentName:"p"},"[1]"),"."),(0,i.kt)("p",null,"After click the button to trigger the JavaScript Alert we use Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},"switch_to.alert")," method to focus on the JavaScript pop-up and use ",(0,i.kt)("inlineCode",{parentName:"p"},".accept()")," to click ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok"),". If we wanted to click ",(0,i.kt)("inlineCode",{parentName:"p"},"Cancel")," we would have used ",(0,i.kt)("inlineCode",{parentName:"p"},".dismiss()"),"."),(0,i.kt)("p",null,"After accepting the alert, our main browser window will automatically regain focus and the page will display the result that we chose. This text is what we use for our assertion, making sure that the words ",(0,i.kt)("inlineCode",{parentName:"p"},"You clicked: Ok")," are displayed on the page."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"python javascript_alerts.py")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Click the second button on the page"),(0,i.kt)("li",{parentName:"ul"},"JavaScript Confirmation Alert appears"),(0,i.kt)("li",{parentName:"ul"},"Accept the JavaScript Confirmation Alert"),(0,i.kt)("li",{parentName:"ul"},"Assert that the result on the page is what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"We've learned how to accept/dismiss Javascript alerts using Selenium Webdriver by locating the alert using Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},"switchTo().alert()"),". After accepting/dismissing the alert, our main browser window will automatically regain focus and the page will display the result."),(0,i.kt)("p",null,"Happy Testing!"))}u.isMDXComponent=!0}}]);