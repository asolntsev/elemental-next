"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[3531],{3531:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>h,frontMatter:()=>r,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const r={},o=void 0,p=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}],l={toc:p},s="wrapper";function h(e){let{components:t,...n}=e;return(0,i.kt)(s,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Our example page is from ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the-internet")," and can be seen ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/abtest"},"here"),". There are three different versions of the page that are available. On each page the heading text will vary:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Control: ",(0,i.kt)("inlineCode",{parentName:"li"},"A/B Test Control")),(0,i.kt)("li",{parentName:"ul"},"Variation 1: ",(0,i.kt)("inlineCode",{parentName:"li"},"A/B Test Variation 1")),(0,i.kt)("li",{parentName:"ul"},"Opt-out: ",(0,i.kt)("inlineCode",{parentName:"li"},"No A/B Test"))),(0,i.kt)("p",null,"Let's start things off by loading our requisite libraries (",(0,i.kt)("inlineCode",{parentName:"p"},"import unittest")," for our test framework and ",(0,i.kt)("inlineCode",{parentName:"p"},"from selenium import webdriver")," to drive the browser), declare our test class, and wire up some test ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: ab_test_opt_out.py\nimport unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\n\nclass ABTestOptOut(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n\n    def tearDown(self):\n        self.driver.quit()\n# ...\n")),(0,i.kt)("p",null,"Now let's begin our first test to step through loading the split testing page and verifying that the text changes after we forge an opt-out cookie."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: ab_test_opt_out.py\n# ...\n    def test_forge_cookie_on_target_page(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/abtest')\n        heading_text = driver.find_element(By.TAG_NAME,'h3').text\n        assert heading_text in ['A/B Test Variation 1', 'A/B Test Control']\n        driver.add_cookie({'name' : 'optimizelyOptOut', 'value' : 'true'})\n        driver.refresh()\n        heading_text = driver.find_element(By.TAG_NAME,'h3').text\n        assert heading_text == 'No A/B Test'\n\n# ...\n")),(0,i.kt)("p",null,"After navigating to the page we confirm that we are in one of the A/B test groups by grabbing the heading text and checking to see if it matches what we expect. After that we add the opt-out cookie, refresh the page, and then confirm that we are no longer in the A/B test group by checking the heading text again."),(0,i.kt)("p",null,"We could also load the opt-out cookie before navigating to this page."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: ab_test_opt_out.py\n# ...\n    def test_forge_cookie_on_homepage_then_navigate_to_target_page(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com')\n        driver.add_cookie({'name' : 'optimizelyOptOut', 'value' : 'true'})\n        driver.get('http://the-internet.herokuapp.com/abtest')\n        heading_text = driver.find_element(By.TAG_NAME,'h3').text\n        assert heading_text == 'No A/B Test'\n\n# ...\n")),(0,i.kt)("p",null,"Here we are navigating to the main page of the site first and then adding the opt-out cookie. After that we navigate to the split test page and then perform our check. Alternatively, we could opt out without forging a cookie. Instead we just need to append an opt out parameter to the URL."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: ab_test_opt_out.py\n    def test_url_parameter(self):\n            driver = self.driver\n            driver.get('http://the-internet.herokuapp.com/abtest?optimizely_opt_out=true')\n            driver.switch_to.alert.dismiss()\n            heading_text = driver.find_element(By.TAG_NAME,'h3').text\n            assert heading_text == 'No A/B Test'\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,i.kt)("p",null,"By appending ",(0,i.kt)("inlineCode",{parentName:"p"},"?optimizely_opt_out=true")," we achieve the same outcome as before. Keep in mind that this approach triggers a JavaScript alert, so we have to switch to and dismiss it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"driver.switch_to.alert.dismiss()"),") before performing our check."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"python ab_test_opt_out.py")," from the command-line) here is what will happen with either of the tests:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Opt-out of the split tests (either by cookie or appended URL)"),(0,i.kt)("li",{parentName:"ul"},"Visit the split testing page"),(0,i.kt)("li",{parentName:"ul"},"Grab the header text"),(0,i.kt)("li",{parentName:"ul"},"Confirm that the session is opted out of the split test"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip was helpful in guiding you in different methods of how to opt out of split tests."),(0,i.kt)("p",null,"Happy Testing!"))}h.isMDXComponent=!0}}]);