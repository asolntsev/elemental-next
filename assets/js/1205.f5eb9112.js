"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[1205],{51205:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>h,default:()=>d,frontMatter:()=>a,toc:()=>s});var r=n(85893),i=n(11151);const a={},h=void 0,s=[{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"example-1",children:"Example 1"}),"\n",(0,r.jsxs)(t.p,{children:["We'll first need to pull in our requisite libraries (",(0,r.jsx)(t.code,{children:"selenium-webdriver"})," to drive the browser, and ",(0,r.jsx)(t.code,{children:"rspec/expecations"})," & ",(0,r.jsx)(t.code,{children:"RSpec::Matchers"})," to perform our assertions) and wire up some simple ",(0,r.jsx)(t.code,{children:"setup"}),", ",(0,r.jsx)(t.code,{children:"teardown"}),", and ",(0,r.jsx)(t.code,{children:"run"})," methods."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"# filename: frames.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Now onto our test. In it, we'll step through ",(0,r.jsx)(t.a,{href:"http://the-internet.herokuapp.com/nested_frames",children:"an example of nested frames"})," which can be found on ",(0,r.jsx)(t.a,{href:"https://github.com/tourdedave/the-internet",children:"the-internet"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"run do\n  @driver.get 'http://the-internet.herokuapp.com/nested_frames'\n  @driver.switch_to.frame('frame-top')\n  @driver.switch_to.frame('frame-middle')\n  expect(@driver.find_element(id: 'content').text).to eql 'MIDDLE'\nend\n"})}),"\n",(0,r.jsxs)(t.p,{children:["With Selenium's ",(0,r.jsx)(t.a,{href:"https://seleniumhq.github.io/selenium/docs/api/rb/Selenium/WebDriver/TargetLocator.html#frame-instance_method",children:(0,r.jsx)(t.code,{children:".switch_to.frame"})})," method we can simply switch to the frame we want. It accepts either an ID or name attribute, but in order to get the text of the middle frame (e.g., a frame nested within another frame), we need to switch to the parent frame (e.g., the top frame) and then switch to the child frame (e.g., the middle frame)."]}),"\n",(0,r.jsx)(t.p,{children:"Once we've done that we're able to find the element we need, grab it's text, and assert that it's what we expect."}),"\n",(0,r.jsx)(t.p,{children:"While this example helps illustrate the point of frame switching, it's not very practical."}),"\n",(0,r.jsx)(t.h2,{id:"example-2",children:"Example 2"}),"\n",(0,r.jsxs)(t.p,{children:["Here is a more likely example you'll run into -- working with a WYSIWYG (What You See Is What You Get) Editor like ",(0,r.jsx)(t.a,{href:"http://www.tinymce.com/",children:"TinyMCE"}),". You can see the page we're testing ",(0,r.jsx)(t.a,{href:"http://the-internet.herokuapp.com/tinymce",children:"here"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"# filename: frames.rb\n\nrun do\n  @driver.get 'http://the-internet.herokuapp.com/tinymce'\n  @driver.switch_to.frame('mce_0_ifr')\n  editor = @driver.find_element(id: 'tinymce')\n  before_text = editor.text\n  editor.clear\n  editor.send_keys 'Hello World!'\n  after_text = editor.text\n  expect(after_text).not_to eql before_text\nend\n"})}),"\n",(0,r.jsx)(t.p,{children:"Once the page loads we switch into the frame that contains TinyMCE and..."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"grab the original text and store it"}),"\n",(0,r.jsx)(t.li,{children:"clear and input new text"}),"\n",(0,r.jsx)(t.li,{children:"grab the new text value"}),"\n",(0,r.jsx)(t.li,{children:"assert that the original and new texts are not the same"}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["Keep in mind that if we need to access a part of the page outside of the frame we are currently in we'll need to switch to it. Thankfully Selenium has a method that enables us to quickly jump back to the top level of the page -- ",(0,r.jsx)(t.a,{href:"https://seleniumhq.github.io/selenium/docs/api/rb/Selenium/WebDriver/TargetLocator.html#default_content-instance_method",children:(0,r.jsx)(t.code,{children:"switch_to.default_content"})}),"."]}),"\n",(0,r.jsx)(t.p,{children:"Here is what that looks like in practice"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"  @driver.switch_to.default_content\n  expect(@driver.find_element(css: 'h3').text).not_to be_empty\n"})}),"\n",(0,r.jsx)(t.h2,{id:"expected-behavior",children:"Expected Behavior"}),"\n",(0,r.jsxs)(t.p,{children:["If we save the file and run it (e.g., ",(0,r.jsx)(t.code,{children:"ruby frames.rb"})," from the command-line) here is what will happen:"]}),"\n",(0,r.jsx)("u",{children:"Example 1"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Open the browser"}),"\n",(0,r.jsx)(t.li,{children:"Visit the page"}),"\n",(0,r.jsx)(t.li,{children:"Switch to the nested frame"}),"\n",(0,r.jsx)(t.li,{children:"Grab the text from the frame and assert that Selenium is in the correct place"}),"\n",(0,r.jsx)(t.li,{children:"Close the browser"}),"\n"]}),"\n",(0,r.jsx)("u",{children:"Example 2"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Open the browser"}),"\n",(0,r.jsx)(t.li,{children:"Visit the page"}),"\n",(0,r.jsx)(t.li,{children:"Switch to the frame that contains the TinyMCE editor"}),"\n",(0,r.jsx)(t.li,{children:"Grab and clear the text in the editor"}),"\n",(0,r.jsx)(t.li,{children:"Input and grab new text in the edtitor"}),"\n",(0,r.jsx)(t.li,{children:"Assert that the original and new text entries don't match"}),"\n",(0,r.jsx)(t.li,{children:"Switch to the top level of the page"}),"\n",(0,r.jsx)(t.li,{children:"Grab the text from the top of the page and assert that it's not empty"}),"\n",(0,r.jsx)(t.li,{children:"Close the browser"}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(t.p,{children:"Now you can readily defeat frames when they cross your path."}),"\n",(0,r.jsx)(t.p,{children:"Happy Testing!"})]})}function d(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);