"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[19584],{19584:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>s,default:()=>u,frontMatter:()=>r,toc:()=>o});var a=n(87462),i=(n(67294),n(3905));const r={},s=void 0,o=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}],l={toc:o},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"In this example we are going to take the following sample code and upgrade it with the use of a Page Object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\n  @base_url = 'http://the-internet.herokuapp.com/dynamic_loading/2'\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n\ndef wait_for(seconds=10)\n  Selenium::WebDriver::Wait.new(:timeout => seconds).until { yield }\nend\n\nrun do\n    @driver.get @base_url\n    @driver.find_element(css: '#start button').click\n    wait_for { @driver.find_element(css: '#finish').displayed? }\n    expect(@driver.find_element(css: '#finish').text).to eql('Hello World!')\nend\n")),(0,i.kt)("p",null,"The first order of business is pretty simple. We keep our setup, teardown, and run actions mostly the same.\nBut we change the base_url from an instance variable to an environment variable. Doing this will enable\nus to access it from anywhere in our test suite."),(0,i.kt)("p",null,"While the usage of environment variables can be a slippery slope, this is an ideal candidate for it since\nit effects the overall behavior of the suite."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\n  ENV['base_url'] = 'http://the-internet.herokuapp.com/dynamic_loading/2'\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Next we create a Page Object for the Dynamic Loading page by using a standard Ruby class and add some relevant\nbits to it."),(0,i.kt)("p",null,"At the top of it we pull out the CSS locators used in our test steps and put them into helpfully\nnamed constants to use instead. And instead of using the two part 'how', 'what' approach, we are\nusing a hash to store the locator type and its value."),(0,i.kt)("p",null,"Next we use ",(0,i.kt)("inlineCode",{parentName:"p"},"attr_reader")," to create a place to store the Selenium WebDriver instance for use throughout the class."),(0,i.kt)("p",null,"The class expects an argument (e.g. the Selenium WebDriver instance) which is received through the initialize method.\nInside the initialize method we take care of passing the Selenium object into the ",(0,i.kt)("inlineCode",{parentName:"p"},"attr_reader")," object along with\nvisiting the page and verifying that we are in the correct place. All of these things will execute in order when\nthis class is instantiated."),(0,i.kt)("p",null,"We then break out each of the test steps into methods that execute the behavior specific to the page while also\nswapping out the hard-coded CSS locators for our new CSS locator constant variables."),(0,i.kt)("p",null,"At the bottom of the class we have private helper methods. These methods aren't necessarily specific to the page\nthis class represents, but they are useful for it to function. So we want to access them within the class, but\nmake it so they're not available outside of the class. Using the private classification gets us this behavior nicely."),(0,i.kt)("p",null,"And lastly, we update the ",(0,i.kt)("inlineCode",{parentName:"p"},"displayed?")," private method to take a single argument for a 'locator' object (e.g. one of\nour CSS locator constant variables)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"class DynamicLoading\n\n  START_BUTTON = { css: '#start button' }\n  FINISH_BUTTON = { css: '#finish' }\n\n  attr_reader :driver\n\n  def initialize(driver)\n    @driver = driver\n    visit\n    verify_page\n  end\n\n  def visit\n    driver.get ENV['base_url']\n  end\n\n  def start\n    driver.find_element(START_BUTTON).click\n  end\n\n  def finish_present?\n    wait_for { @driver.find_element(FINISH_BUTTON).displayed? }\n  end\n\n  def finish_text\n    driver.find_element(FINISH_BUTTON).text\n  end\n\n  private\n\n    def verify_page\n      expect(driver.title).to eql('The Internet')\n    end\n\n    def wait_for(seconds=10)\n      Selenium::WebDriver::Wait.new(:timeout => seconds).until { yield }\n    end\n\nend\n")),(0,i.kt)("p",null,"With our new Page Object in hand, our run action cleans up considerably. Making it more succinct and readable."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  dynamic_loading = DynamicLoading.new(@driver)\n  dynamic_loading.start\n  dynamic_loading.finish_present?\n  expect(dynamic_loading.finish_text).to eql('Hello World!')\nend\n")),(0,i.kt)("p",null,"It's worth noting that while we are peforming an assertion in the Page Object in our ",(0,i.kt)("inlineCode",{parentName:"p"},"verify_page"),"\naction ",(0,i.kt)("strong",{parentName:"p"},"assertions should only be performed in your test scripts")," (just like the run action above).\nUsing a ",(0,i.kt)("inlineCode",{parentName:"p"},"verify_page")," action is just a helpful exception to the rule."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Load Dynamic Loading page on The Internet"),(0,i.kt)("li",{parentName:"ul"},"Click on start"),(0,i.kt)("li",{parentName:"ul"},"Wait for the finish message to appear"),(0,i.kt)("li",{parentName:"ul"},"Grab the text from it"),(0,i.kt)("li",{parentName:"ul"},"Assert that the text we want is within it")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip has helped you wade into the waters of Page Objects in Selenium."),(0,i.kt)("p",null,"Stay tuned for a future tip where we implement a Base Page Object class to abstract things even further\nand roll our own Domain Specific Language (DSL) for our test suite."),(0,i.kt)("p",null,"Until then, Happy Testing!"))}u.isMDXComponent=!0}}]);