"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[20089],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,h=p["".concat(l,".").concat(m)]||p[m]||c[m]||o;return n?r.createElement(h,i(i({ref:t},d),{},{components:n})):r.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},81125:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const o={hide_table_of_contents:!0,publish_date:new Date("2015-10-15T00:00:00.000Z"),last_update:{date:new Date("2023-03-20T00:00:00.000Z")},level:2,language:"ruby"},i=void 0,s={unversionedId:"forgot-password/ruby",id:"forgot-password/ruby",title:"ruby",description:"A Solution",source:"@site/docs/43-forgot-password/ruby.md",sourceDirName:"43-forgot-password",slug:"/forgot-password/ruby",permalink:"/docs/forgot-password/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/43-forgot-password/ruby.md",tags:[],version:"current",lastUpdatedBy:"Diego Molina",lastUpdatedAt:1679270400,formattedLastUpdatedAt:"Mar 20, 2023",frontMatter:{hide_table_of_contents:!0,publish_date:"2015-10-15T00:00:00.000Z",last_update:{date:"2023-03-20T00:00:00.000Z"},level:2,language:"ruby"}},l={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"a-solution"},"A Solution"),(0,a.kt)("p",null,"By leveraging a third-party library we can perform an end-to-end test by accessing a forgot password email from a\nGmail account headless (to get the information we need) and then put it to use with Selenium to make sure it works\ncorrectly."),(0,a.kt)("p",null,"Let's dig in with an example that uses ",(0,a.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/forgot_password"},"the forgot password example"),"\non ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/saucelabs/the-internet"},"the-internet"),"."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"First let's include our dependent libraries (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to control the browser, ",(0,a.kt)("inlineCode",{parentName:"p"},"rspec/expectations"),"\nand ",(0,a.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers")," for assertions, and ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/dcparker/ruby-gmail"},(0,a.kt)("inlineCode",{parentName:"a"},"gmail"))," to access a Gmail account headless) and create some\nsimple ",(0,a.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"run")," methods to handle our test configuration."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: forgot_password.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec-expectations'\ninclude RSpec::Matchers\nrequire 'gmail'\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,a.kt)("p",null,"Once triggered, the forgot password e-mail should be received quickly. But since we're dealing with a third-party\nprovider we'll want to build in some resiliency. So let's create a simple mechanism to retry our email lookup a\nconfigurable number of times and make it wait a handful of seconds in-between each attempt."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"def try(number_of_times)\n  count = 0 ; item_of_interest = nil\n  until item_of_interest != nil || count == number_of_times\n    item_of_interest = yield\n    sleep 10\n    count += 1\n  end\nend\n")),(0,a.kt)("p",null,"When calling this method, we will need to specify an integer for the number of times that we'd like to retry an\naction. And we'll specify the action by passing it to the method through the use of ",(0,a.kt)("inlineCode",{parentName:"p"},"yield")," (which enables us to\npass a block of code into the method just like we're doing for the ",(0,a.kt)("inlineCode",{parentName:"p"},"run")," method). Between each attempt, the\nmethod will wait for ",(0,a.kt)("inlineCode",{parentName:"p"},"10")," seconds."),(0,a.kt)("p",null,"Now let's wire up our test."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'https://the-internet.herokuapp.com/forgot_password'\n  @driver.find_element(id: 'email').send_keys(ENV['EMAIL_USERNAME'])\n  @driver.find_element(id: 'form_submit').click\n\n  gmail = Gmail.new(ENV['EMAIL_USERNAME'], ENV['EMAIL_PASSWORD'])\n  try(6) { @email = gmail.inbox.emails(:unread, from: 'no-reply@the-internet.herokuapp.com').last }\n  message_body = @email.message.body.raw_source\n\n  url =  message_body.scan(/https?:\\/\\/[\\S]+/).last\n  username = message_body.scan(/username: (.*)$/)[0][0].strip\n  password = message_body.scan(/password: (.*)$/)[0][0].strip\n\n  @driver.get url\n  @driver.find_element(id: 'username').send_keys username\n  @driver.find_element(id: 'password').send_keys password\n  @driver.find_element(id: 'login').submit\n  expect(@driver.current_url.include?('/secure')).to eql true\nend\n")),(0,a.kt)("p",null,"We initiate the forgot password workflow by loading the page with the forgot password form, providing an email\naddress, and submitting the form. We then access the Gmail account headless. Notice that the username and password\ncredentials are specified with environment variables, but you could just as easily hard-code your credentials here."),(0,a.kt)("p",null,"After connecting we attempt to retrieve the message body. Here is where we employ our ",(0,a.kt)("inlineCode",{parentName:"p"},"try")," method (retrying the\nlookup action up to ",(0,a.kt)("inlineCode",{parentName:"p"},"6")," times). If the inbox lookup doesn't find what it's looking for, it will return ",(0,a.kt)("inlineCode",{parentName:"p"},"nil"),",\nwhich will trigger the ",(0,a.kt)("inlineCode",{parentName:"p"},"try")," loop to run again after waiting ",(0,a.kt)("inlineCode",{parentName:"p"},"10")," seconds. If it finds what we're looking for,\nthen the loop will stop running and the test will proceed."),(0,a.kt)("p",null,"Once the forgot password email is found we parse it's body with regular expressions to find the URL & user\ncredentials in it. We then put these values to use with our browser session (which is still active) by visiting\nthe URL and logging in. Once done we assert that login was successful by checking to see if we gained access to a\nsecure part of the site."),(0,a.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,a.kt)("p",null,"If you save this file and run it (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"ruby forgot_password.rb")," from the command-line) here is what will happen:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Open the browser"),(0,a.kt)("li",{parentName:"ul"},"Visit the page and initiate the forgot password workflow"),(0,a.kt)("li",{parentName:"ul"},"Headless access Gmail and retrieve the email message body"),(0,a.kt)("li",{parentName:"ul"},"Parse the message body for user credentials"),(0,a.kt)("li",{parentName:"ul"},"Visit the site and login with the user credentials"),(0,a.kt)("li",{parentName:"ul"},"Check that login was successful"),(0,a.kt)("li",{parentName:"ul"},"Close the browser")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NOTE: When running this script you can pass in the Gmail account username and password at runtime\n(e.g., ",(0,a.kt)("inlineCode",{parentName:"strong"},"EMAIL_USERNAME=youremail@gmail.com EMAIL_PASSWORD=yourpassword ruby forgot_password.rb"),").")),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,"Your forgot password workflow might be different, so adapt as needed. And if you have other things in an e-mail\nmessage body that you need to parse for and aren't sure of the regular expressions you need -- give\n",(0,a.kt)("a",{parentName:"p",href:"http://rubular.com/"},"Rubular")," a try."),(0,a.kt)("p",null,"Happy Testing!"),(0,a.kt)("h2",{id:"about-the-author"},"About The Author"),(0,a.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's\nread by thousands of testing professionals. He also created and maintains the-internet (an open-source web app\nthat's perfect for writing automated tests against)."),(0,a.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool,\nManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at\nnumerous conferences and meetups around the world about automated acceptance testing."))}c.isMDXComponent=!0}}]);