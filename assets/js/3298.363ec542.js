"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[3298],{23298:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>a,default:()=>d,frontMatter:()=>o,toc:()=>l});var r=n(87462),i=(n(67294),n(3905));const o={},a=void 0,l=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}],s={toc:l},p="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"To start things off let's pull in our requisite libraries (",(0,i.kt)("inlineCode",{parentName:"p"},"import unittest")," for our test framework, ",(0,i.kt)("inlineCode",{parentName:"p"},"from selenium import webdriver")," to drive the browser, and ",(0,i.kt)("inlineCode",{parentName:"p"},"import httplib")," for our HTTP library), declare our test class, and wire up some test ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: file_download_revisited.py\nimport unittest\nfrom selenium import webdriver\nimport httplib # Use http.client if using Python 3.x.x\nfrom selenium.webdriver.common.by import By\n\n\nclass FileDownloadRevisited(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n\n    def tearDown(self):\n        self.driver.quit()\n# ...\n")),(0,i.kt)("p",null,"Now we're ready to write up our test."),(0,i.kt)("p",null,"It's just a simple matter of visiting the page with download links, grabbing a URL from one of them, and performing a ",(0,i.kt)("inlineCode",{parentName:"p"},"HEAD")," request with it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: file_download_revisited.py\n# ...\n    def test_example_1(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/download')\n        download_link = driver.find_element(By.CSS_SELECTOR,'.example a').get_attribute('href')\n\n        connection = http.client.HTTPConnection('the-internet.herokuapp.com')\n        connection.request('HEAD', download_link)\n        response = connection.getresponse()\n        content_type = response.getheader('Content-type')\n        content_length = response.getheader('Content-length')\n        content_length = int(content_length)\n\n        assert content_type == 'application/octet-stream'\n        assert content_length > 0\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,i.kt)("p",null,"Once we receive the response we can check its header for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Content-type")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Content-length")," to make sure the file is the correct type and not empty."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"python file_download_revisited.py")," from the command-line) here is what will will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Grab the URL of the first download link"),(0,i.kt)("li",{parentName:"ul"},"Perform a ",(0,i.kt)("inlineCode",{parentName:"li"},"HEAD")," request against it with an HTTP library"),(0,i.kt)("li",{parentName:"ul"},"Store the response"),(0,i.kt)("li",{parentName:"ul"},"Check the response headers to see that the file type is correct"),(0,i.kt)("li",{parentName:"ul"},"Check the response headers to see that the file is not empty")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Compared to the browser specific configuration with Selenium this is hands down a leaner, faster, and more maintainable approach. But unfortunately it only works with files served up from a flat URL. So if you're trying to test file downloads that are generated in-memory as part of the browser session (a.k.a. not accessible from a URL) then you'll need to reach for the browser specific Selenium configuration."),(0,i.kt)("p",null,"Happy Testing!"))}d.isMDXComponent=!0}}]);