(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[61576,1235,70395,48785,12596,89955,21297,40956,62412,77867,51585,77323,99069,83412,51300,66309,16356,58149,70718,6801,27767,76068,63179,21668,9210,31807,18081,53094,86633,1177,47245,25175,62894,10315,58778,14005,74504,33393,95951,27650,37041,86206,66427,60788,41861,7779,53729,19765,17029,74913,92919,97085,84294,56613,29705,27031,74853,4821,20243,76578,92414,23173,36613,28917,12029,70330,43759,10822,22130,61038,69566,84855,26878,52168,67966,5667,76535,43149,12731,48996,1004,71603,9152,21318,2660,38448,93353,25304,42334,27844,82659,4665,32345,88034,21607,56363,75684,67102,9486,454,16981,27256,96931,75497,75040,82282,83525,82235,25461,69284,28135,81625,26059,94746,4650,88060,22503,15129,77328,10694,30373,73159,42740,49390,44170,96419,54824,54230,33375,48337,9489,92511,80114,35699,36576,36002,62781,38596,53267,37574,15346,94763,67041,9910,97343,2913,15197,72292,89794,48071,76857,83341,42388,24626,71206,73588,25140,3442,39104,27080,20624,27806,13689,47527,97551,81659,27213,78981,12192,52439,10695,12393,87733,7868,12755,24543,53089,53968,8287,11324,54563,68185,37618,1264,82095,51738,37805,42147,3762,65411,68918,8772,94868,98521,5830,35685,988,25711,31822,67724,71346,47834,10968,34690,34537,74892,69649,23016,72918,30900,97544,65585,11062,75686,52710,1083,83130,31135,6602,17676,83242,81977,86790,82944,75088,89488,87116,58556,8096,15284,63811,15407,87982,6723,18913,97810,55477,99967,97409,28546,34540,78634,94954,29396,76505,94715,82876,47739,6436,67815,14882,48594,76830,88677,64100,31030,34158,35338,17447,27434,24642,73624,80137,28965,13711],{12403:(e,t,a)=>{var n={"./1-how-to-upload-a-file/csharp.md":46984,"./1-how-to-upload-a-file/java.md":63665,"./1-how-to-upload-a-file/javascript.md":3059,"./1-how-to-upload-a-file/python.md":97186,"./1-how-to-upload-a-file/ruby.md":87149,"./10-retry-test-actions/csharp.md":75767,"./10-retry-test-actions/java.md":45877,"./10-retry-test-actions/javascript.md":23784,"./10-retry-test-actions/python.md":89789,"./10-retry-test-actions/ruby.md":57971,"./11-build-an-interactive-prompt/csharp.md":88065,"./11-build-an-interactive-prompt/java.md":83647,"./11-build-an-interactive-prompt/javascript.md":93084,"./11-build-an-interactive-prompt/python.md":89746,"./11-build-an-interactive-prompt/ruby.md":93047,"./12-opt-out-of-ab-tests/csharp.md":69438,"./12-opt-out-of-ab-tests/java.md":48831,"./12-opt-out-of-ab-tests/javascript.md":7967,"./12-opt-out-of-ab-tests/python.md":72105,"./12-opt-out-of-ab-tests/ruby.md":60403,"./13-how-to-access-basic-auth/csharp.md":61954,"./13-how-to-access-basic-auth/java.md":50167,"./13-how-to-access-basic-auth/javascript.md":9362,"./13-how-to-access-basic-auth/python.md":11012,"./13-how-to-access-basic-auth/ruby.md":21005,"./15-download-secure-files/csharp.md":62900,"./15-download-secure-files/java.md":50384,"./15-download-secure-files/javascript.md":19537,"./15-download-secure-files/python.md":32628,"./15-download-secure-files/ruby.md":11396,"./16-take-screenshot-on-failure/csharp.md":87016,"./16-take-screenshot-on-failure/java.md":69186,"./16-take-screenshot-on-failure/javascript.md":12121,"./16-take-screenshot-on-failure/python.md":58357,"./16-take-screenshot-on-failure/ruby.md":55028,"./17-retrieve-http-status-codes/csharp.md":43056,"./17-retrieve-http-status-codes/java.md":63365,"./17-retrieve-http-status-codes/javascript.md":49711,"./17-retrieve-http-status-codes/python.md":68232,"./17-retrieve-http-status-codes/ruby.md":34744,"./18-how-to-figure-out-what-to-update/csharp.md":44127,"./18-how-to-figure-out-what-to-update/java.md":50990,"./18-how-to-figure-out-what-to-update/javascript.md":89477,"./18-how-to-figure-out-what-to-update/python.md":11302,"./18-how-to-figure-out-what-to-update/ruby.md":20275,"./19-data-driven-testing/csharp.md":88598,"./19-data-driven-testing/java.md":81030,"./19-data-driven-testing/javascript.md":19595,"./19-data-driven-testing/python.md":55152,"./19-data-driven-testing/ruby.md":33993,"./2-download-a-file/csharp.md":7747,"./2-download-a-file/java.md":58644,"./2-download-a-file/javascript.md":26293,"./2-download-a-file/python.md":6688,"./2-download-a-file/ruby.md":41783,"./21-adding-a-language/csharp.md":17751,"./21-adding-a-language/java.md":50466,"./21-adding-a-language/javascript.md":82308,"./21-adding-a-language/python.md":31378,"./21-adding-a-language/ruby.md":6461,"./22-locator-strategy/csharp.md":129,"./22-locator-strategy/java.md":91320,"./22-locator-strategy/javascript.md":81942,"./22-locator-strategy/python.md":12202,"./22-locator-strategy/ruby.md":45720,"./23-dynamic-pages/csharp.md":24717,"./23-dynamic-pages/java.md":81817,"./23-dynamic-pages/javascript.md":5033,"./23-dynamic-pages/python.md":69265,"./23-dynamic-pages/ruby.md":95202,"./24-rest-apis/csharp.md":52210,"./24-rest-apis/java.md":66226,"./24-rest-apis/javascript.md":65905,"./24-rest-apis/python.md":8450,"./24-rest-apis/ruby.md":76888,"./25-how-to-work-with-tables/csharp.md":13702,"./25-how-to-work-with-tables/java.md":60991,"./25-how-to-work-with-tables/javascript.md":19402,"./25-how-to-work-with-tables/python.md":7778,"./25-how-to-work-with-tables/ruby.md":27115,"./26-cloud/csharp.md":92646,"./26-cloud/java.md":78525,"./26-cloud/javascript.md":48335,"./26-cloud/python.md":32425,"./26-cloud/ruby.md":55830,"./29-chrome-driver/csharp.md":70161,"./29-chrome-driver/java.md":33115,"./29-chrome-driver/javascript.md":15761,"./29-chrome-driver/python.md":97035,"./29-chrome-driver/ruby.md":62944,"./3-work-with-frames/csharp.md":93535,"./3-work-with-frames/java.md":34108,"./3-work-with-frames/javascript.md":54948,"./3-work-with-frames/python.md":27497,"./3-work-with-frames/ruby.md":17377,"./31-archives/csharp.md":4661,"./31-archives/java.md":55998,"./31-archives/javascript.md":38039,"./31-archives/python.md":91900,"./31-archives/ruby.md":46948,"./36-available-resources/csharp.md":18483,"./36-available-resources/java.md":67592,"./36-available-resources/javascript.md":47094,"./36-available-resources/python.md":96362,"./36-available-resources/ruby.md":77190,"./39-drag-and-drop/csharp.md":22100,"./39-drag-and-drop/java.md":2654,"./39-drag-and-drop/javascript.md":96427,"./39-drag-and-drop/python.md":1057,"./39-drag-and-drop/ruby.md":83674,"./4-work-with-multiple-windows/csharp.md":53065,"./4-work-with-multiple-windows/java.md":65943,"./4-work-with-multiple-windows/javascript.md":13420,"./4-work-with-multiple-windows/python.md":20390,"./4-work-with-multiple-windows/ruby.md":68339,"./40-disabled-element/csharp.md":41514,"./40-disabled-element/java.md":456,"./40-disabled-element/javascript.md":25699,"./40-disabled-element/python.md":62207,"./40-disabled-element/ruby.md":44926,"./44-exception-handling/csharp.md":87083,"./44-exception-handling/java.md":26606,"./44-exception-handling/javascript.md":79915,"./44-exception-handling/python.md":48098,"./44-exception-handling/ruby.md":41276,"./45-how-to-test-checkboxes/csharp.md":6212,"./45-how-to-test-checkboxes/java.md":20099,"./45-how-to-test-checkboxes/javascript.md":26089,"./45-how-to-test-checkboxes/python.md":74656,"./45-how-to-test-checkboxes/ruby.md":8878,"./47-waiting/csharp.md":25015,"./47-waiting/java.md":61678,"./47-waiting/javascript.md":11073,"./47-waiting/python.md":76451,"./47-waiting/ruby.md":39108,"./48-load-testing/csharp.md":31536,"./48-load-testing/java.md":98112,"./48-load-testing/javascript.md":63699,"./48-load-testing/python.md":66581,"./48-load-testing/ruby.md":91422,"./49-performance-testing/csharp.md":78271,"./49-performance-testing/java.md":12331,"./49-performance-testing/javascript.md":4668,"./49-performance-testing/python.md":76470,"./49-performance-testing/ruby.md":97375,"./5-select-from-a-dropdown/csharp.md":36317,"./5-select-from-a-dropdown/java.md":85893,"./5-select-from-a-dropdown/javascript.md":4464,"./5-select-from-a-dropdown/python.md":32388,"./5-select-from-a-dropdown/ruby.md":23267,"./50-how-to-work-with-hovers/csharp.md":85906,"./50-how-to-work-with-hovers/java.md":31066,"./50-how-to-work-with-hovers/javascript.md":94918,"./50-how-to-work-with-hovers/python.md":61112,"./50-how-to-work-with-hovers/ruby.md":57812,"./51-how-to-work-with-javascript-alerts/csharp.md":10690,"./51-how-to-work-with-javascript-alerts/java.md":27895,"./51-how-to-work-with-javascript-alerts/javascript.md":74186,"./51-how-to-work-with-javascript-alerts/python.md":64098,"./51-how-to-work-with-javascript-alerts/ruby.md":90500,"./52-grid/java.md":48379,"./52-grid/javascript.md":7373,"./52-grid/python.md":15870,"./52-grid/ruby.md":4679,"./53-growl/csharp.md":55618,"./53-growl/java.md":25501,"./53-growl/javascript.md":66522,"./53-growl/python.md":50701,"./53-growl/ruby.md":34900,"./55-wrapper/csharp.md":19911,"./55-wrapper/java.md":91695,"./55-wrapper/javascript.md":48158,"./55-wrapper/python.md":62825,"./55-wrapper/ruby.md":8514,"./57-junit-xml/csharp.md":3826,"./57-junit-xml/java.md":78380,"./57-junit-xml/javascript.md":63171,"./57-junit-xml/python.md":29573,"./57-junit-xml/ruby.md":79019,"./58-tagging/csharp.md":74924,"./58-tagging/java.md":48275,"./58-tagging/javascript.md":64717,"./58-tagging/python.md":92348,"./58-tagging/ruby.md":23443,"./60-list-tags/csharp.md":78783,"./60-list-tags/java.md":9523,"./60-list-tags/javascript.md":84747,"./60-list-tags/python.md":41474,"./60-list-tags/ruby.md":56928,"./61-how-to-press-keyboard-keys/csharp.md":57923,"./61-how-to-press-keyboard-keys/java.md":52068,"./61-how-to-press-keyboard-keys/javascript.md":2404,"./61-how-to-press-keyboard-keys/python.md":69775,"./61-how-to-press-keyboard-keys/ruby.md":24849,"./63-right-click/csharp.md":25146,"./63-right-click/java.md":92860,"./63-right-click/javascript.md":32102,"./63-right-click/python.md":64815,"./63-right-click/ruby.md":38892,"./64-limit-bandwidth/csharp.md":5276,"./64-limit-bandwidth/java.md":7896,"./64-limit-bandwidth/javascript.md":81154,"./64-limit-bandwidth/python.md":38991,"./64-limit-bandwidth/ruby.md":7418,"./65-highlight-elements/csharp.md":2547,"./65-highlight-elements/java.md":96290,"./65-highlight-elements/javascript.md":40335,"./65-highlight-elements/python.md":22117,"./65-highlight-elements/ruby.md":74383,"./66-blacklist/csharp.md":69497,"./66-blacklist/java.md":57164,"./66-blacklist/javascript.md":67177,"./66-blacklist/python.md":54328,"./66-blacklist/ruby.md":72322,"./67-broken-images/csharp.md":96634,"./67-broken-images/java.md":27476,"./67-broken-images/javascript.md":47435,"./67-broken-images/python.md":51507,"./67-broken-images/ruby.md":9002,"./68-load-testing-revisited/csharp.md":35060,"./68-load-testing-revisited/java.md":93462,"./68-load-testing-revisited/javascript.md":71270,"./68-load-testing-revisited/python.md":49203,"./68-load-testing-revisited/ruby.md":20199,"./69-safari/csharp.md":96143,"./69-safari/java.md":96437,"./69-safari/javascript.md":73915,"./69-safari/python.md":60733,"./69-safari/ruby.md":7722,"./7-use-a-page-object/csharp.md":61664,"./7-use-a-page-object/java.md":60969,"./7-use-a-page-object/javascript.md":99427,"./7-use-a-page-object/python.md":45742,"./7-use-a-page-object/ruby.md":45418,"./71-mobile-testing-pyramid/csharp.md":14815,"./71-mobile-testing-pyramid/java.md":78283,"./71-mobile-testing-pyramid/javascript.md":62997,"./71-mobile-testing-pyramid/python.md":41668,"./71-mobile-testing-pyramid/ruby.md":45774,"./72-headless-chrome/csharp.md":55796,"./72-headless-chrome/java.md":11938,"./72-headless-chrome/javascript.md":22522,"./72-headless-chrome/python.md":22465,"./72-headless-chrome/ruby.md":14873,"./73-open-new-window/csharp.md":37984,"./73-open-new-window/java.md":95985,"./73-open-new-window/javascript.md":46511,"./73-open-new-window/python.md":44757,"./73-open-new-window/ruby.md":2178,"./8-download-a-file-revisited/csharp.md":49881,"./8-download-a-file-revisited/java.md":48030,"./8-download-a-file-revisited/javascript.md":3784,"./8-download-a-file-revisited/python.md":4017,"./8-download-a-file-revisited/ruby.md":23030,"./9-use-a-base-page-object/csharp.md":69583,"./9-use-a-base-page-object/java.md":40460,"./9-use-a-base-page-object/javascript.md":92833,"./9-use-a-base-page-object/python.md":51955,"./9-use-a-base-page-object/ruby.md":46844,"./template/csharp.md":47042,"./template/java.md":11036,"./template/javascript.md":23634,"./template/python.md":65412,"./template/ruby.md":62905};function i(e){var t=r(e);return a(t)}function r(e){if(!a.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}i.keys=function(){return Object.keys(n)},i.resolve=r,e.exports=i,i.id=12403},3905:(e,t,a)=>{"use strict";a.d(t,{Zo:()=>d,kt:()=>c});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=u(a),m=i,c=p["".concat(s,".").concat(m)]||p[m]||h[m]||r;return a?n.createElement(c,o(o({ref:t},d),{},{components:a})):n.createElement(c,o({ref:t},d))}));function c(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var u=2;u<r;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},34591:(e,t,a)=>{"use strict";a.d(t,{Z:()=>r});var n=a(67294),i=a(3905);const r=e=>{let{folderName:t}=e;const[r,o]=(0,n.useState)("ruby"),l=()=>{if(r){const e=a(12403)(`./${t}/${r}.md`).default;return n.createElement(i.Zo,null,n.createElement("div",{className:"dropdown-markdown-content"},n.createElement(e,null)))}return null};return(0,n.useEffect)((()=>{l()}),[r]),n.createElement("div",{className:"dropdown-markdown-wrapper"},n.createElement("select",{className:"dropdown-markdown",onChange:e=>{o(e.target.value)},value:r},n.createElement("option",{value:"csharp"},"CSharp"),n.createElement("option",{value:"ruby"},"Ruby"),n.createElement("option",{value:"java"},"Java"),n.createElement("option",{value:"javascript"},"JavaScript"),n.createElement("option",{value:"python"},"Python")),l())}},46984:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:1,hide_sidebar:!0,publish_date:new Date("2016-06-11T00:00:00.000Z"),last_update:{date:new Date("2023-03-28T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-upload-a-file/csharp",id:"how-to-upload-a-file/csharp",title:"csharp",description:"A Solution",source:"@site/docs/1-how-to-upload-a-file/csharp.md",sourceDirName:"1-how-to-upload-a-file",slug:"/how-to-upload-a-file/csharp",permalink:"/docs/how-to-upload-a-file/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/1-how-to-upload-a-file/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1679961600,formattedLastUpdatedAt:"Mar 28, 2023",frontMatter:{language:"csharp",level:1,hide_sidebar:!0,publish_date:"2016-06-11T00:00:00.000Z",last_update:{date:"2023-03-28T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"A work-around for this problem is to side-step the system dialog box entirely. We can do this by using Selenium to insert the full path of the file we want to upload (as text) into the form and then submit the form."),(0,i.kt)("p",null,"Let's step through an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: We are using ",(0,i.kt)("a",{parentName:"strong",href:"http://the-internet.herokuapp.com/upload"},"a file upload example")," found on ",(0,i.kt)("a",{parentName:"strong",href:"https://github.com/tourdedave/the-internet"},"the-internet"),".")),(0,i.kt)("p",null,"First let's pull in our requisite classes for our testing framework (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"using NUnit.Framework;"),"), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"using OpenQA.Selenium;"),"), and launching an instance of Firefox (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"using OpenQA.Selenium.Firefox;"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: FileUpload.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\n// ...\n")),(0,i.kt)("p",null,"Now to create a class and take care of the test's setup and teardown."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: FileUpload.cs\n// ...\npublic class FileUpload\n{\n    IWebDriver Driver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"After specifying the class (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"public class FileUpload"),") we create a field variable (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"IWebDriver Driver;"),") to store our Selenium instance for reuse throughout the class. We then create a ",(0,i.kt)("inlineCode",{parentName:"p"},"SetUp()")," method with a ",(0,i.kt)("inlineCode",{parentName:"p"},"[SetUp]")," attribute so it runs before our test. In this method we are creating an instance of Selenium with Firefox (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"Driver = new FirefoxDriver();"),")."),(0,i.kt)("p",null,"After our test executes, the ",(0,i.kt)("inlineCode",{parentName:"p"},"TearDown()")," method will run thanks to the ",(0,i.kt)("inlineCode",{parentName:"p"},"[TearDown]")," attribute. This calls ",(0,i.kt)("inlineCode",{parentName:"p"},"Driver.Quit();")," which will close the browser instance."),(0,i.kt)("p",null,"Now to wire up our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: FileUpload.cs\n// ...\n    [Test]\n    public void UploadFileFromDisk()\n    {\n        string File = "SomeFile.txt";\n        string FilePath = @"C:\\Temp\\" + File;\n\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/upload");\n        Driver.FindElement(By.Id("file-upload")).SendKeys(FilePath);\n        Driver.FindElement(By.Id("file-submit")).Click();\n\n        IWebElement FileUploaded = Driver.FindElement(By.Id("uploaded-files"));\n        Assert.IsTrue(FileUploaded.Text == File, "The File Did Not Upload Correctly");\n    }\n}\n')),(0,i.kt)("p",null,"We create an ",(0,i.kt)("inlineCode",{parentName:"p"},"UploadFileFromDisk()")," method and add a ",(0,i.kt)("inlineCode",{parentName:"p"},"[Test]")," attribute so it is run as a test. In it we leverage a file from local disk by specifying the file (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"SomeFile.txt"),") and its path (e.g., currently set to ",(0,i.kt)("inlineCode",{parentName:"p"},"C:\\Temp\\"),", adapt as needed to suit your needs)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: The value for ",(0,i.kt)("inlineCode",{parentName:"strong"},"FilePath")," starts with a ",(0,i.kt)("inlineCode",{parentName:"strong"},"@")," symbol. This denotes that what follows after it is a string literal. If we didn't have it, we would need to escape our backslashes (e.g, `\"C:","\\","Temp","\\",'").')),(0,i.kt)("p",null,"Next we visit the page with the upload form, input the string value of ",(0,i.kt)("inlineCode",{parentName:"p"},"FilePath")," (e.g., the full path to the file plus the filename with its extension), and submit the form. After the file is uploaded to the page it will display the filename it just processed. We use this text to perform our assertion (making sure the uploaded file is what we expect)."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\FileUpload.sln")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the upload form page"),(0,i.kt)("li",{parentName:"ul"},"Inject the file path into the form and submit it"),(0,i.kt)("li",{parentName:"ul"},"Page displays the uploaded filename"),(0,i.kt)("li",{parentName:"ul"},"Grab the text from the page and assert it's what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"This approach will work across all browsers. If you want to use it with a remote instance (e.g., on Selenium Grid or Sauce Labs) then you'll want to have a look at ",(0,i.kt)("a",{parentName:"p",href:"http://seleniumhq.github.io/selenium/docs/api/dotnet/html/T_OpenQA_Selenium_IAllowsFileDetection.htm"},(0,i.kt)("inlineCode",{parentName:"a"},"IAllowsFileDetection")),"."),(0,i.kt)("p",null,"Thanks to Jonathan Taylor for contributing the initial C# code for this tip!"),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},63665:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:1,hide_sidebar:!0,publish_date:new Date("2015-11-07T00:00:00.000Z"),last_update:{date:new Date("2023-03-12T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-upload-a-file/java",id:"how-to-upload-a-file/java",title:"java",description:"A Solution",source:"@site/docs/1-how-to-upload-a-file/java.md",sourceDirName:"1-how-to-upload-a-file",slug:"/how-to-upload-a-file/java",permalink:"/docs/how-to-upload-a-file/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/1-how-to-upload-a-file/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1678579200,formattedLastUpdatedAt:"Mar 12, 2023",frontMatter:{language:"java",level:1,hide_sidebar:!0,publish_date:"2015-11-07T00:00:00.000Z",last_update:{date:"2023-03-12T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"A work-around for this problem is to side-step the system dialog box entirely. We can do this by using Selenium to insert the full path of the file we want to upload (as text) ",(0,i.kt)("em",{parentName:"p"},"into")," the form and then submit the form."),(0,i.kt)("p",null,"Let's step through an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: We are using ",(0,i.kt)("a",{parentName:"strong",href:"http://the-internet.herokuapp.com/upload"},"a file upload example")," found on ",(0,i.kt)("a",{parentName:"strong",href:"https://github.com/tourdedave/the-internet"},"the-internet"),".")),(0,i.kt)("p",null,"First let's import our requisite classes for annotations (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.junit.After"),", etc.), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.openqa.selenium.WebDriver"),", etc.), matchers for assertions (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.hamcrest.CoreMatchers"),", etc. ), and something to handle local files (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"java.io.File"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// filename: Upload.java\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.assertThat;\nimport java.io.File;\n")),(0,i.kt)("p",null,"Now to create a class and take care of the test's setup and teardown."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// filename: Upload.java\n// ...\npublic class Upload {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n")),(0,i.kt)("p",null,"After specifying the class (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"public class Upload {"),") we create a field variable (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"WebDriver driver;"),") to store our Selenium instance for reuse throughout the class. We then create a ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp()")," method with a ",(0,i.kt)("inlineCode",{parentName:"p"},"@Before")," annotation so it runs before our test. In this method we are creating an instance of Selenium with Firefox (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"driver = new FirefoxDriver();"),")."),(0,i.kt)("p",null,"After our test executes, the ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown()")," method will run thanks to the ",(0,i.kt)("inlineCode",{parentName:"p"},"@After")," annotation. This calls ",(0,i.kt)("inlineCode",{parentName:"p"},"driver.quit();")," which will close the browser instance."),(0,i.kt)("p",null,"Now to wire up our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'    @Test\n    public void uploadFile() throws Exception {\n        String filename = "some-file.txt";\n        File file = new File(filename);\n        String path = file.getAbsolutePath();\n        driver.get("http://the-internet.herokuapp.com/upload");\n        driver.findElement(By.id("file-upload")).sendKeys(path);\n        driver.findElement(By.id("file-submit")).click();\n        String text = driver.findElement(By.id("uploaded-files")).getText();\n        assertThat(text, is(equalTo(filename)));\n    }\n\n}\n')),(0,i.kt)("p",null,"We create an ",(0,i.kt)("inlineCode",{parentName:"p"},"uploadFile()")," method and annotate it with ",(0,i.kt)("inlineCode",{parentName:"p"},"@Test")," so it is run as a test. In it we create a new file called ",(0,i.kt)("inlineCode",{parentName:"p"},"some-file.txt")," in the present working directory and get it's absolute path."),(0,i.kt)("p",null,"Next we visit the page with the upload form, input the string value of ",(0,i.kt)("inlineCode",{parentName:"p"},"path")," (e.g., the full path to the file plus the filename with it's extension), and submit the form. After the file is uploaded to the page it will display the filename it just processed. We use this text to perform our assertion (making sure the uploaded file is what we expect)."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn clean test")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the upload form page"),(0,i.kt)("li",{parentName:"ul"},"Inject the file path into the form and submit it"),(0,i.kt)("li",{parentName:"ul"},"Page displays the uploaded filename"),(0,i.kt)("li",{parentName:"ul"},"Grab the text from the page and assert it's what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"This approach will work across all browsers. But if you want to use it with a remote instance (e.g., a Selenium Grid or Sauce Labs), then you'll want to have a look at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SeleniumHQ/selenium/blob/ab1e647d0fc8fc39e6b00ae94321ab228b6728f2/java/client/src/org/openqa/selenium/remote/FileDetector.java"},(0,i.kt)("inlineCode",{parentName:"a"},"FileDetector")),". You can see a write-up on it from Sauce Labs ",(0,i.kt)("a",{parentName:"p",href:"https://saucelabs.com/resources/articles/selenium-file-upload"},"here"),"."),(0,i.kt)("p",null,"Thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/RomanIsko"},"Roman Isko")," for contributing the initial Java code for this tip!"),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},3059:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:1,hide_sidebar:!0,publish_date:new Date("2019-08-09T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-upload-a-file/javascript",id:"how-to-upload-a-file/javascript",title:"javascript",description:"A Solution",source:"@site/docs/1-how-to-upload-a-file/javascript.md",sourceDirName:"1-how-to-upload-a-file",slug:"/how-to-upload-a-file/javascript",permalink:"/docs/how-to-upload-a-file/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/1-how-to-upload-a-file/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"javascript",level:1,hide_sidebar:!0,publish_date:"2019-08-09T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About the Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"A work-around for this problem is to side-step the system dialog box entirely. We can do this by using Selenium to insert the full path of the file we want to upload (as text) into the form and then submit the form."),(0,i.kt)("p",null,"Let's step through an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: We are using ",(0,i.kt)("a",{parentName:"strong",href:"http://the-internet.herokuapp.com/upload"},"a file upload example")," found on ",(0,i.kt)("a",{parentName:"strong",href:"https://github.com/tourdedave/the-internet"},"the-internet"),".")),(0,i.kt)("p",null,"First let's pull in our requisite libraries for assertions, constructing a path to a file, and driving the browser with Selenium."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/upload.spec.js\nconst assert = require("assert");\nconst { Builder, By } = require("selenium-webdriver");\nconst path = require("path");\n// ...\n')),(0,i.kt)("p",null,"Now to create a new test class and add in test setup and teardown for it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/upload.spec.js\ndescribe("Upload Test", function() {\n    let driver;\n\n    beforeEach(async function() {\n      this.timeout(60000)\n      try{\n        driver = await new Builder().forBrowser("firefox").build();\n      } catch (ex) {\n        console.log(ex.stack)\n      }\n    });\n\n    afterEach(async function() {\n      this.timeout(60000)\n      await driver.quit();\n    });\n// ...\n')),(0,i.kt)("p",null,"After declaring the class we create two methods. The first method, ",(0,i.kt)("inlineCode",{parentName:"p"},"beforeEach"),", will execute before each test in this class. In it we are launching a new instance of Firefox with Selenium and storing it in a class variable that we'll use throughout this class. After our test executes the second method, ",(0,i.kt)("inlineCode",{parentName:"p"},"afterEach"),", will execute. This calls ",(0,i.kt)("inlineCode",{parentName:"p"},"driver.quit()")," which ends the session by closing the browser instance and then destroying the Selenium object in-memory."),(0,i.kt)("p",null,"Now to wire up our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/upload.spec.js\n// ...\n  it("upload a file", async function() {\n    let filename = "some-file.txt";\n    let filePath = path.join(process.cwd(), filename);\n\n    await driver.get("http://the-internet.herokuapp.com/upload");\n    await driver.findElement(By.id("file-upload")).sendKeys(filePath);\n    await driver.findElement(By.id("file-submit")).click();\n\n    let text = await driver.findElement(By.id("uploaded-files")).getText();\n    assert.equal(text, filename);\n  });\n});\n')),(0,i.kt)("p",null,"After declaring the test method (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},'it("upload a file", async function() {'),") we specify the name of file we'd like to upload. It's a text file called ",(0,i.kt)("inlineCode",{parentName:"p"},"some-file.txt")," in the current working directory. We determine the path to this file and store it in a variable called ",(0,i.kt)("inlineCode",{parentName:"p"},"filePath"),"."),(0,i.kt)("p",null,"Next we visit the page with the upload form, input the string value of ",(0,i.kt)("inlineCode",{parentName:"p"},"filePath"),", and click the submit button on the form. After the file is uploaded to the page it will display the filename it just processed. We use this text on the page to perform our assertion (making sure the uploaded file is what we expect)."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mocha")," from the command-line) this is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the upload form page"),(0,i.kt)("li",{parentName:"ul"},"Inject the file path into the form and submit it"),(0,i.kt)("li",{parentName:"ul"},"Page displays the uploaded filename"),(0,i.kt)("li",{parentName:"ul"},"Grab the text from the page and assert it's what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"This approach will work across all browsers. If you want to use it with a remote instance (e.g., on Selenium Grid or Sauce Labs) then you'll want to have a look at ",(0,i.kt)("a",{parentName:"p",href:"https://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/remote/index_exports_FileDetector.html"},(0,i.kt)("inlineCode",{parentName:"a"},"file_detector")),"."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About the Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},97186:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:1,hide_sidebar:!0,publish_date:new Date("2016-09-13T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-upload-a-file/python",id:"how-to-upload-a-file/python",title:"python",description:"A Solution",source:"@site/docs/1-how-to-upload-a-file/python.md",sourceDirName:"1-how-to-upload-a-file",slug:"/how-to-upload-a-file/python",permalink:"/docs/how-to-upload-a-file/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/1-how-to-upload-a-file/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"python",level:1,hide_sidebar:!0,publish_date:"2016-09-13T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About the Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"A work-around for this problem is to side-step the system dialog box entirely. We can do this by using Selenium to insert the full path of the file we want to upload (as text) ",(0,i.kt)("em",{parentName:"p"},"into")," the form and then submit the form."),(0,i.kt)("p",null,"Let's step through an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: We are using ",(0,i.kt)("a",{parentName:"strong",href:"http://the-internet.herokuapp.com/upload"},"a file upload example")," found on ",(0,i.kt)("a",{parentName:"strong",href:"https://github.com/tourdedave/the-internet"},"the-internet"),".")),(0,i.kt)("p",null,"First let's pull in our requisite libraries for interacting with the operating system (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"import os"),"), our testing framework (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"import unittest"),"), and driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"from selenium import webdriver"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: upload.py\n\nimport os\nimport unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\n# ...\n")),(0,i.kt)("p",null,"Now to create a new class file and add in the test's setup and teardown."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: upload.py\n# ...\nclass Upload(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n\n    def tearDown(self):\n        self.driver.quit()\n")),(0,i.kt)("p",null,"After specifying the class and establishing inheritance so it's a test case for ",(0,i.kt)("inlineCode",{parentName:"p"},"unittest")," (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"class Upload(unitest.TestCase)"),") we create methods. The first method, ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp(self):"),", will execute before each test in this class. In it we are launching a new instance of Firefox with Selenium and storing it in a class variable that we'll use throughout this class (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"self.driver = webdriver.Firefox()"),"). After our test executes the second method, ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown(self):"),", will execute. This calls ",(0,i.kt)("inlineCode",{parentName:"p"},"self.driver.quit()")," which ends the session by closing the browser instance and the destroying the Selenium object in-memory."),(0,i.kt)("p",null,"Now to wire up our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: upload.py\n# ...\n    def test_example_1(self):\n        driver = self.driver\n        filename = 'some-file.txt'\n        file = os.path.join(os.getcwd(), filename)\n        driver.get('http://the-internet.herokuapp.com/upload')\n        driver.find_element(By.ID, 'file-upload').send_keys(file)\n        driver.find_element(By.ID,'file-submit').click()\n\n        uploaded_file = driver.find_element(By.ID, 'uploaded-files').text\n        assert uploaded_file == filename, \"uploaded file should be %s\" % filename\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,i.kt)("p",null,"After declaring the test method (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"def test_example_1(self):"),") we store ",(0,i.kt)("inlineCode",{parentName:"p"},"self.driver")," in a local variable (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"driver = self.driver"),"). This way we don't have to litter our test method with ",(0,i.kt)("inlineCode",{parentName:"p"},"self.driver")," and can call ",(0,i.kt)("inlineCode",{parentName:"p"},"driver")," instead. Next we specify the file we'd like to upload. There's already a text file called ",(0,i.kt)("inlineCode",{parentName:"p"},"some-file.txt")," in the current working directory, so we grab both the file name and its full path, storing both of these values in variables (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"filename")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"file")," respectively)."),(0,i.kt)("p",null,"Next we visit the page with the upload form, input the string value of ",(0,i.kt)("inlineCode",{parentName:"p"},"file")," (e.g., the full path to the file plus the filename with its extension), and submit the form. After the file is uploaded to the page it will display the filename it just processed. We use this text on the page to perform our assertion (making sure the uploaded file is what we expect)."),(0,i.kt)("p",null,"The two lines at the end of the file are so the file can be executed directly from the command-line."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"python upload.py")," from the command-line) this is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the upload form page"),(0,i.kt)("li",{parentName:"ul"},"Inject the file path into the form and submit it"),(0,i.kt)("li",{parentName:"ul"},"Page displays the uploaded filename"),(0,i.kt)("li",{parentName:"ul"},"Grab the text from the page and assert it's what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"This approach will work across all browsers. If you want to use it with a remote instance (e.g., on Selenium Grid or Sauce Labs) then you'll want to have a look at ",(0,i.kt)("a",{parentName:"p",href:"http://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html?highlight=detect#selenium.webdriver.remote.webdriver.WebDriver.file_detector"},(0,i.kt)("inlineCode",{parentName:"a"},"file_detector")),"."),(0,i.kt)("h2",{id:"about-the-author"},"About the Author"),(0,i.kt)("p",null,"Thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/trabulmonkee"},"Mike Millgate")," for contributing the Python code for this tip, and to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Dude-X"},"Isaul Vargas")," & ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bittner"},"Peter Bittner")," for code reviewing!"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},87149:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:1,hide_sidebar:!0,publish_date:new Date("2015-07-19T00:00:00.000Z"),last_update:{date:new Date("2023-02-27T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-upload-a-file/ruby",id:"how-to-upload-a-file/ruby",title:"ruby",description:"A Solution",source:"@site/docs/1-how-to-upload-a-file/ruby.md",sourceDirName:"1-how-to-upload-a-file",slug:"/how-to-upload-a-file/ruby",permalink:"/docs/how-to-upload-a-file/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/1-how-to-upload-a-file/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677456e3,formattedLastUpdatedAt:"Feb 27, 2023",frontMatter:{language:"ruby",level:1,hide_sidebar:!0,publish_date:"2015-07-19T00:00:00.000Z",last_update:{date:"2023-02-27T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"A work-around for this problem is to side-step the system dialog box entirely. We can do this by using Selenium to insert the full path of the file we want to upload (as text) into the form and then submit the form."),(0,i.kt)("p",null,"Let's step through an example."),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: We are using ",(0,i.kt)("a",{parentName:"strong",href:"http://the-internet.herokuapp.com/upload"},"a file upload example")," found on ",(0,i.kt)("a",{parentName:"strong",href:"https://github.com/tourdedave/the-internet"},"the-internet"),".")),(0,i.kt)("p",null,"First let's include our requisite libraries (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to drive the browser, and ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers")," for our assertion) and wire-up some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: upload.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Now we're ready to write our file upload test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  filename = 'some-file.txt'\n  file = File.join(Dir.pwd, filename)\n\n  @driver.get 'http://the-internet.herokuapp.com/upload'\n  @driver.find_element(id: 'file-upload').send_keys file\n  @driver.find_element(id: 'file-submit').click\n\n  uploaded_file = @driver.find_element(id: 'uploaded-files').text\n  expect(uploaded_file).to eql filename\nend\n")),(0,i.kt)("p",null,"After specifying the ",(0,i.kt)("inlineCode",{parentName:"p"},"filename")," we get the full path to the file (which we're doing with ",(0,i.kt)("inlineCode",{parentName:"p"},"File.join(Dir.pwd, filename)"),"). This approach assumes that the file is living in the same directory as the test script."),(0,i.kt)("p",null,"Next we visit the page with the upload form, input the ",(0,i.kt)("inlineCode",{parentName:"p"},"file")," text (e.g., the full path to the file plus the filename with it's extension), and submit the form. After the file is uploaded the page will display the filename that it just processed. We use this text to perform our assertion (making sure the uploaded file is what we expect)."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby upload.rb")," from the command-line) this is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the upload form page"),(0,i.kt)("li",{parentName:"ul"},"Inject the file path into the form and submit it"),(0,i.kt)("li",{parentName:"ul"},"Page displays the uploaded filename"),(0,i.kt)("li",{parentName:"ul"},"Grab the text from the page and assert it's what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"This approach will work across all browsers. If you want to use it with a remote instance (e.g., on Selenium Grid or Sauce Labs) then you'll want to have a look at ",(0,i.kt)("a",{parentName:"p",href:"https://seleniumhq.github.io/selenium/docs/api/rb/Selenium/WebDriver/DriverExtensions/UploadsFiles.html#file_detector%3D-instance_method"},(0,i.kt)("inlineCode",{parentName:"a"},"file_detector")),"."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},75767:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"retry-test-actions/csharp",id:"retry-test-actions/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/10-retry-test-actions/csharp.md",sourceDirName:"10-retry-test-actions",slug:"/retry-test-actions/csharp",permalink:"/docs/retry-test-actions/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/10-retry-test-actions/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},45877:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"retry-test-actions/java",id:"retry-test-actions/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/10-retry-test-actions/java.md",sourceDirName:"10-retry-test-actions",slug:"/retry-test-actions/java",permalink:"/docs/retry-test-actions/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/10-retry-test-actions/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},23784:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"retry-test-actions/javascript",id:"retry-test-actions/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/10-retry-test-actions/javascript.md",sourceDirName:"10-retry-test-actions",slug:"/retry-test-actions/javascript",permalink:"/docs/retry-test-actions/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/10-retry-test-actions/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},89789:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"retry-test-actions/python",id:"retry-test-actions/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/10-retry-test-actions/python.md",sourceDirName:"10-retry-test-actions",slug:"/retry-test-actions/python",permalink:"/docs/retry-test-actions/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/10-retry-test-actions/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},57971:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:2,hide_sidebar:!0,publish_date:new Date("2013-07-30T00:00:00.000Z"),last_update:{date:new Date("2023-02-27T00:00:00.000Z")}},o=void 0,l={unversionedId:"retry-test-actions/ruby",id:"retry-test-actions/ruby",title:"ruby",description:"A Solution",source:"@site/docs/10-retry-test-actions/ruby.md",sourceDirName:"10-retry-test-actions",slug:"/retry-test-actions/ruby",permalink:"/docs/retry-test-actions/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/10-retry-test-actions/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677456e3,formattedLastUpdatedAt:"Feb 27, 2023",frontMatter:{language:"ruby",level:2,hide_sidebar:!0,publish_date:"2013-07-30T00:00:00.000Z",last_update:{date:"2023-02-27T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Rather than have your tests fail intermittently for reasons that don't actually reflect an issue in your application (or that are really difficult to track down), we'd like to trigger a context specific retry for a specific set of actions (rather than the whole test) that will back-off after a few attempts."),(0,i.kt)("p",null,"If it finds what it needs, the tests passes. If it doesn't, the test fails -- and you know you have a legitimate problem on your hands."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"The example application is a page that displays a notification message at the top of the page. It will either say ",(0,i.kt)("strong",{parentName:"p"},"Action successful")," or ",(0,i.kt)("strong",{parentName:"p"},"Action unsuccessful, please try again"),". You can see it ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/notification_message"},"here"),"."),(0,i.kt)("p",null,"Our goal in this example is verify an ",(0,i.kt)("strong",{parentName:"p"},"Action successful")," message."),(0,i.kt)("p",null,"The beginning of our test script starts off simply with accessing our libraries (Selenium and RSpec) and creating our setup, teardown, and run actions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'selenium-webdriver'\nrequire 'rspec/expectations'\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"A first pass at this example would look something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run {\n  @driver.get 'http://the-internet.herokuapp.com/notification_message'\n  notification_message = @driver.find_element(id: 'flash').text\n  notification_message =~ /Action successful/\n}\n")),(0,i.kt)("p",null,"The problem with this approach is that it will fail intermittently because the page's notification message could very well be something else. But the next time you load it, it could be the correct thing."),(0,i.kt)("p",null,"Perhaps something like this would be better suited:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"def get_notification_message\n  @notification_message = @driver.find_element(id: 'flash').text\nend\n\ndef retry_if_notification_message_contains(fail_message)\n  count = 0\n  yield\n  until !@notification_message.include? fail_message || count == 3\n    yield\n    count =+ 1\n  end\nend\n\nrun {\n  retry_if_notification_message_contains 'please try again' do\n    @driver.get 'http://the-internet.herokuapp.com/notification_message'\n    get_notification_message\n  end\n  @notification_message =~ /Action successful/\n}\n")),(0,i.kt)("p",null,"In this approach we have abstracted out the text grab of the notification message into a method which sets what it finds into an instance variable. And we've added a new method called ",(0,i.kt)("inlineCode",{parentName:"p"},"retry_if_notification_message_contains")," that accepts an argument of ",(0,i.kt)("inlineCode",{parentName:"p"},"fail_message"),". In it we accept a yield in 2 places and have constructed a simple loop that runs 3 times or until the notification message does not match the ",(0,i.kt)("inlineCode",{parentName:"p"},"fail_message"),", whichever comes first. And the yields will execute whatever code is passed both before and during the loop."),(0,i.kt)("p",null,"In the run block we pass our navigation and text grab actions as a block into ",(0,i.kt)("inlineCode",{parentName:"p"},"retry_if_notification_message_contains"),", passing the failure message of ",(0,i.kt)("strong",{parentName:"p"},"please try again")," as the argument for ",(0,i.kt)("inlineCode",{parentName:"p"},"fail_message")," to receive."),(0,i.kt)("p",null,"And we top everything off with an assertion."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Grab the notification message text"),(0,i.kt)("li",{parentName:"ul"},"Compare it to the failure message"),(0,i.kt)("li",{parentName:"ul"},"If it matches, retry"),(0,i.kt)("li",{parentName:"ul"},"If 3 retries attempted, end loop, and fail test"),(0,i.kt)("li",{parentName:"ul"},"If it doesn't match, pass the test")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"With this approach there may be a concern that we could be obfuscating a real issue that could bubble up to our users. That's why it is important to use this approach sparingly, and on issues you more or less understand (e.g. a third-party test environment having one-off service blips, or expensive tests that involve sharing something to a third-party and checking to see that it appeared)."),(0,i.kt)("p",null,"Hopefully this example will help you build a more resilient and relevant set of tests."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},88065:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"build-an-interactive-prompt/csharp",id:"build-an-interactive-prompt/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/11-build-an-interactive-prompt/csharp.md",sourceDirName:"11-build-an-interactive-prompt",slug:"/build-an-interactive-prompt/csharp",permalink:"/docs/build-an-interactive-prompt/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/11-build-an-interactive-prompt/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},83647:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"build-an-interactive-prompt/java",id:"build-an-interactive-prompt/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/11-build-an-interactive-prompt/java.md",sourceDirName:"11-build-an-interactive-prompt",slug:"/build-an-interactive-prompt/java",permalink:"/docs/build-an-interactive-prompt/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/11-build-an-interactive-prompt/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},93084:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"build-an-interactive-prompt/javascript",id:"build-an-interactive-prompt/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/11-build-an-interactive-prompt/javascript.md",sourceDirName:"11-build-an-interactive-prompt",slug:"/build-an-interactive-prompt/javascript",permalink:"/docs/build-an-interactive-prompt/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/11-build-an-interactive-prompt/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},89746:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"build-an-interactive-prompt/python",id:"build-an-interactive-prompt/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/11-build-an-interactive-prompt/python.md",sourceDirName:"11-build-an-interactive-prompt",slug:"/build-an-interactive-prompt/python",permalink:"/docs/build-an-interactive-prompt/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/11-build-an-interactive-prompt/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},93047:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:2,hide_sidebar:!0,publish_date:new Date("2013-08-06T00:00:00.000Z"),last_update:{date:new Date("2023-02-28T00:00:00.000Z")}},o=void 0,l={unversionedId:"build-an-interactive-prompt/ruby",id:"build-an-interactive-prompt/ruby",title:"ruby",description:"A Solution",source:"@site/docs/11-build-an-interactive-prompt/ruby.md",sourceDirName:"11-build-an-interactive-prompt",slug:"/build-an-interactive-prompt/ruby",permalink:"/docs/build-an-interactive-prompt/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/11-build-an-interactive-prompt/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677542400,formattedLastUpdatedAt:"Feb 28, 2023",frontMatter:{language:"ruby",level:2,hide_sidebar:!0,publish_date:"2013-08-06T00:00:00.000Z",last_update:{date:"2023-02-28T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"One way to simplify things, and make it easier for testers to transition from Selenium IDE, is to build an interactive prompt -- also known as a read-eval-print-loop (REPL)."),(0,i.kt)("p",null,"Upon loading the prompt it will launch a browser and accept Selenium commands just the same as they are written in test code. And if a command is issued that errors (or that it doesn't recognize) the prompt will provide that information and continue to function."),(0,i.kt)("p",null,"This will enable us to continue through specific Selenium actions and locators to verify that they work before putting them into test code."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"In the first half of our example we include our libraries and our usual setup, teardown, and run actions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'selenium-webdriver'\nrequire 'rspec/expectations'\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"In the run action we define our loop and its behavior, creating the interactive prompt we want."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  loop do\n    print '>> '\n    input = gets.chomp\n    if input == 'q'\n      puts 'Quitting...'\n      @driver.quit\n      exit 0\n    end\n    begin\n      eval input\n    rescue Exception => e\n      puts e.message\n    end\n  end\nend\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"print")," command is used instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"puts")," because we want ",(0,i.kt)("inlineCode",{parentName:"p"},">> ")," to appear on the same line as the input that we are issuing. This gives us the look and feel of a prompt. And we use ",(0,i.kt)("inlineCode",{parentName:"p"},"gets.chomp")," to take in input. ",(0,i.kt)("inlineCode",{parentName:"p"},"gets")," is responsible for receiving the input. And ",(0,i.kt)("inlineCode",{parentName:"p"},"chomp")," removes the carriage return character (e.g. '\\n') from the input."),(0,i.kt)("p",null,"Before executing the input we perform a check to see if the letter ",(0,i.kt)("strong",{parentName:"p"},"q")," is issued. If so, the script will post a message to the terminal, close the browser, and exit the prompt."),(0,i.kt)("p",null,"We then execute the input provided with ",(0,i.kt)("inlineCode",{parentName:"p"},"eval")," and rescue exceptions, posting their message to the terminal when they occur."),(0,i.kt)("p",null,"Here is an example command you may issue to start: ",(0,i.kt)("inlineCode",{parentName:"p"},"@driver.get 'https://www.google.com'"),"."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Firefox loads"),(0,i.kt)("li",{parentName:"ul"},"An interactive prompt is presented"),(0,i.kt)("li",{parentName:"ul"},"Issue a Selenium command and see it execute in the browser"),(0,i.kt)("li",{parentName:"ul"},"Issue a command that it does not recognize (or that errors), and see a message stating the issue in the prompt"),(0,i.kt)("li",{parentName:"ul"},"Issue ",(0,i.kt)("strong",{parentName:"li"},"q"),", the browser will close and the prompt will terminate")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this REPL will help save you some time and frustration -- making it easier to write and debug your tests."),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},69438:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:2,hide_sidebar:!0,publish_date:new Date("2016-06-12T00:00:00.000Z"),last_update:{date:new Date("2023-03-29T00:00:00.000Z")}},o=void 0,l={unversionedId:"opt-out-of-ab-tests/csharp",id:"opt-out-of-ab-tests/csharp",title:"csharp",description:"A Solution",source:"@site/docs/12-opt-out-of-ab-tests/csharp.md",sourceDirName:"12-opt-out-of-ab-tests",slug:"/opt-out-of-ab-tests/csharp",permalink:"/docs/opt-out-of-ab-tests/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/12-opt-out-of-ab-tests/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680048e3,formattedLastUpdatedAt:"Mar 29, 2023",frontMatter:{language:"csharp",level:2,hide_sidebar:!0,publish_date:"2016-06-12T00:00:00.000Z",last_update:{date:"2023-03-29T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"First, here is a primer on Split Testing."),(0,i.kt)("blockquote",null,(0,i.kt)("h3",{parentName:"blockquote",id:"split-testing"},"Split Testing"),(0,i.kt)("p",{parentName:"blockquote"},"Split testing is a simple way to experiment with an application's features to see which changes lead to higher user engagement. A simple example would be testing variations of an e-mail landing page to see if more people sign up. In such a split test there would be the control (how the application looks and behaves now) and variants (e.g., 2 or 3 changes that could include changing text or images on the page, element positioning, color of the submit button, etc)."),(0,i.kt)("p",{parentName:"blockquote"},"Once the variants are configured, they are put into rotation, and the experiment starts. During this experiment each user will see a different version of the feature and their engagement with it will be tracked. Split tests live for the length of the experiment or until a winner is found (e.g., tracking indicates that a variant converted higher than the control). If no winner is found, new variants may be created and another experiment tried. If a winner is found, then the winning variant becomes the new control and the feature gets updated accordingly.")),(0,i.kt)("p",null,"Thankfully there are some standard opt-out mechanisms built into A/B testing platforms. They tend to come in the form of an appended URL or forging a cookie."),(0,i.kt)("p",null,"Let's start with an example for each approach with a popular A/B testing platform, ",(0,i.kt)("a",{parentName:"p",href:"https://www.optimizely.com/"},"Optimizely"),"."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Our example page is from ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the-internet")," and can be seen ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/abtest"},"here"),". There are three different variants of the page that are available, each with different heading text:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Control: ",(0,i.kt)("inlineCode",{parentName:"li"},"A/B Test Control")),(0,i.kt)("li",{parentName:"ul"},"Variation 1: ",(0,i.kt)("inlineCode",{parentName:"li"},"A/B Test Variation 1")),(0,i.kt)("li",{parentName:"ul"},"Opt-out: ",(0,i.kt)("inlineCode",{parentName:"li"},"No A/B Test"))),(0,i.kt)("p",null,"Let's start things off by including our requisite classes for our test framework (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"NUnit.Framework"),"), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenQA.Selenium"),", etc.), and start our class with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: ABTestOptOut.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\n\npublic class ABTestOptOut\n{\n    IWebDriver Driver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now let's wire up our first test to step through visiting the page and verifying that the text changes as we forge an opt-out cookie."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: ABTestOptOut.cs\n// ...\n    [Test]\n    public void OptOutWithCookieAfterVisitingPage()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/abtest");\n        string HeadingText = Driver.FindElement(By.TagName("h3")).Text;\n        Assert.That(HeadingText.StartsWith("A/B Test"));\n        Driver.Manage().Cookies.AddCookie(new Cookie("optimizelyOptOut", "true"));\n        Driver.Navigate().Refresh();\n        HeadingText = Driver.FindElement(By.TagName("h3")).Text;\n        Assert.That(HeadingText.StartsWith("No A/B Test"));\n    }\n// ...\n')),(0,i.kt)("p",null,"After navigating to the page we confirm that we are in one of the A/B test groups by grabbing the heading text and checking to see if it starts with the text ",(0,i.kt)("inlineCode",{parentName:"p"},'"A/B Test"'),". After that we add the opt-out cookie, refresh the page, and then confirm that we are no longer in the A/B test group by checking the heading text again."),(0,i.kt)("p",null,"We could also load the opt-out cookie ",(0,i.kt)("em",{parentName:"p"},"before")," navigating to the page."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: ABTestOptOut.cs\n// ...\n    [Test]\n    public void OptOutWithCookieBeforeVisitingPage()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com");\n        Driver.Manage().Cookies.AddCookie(new Cookie("optimizelyOptOut", "true"));\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/abtest");\n        string HeadingText = Driver.FindElement(By.TagName("h3")).Text;\n        Assert.That(HeadingText.StartsWith("No A/B Test"));\n    }\n// ...\n')),(0,i.kt)("p",null,"Here we are navigating to the main page of the site first (to establish the host) and then adding the opt-out cookie. If we didn't visit the site first, then adding the cookie wouldn't have worked. Once added we navigate to the example page and perform our checks just like before."),(0,i.kt)("p",null,"Alternatively, we can achieve the same thing without forging a cookie. Instead we can append an opt-out query to the URL when visiting the page."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: ABTestOptOut.cs\n// ...\n    [Test]\n    public void OptOutWithURL()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/abtest?optimizely_opt_out=true");\n        Driver.SwitchTo().Alert().Dismiss();\n        Driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(20);\n        string HeadingText = Driver.FindElement(By.TagName("h3")).Text;\n        Assert.That(HeadingText.StartsWith("No A/B Test"));\n    }\n}\n')),(0,i.kt)("p",null,"By appending ",(0,i.kt)("inlineCode",{parentName:"p"},"?optimizely_opt_out=true")," to the URL we achieve the same outcome as with forging a cookie. But keep in mind that this approach triggers a JavaScript alert, so we have to switch to it and dismiss it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"Driver.SwitchTo().Alert().Dismiss();"),") before performing our assertion."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\ABTestOptOut.sln")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Opt-out of the split tests (either by cookie or appended URL)"),(0,i.kt)("li",{parentName:"ul"},"Visit the split testing page"),(0,i.kt)("li",{parentName:"ul"},"Grab the header text"),(0,i.kt)("li",{parentName:"ul"},"Confirm that the session is opted out of the split tests"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip was helpful in guiding you in different methods of how to opt out of split tests."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},48831:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:2,hide_sidebar:!0,publish_date:new Date("2015-11-11T00:00:00.000Z"),last_update:{date:new Date("2023-04-03T00:00:00.000Z")}},o=void 0,l={unversionedId:"opt-out-of-ab-tests/java",id:"opt-out-of-ab-tests/java",title:"java",description:"A Solution",source:"@site/docs/12-opt-out-of-ab-tests/java.md",sourceDirName:"12-opt-out-of-ab-tests",slug:"/opt-out-of-ab-tests/java",permalink:"/docs/opt-out-of-ab-tests/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/12-opt-out-of-ab-tests/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:168048e4,formattedLastUpdatedAt:"Apr 3, 2023",frontMatter:{language:"java",level:2,hide_sidebar:!0,publish_date:"2015-11-11T00:00:00.000Z",last_update:{date:"2023-04-03T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"First, here is a primer on Split Testing."),(0,i.kt)("blockquote",null,(0,i.kt)("h3",{parentName:"blockquote",id:"split-testing"},"Split Testing"),(0,i.kt)("p",{parentName:"blockquote"},"Split testing is a simple way to experiment with an application's features to see which changes lead to higher user engagement. A simple example would be testing variations of an e-mail landing page to see if more people sign up. In such a split test there would be the control (how the application looks and behaves now) and variants (e.g., 2 or 3 changes that could include changing text or images on the page, element positioning, color of the submit button, etc)."),(0,i.kt)("p",{parentName:"blockquote"},"Once the variants are configured, they are put into rotation, and the experiment starts. During this experiment each user will see a different version of the feature and their engagement with it will be tracked. Split tests live for the length of the experiment or until a winner is found (e.g., tracking indicates that a variant converted higher than the control). If no winner is found, new variants may be created and another experiment tried. If a winner is found, then the winning variant becomes the new control and the feature gets updated accordingly.")),(0,i.kt)("p",null,"Thankfully there are some standard opt-out mechanisms built into A/B testing platforms. They tend to come in the form of an appended URL or forging a cookie."),(0,i.kt)("p",null,"Let's start with an example for each approach with a popular A/B testing platform, ",(0,i.kt)("a",{parentName:"p",href:"https://www.optimizely.com/"},"Optimizely"),"."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Our example page is from ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the-internet")," and can be seen ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/abtest"},"here"),". There are three different variants of the page that are available, each with different heading text:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Control: ",(0,i.kt)("inlineCode",{parentName:"li"},"A/B Test Control")),(0,i.kt)("li",{parentName:"ul"},"Variation 1: ",(0,i.kt)("inlineCode",{parentName:"li"},"A/B Test Variation 1")),(0,i.kt)("li",{parentName:"ul"},"Opt-out: ",(0,i.kt)("inlineCode",{parentName:"li"},"No A/B Test"))),(0,i.kt)("p",null,"Let's start by importing our requisite classes (for annotations (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.junit.After"),", etc.), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.openqa.selenium.WebDriver"),", etc.), and matchers for our assertions (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.hamcrest.CoreMatchers"),", etc.)) and start our class with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// filename: ABTestOptOut.java\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.Cookie;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.hamcrest.MatcherAssert.assertThat;\n\npublic class ABTestOptOut {\n\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now let's wire up our first test to step through visiting the page and verifying that the text changes as we forge an opt-out cookie."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: ABTestOptOut.java\n// ...\n    @Test\n    public void WithCookieAfterVisitingPage() {\n        driver.get("http://the-internet.herokuapp.com/abtest");\n        String headingText = driver.findElement(By.tagName("h3")).getText();\n        assertThat(headingText, startsWith("A/B Test"));\n        driver.manage().addCookie(new Cookie("optimizelyOptOut", "true"));\n        driver.navigate().refresh();\n        headingText = driver.findElement(By.cssSelector("h3")).getText();\n        assertThat(headingText, is("No A/B Test"));\n    }\n// ...\n')),(0,i.kt)("p",null,"After navigating to the page we confirm that we are in one of the A/B test groups by grabbing the heading text and checking to see if it starts with the text ",(0,i.kt)("inlineCode",{parentName:"p"},'"A/B Test"'),". After that we add the opt-out cookie, refresh the page, and then confirm that we are no longer in the A/B test group by checking the heading text again."),(0,i.kt)("p",null,"We could also load the opt-out cookie ",(0,i.kt)("em",{parentName:"p"},"before")," navigating to the page."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: ABTestOptOut.java\n// ...\n    @Test\n    public void WithCookieBeforeVisitingPage() {\n        driver.get("http://the-internet.herokuapp.com");\n        driver.manage().addCookie(new Cookie("optimizelyOptOut", "true"));\n        driver.get("http://the-internet.herokuapp.com/abtest");\n        assertThat(driver.findElement(By.cssSelector("h3")).getText(), is("No A/B Test"));\n    }\n// ...\n')),(0,i.kt)("p",null,"Here we are navigating to the main page of the site first (to establish the host) and then adding the opt-out cookie. If we didn't visit the site first, then adding the cookie wouldn't have worked. Once added, we navigate to the example page and perform our checks just like before."),(0,i.kt)("p",null,"Alternatively, we can achieve the same thing without forging a cookie. Instead we can append an opt-out query to the URL when visiting the page."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: ABTestOptOut.java\n// ...\n    @Test\n    public void WithOptOutUrl() {\n        driver.get("http://the-internet.herokuapp.com/abtest?optimizely_opt_out=true");\n        driver.switchTo().alert().dismiss();\n\n        Thread.sleep(2000);\n        assertThat(driver.findElement(By.cssSelector("h3")).getText(), is("No A/B Test"));\n        Thread.sleep(2000);\n    }\n\n}\n')),(0,i.kt)("p",null,"By appending ",(0,i.kt)("inlineCode",{parentName:"p"},"?optimizely_opt_out=true")," we achieve the same outcome as before. Keep in mind that this approach triggers a JavaScript alert, so we have to switch to and dismiss it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"driver.switchTo().alert().dismiss();"),") before performing our check."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn clean test")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Opt-out of the split tests (either by cookie or appended URL)"),(0,i.kt)("li",{parentName:"ul"},"Visit the split testing page"),(0,i.kt)("li",{parentName:"ul"},"Grab the header text"),(0,i.kt)("li",{parentName:"ul"},"Confirm that the session is opted out of the split tests"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip was helpful in guiding you in different methods of how to opt out of split tests."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},7967:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:2,hide_sidebar:!0,publish_date:new Date("2019-08-09T00:00:00.000Z"),last_update:{date:new Date("2023-03-15T00:00:00.000Z")}},o=void 0,l={unversionedId:"opt-out-of-ab-tests/javascript",id:"opt-out-of-ab-tests/javascript",title:"javascript",description:"A Solution",source:"@site/docs/12-opt-out-of-ab-tests/javascript.md",sourceDirName:"12-opt-out-of-ab-tests",slug:"/opt-out-of-ab-tests/javascript",permalink:"/docs/opt-out-of-ab-tests/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/12-opt-out-of-ab-tests/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1678838400,formattedLastUpdatedAt:"Mar 15, 2023",frontMatter:{language:"javascript",level:2,hide_sidebar:!0,publish_date:"2019-08-09T00:00:00.000Z",last_update:{date:"2023-03-15T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"First, here is a primer on Split Testing."),(0,i.kt)("blockquote",null,(0,i.kt)("h3",{parentName:"blockquote",id:"split-testing"},"Split Testing"),(0,i.kt)("p",{parentName:"blockquote"},"Split testing is a simple way to experiment with an application's features to see which changes lead to higher user engagement. A simple example would be testing variations of an e-mail landing page to see if more people sign up. In such a split test there would be the control (how the application looks and behaves now) and variants (e.g., 2 or 3 changes that could include changing text or images on the page, element positioning, color of the submit button, etc)."),(0,i.kt)("p",{parentName:"blockquote"},"Once the variants are configured, they are put into rotation, and the experiment starts. During this experiment each user will see a different version of the feature and their engagement with it will be tracked. Split tests live for the length of the experiment or until a winner is found (e.g., tracking indicates that a variant converted higher than the control). If no winner is found, new variants may be created and another experiment tried. If a winner is found, then the winning variant becomes the new control and the feature gets updated accordingly.")),(0,i.kt)("p",null,"Thankfully there are some standard opt-out mechanisms built into A/B testing platforms. They tend to come in the form of an appended URL or forging a cookie."),(0,i.kt)("p",null,"Let's start with an example for each approach with a popular A/B testing platform, ",(0,i.kt)("a",{parentName:"p",href:"https://www.optimizely.com/"},"Optimizely"),"."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Our example page is from ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the-internet")," and can be seen ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/abtest"},"here"),". There are three different versions of the page that are available. On each page the heading text will vary:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Control: ",(0,i.kt)("inlineCode",{parentName:"li"},"A/B Test Control")),(0,i.kt)("li",{parentName:"ul"},"Variation 1: ",(0,i.kt)("inlineCode",{parentName:"li"},"A/B Test Variation 1")),(0,i.kt)("li",{parentName:"ul"},"Opt-out: ",(0,i.kt)("inlineCode",{parentName:"li"},"No A/B Test"))),(0,i.kt)("p",null,"Let's start by loading our requisite libraries, declare our test class, and wire up some setup and teardown methods for our tests."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/abOptOut.spec.js\nconst assert = require("assert");\nconst { Builder, By } = require("selenium-webdriver");\n\ndescribe("A/B opt-out", function() {\n  let driver;\n\n  beforeEach(async function() { this.timeout(60000) driver = await new Builder().forBrowser("chrome").build();\n  });\n\n  afterEach(async function() {\n    await driver.quit();\n  });\n// ...\n')),(0,i.kt)("p",null,"Now let's wire up our first test to step through loading the split testing page and verifying that the text changes after we forge an opt-out cookie."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/abOptOut.spec.js\n// ...\n  it("with cookie after visiting page", async function() {\n    await driver.get("http://the-internet.herokuapp.com/abtest");\n    let headingText = await driver.findElement(By.css("h3")).getText();\n    if (headingText.startsWith("A/B Test")) {\n      await driver\n        .manage()\n        .addCookie({ name: "optimizelyOptOut", value: "true" });\n      await driver.navigate().refresh();\n      headingText = await driver.findElement(By.css("h3")).getText();\n    }\n    assert.equal(headingText, "No A/B Test");\n  });\n// ...\n')),(0,i.kt)("p",null,"After navigating to the page we confirm that we are in one of the A/B test groups by grabbing the heading text and checking to see if it matches what we expect. After that we add the opt-out cookie, refresh the page, and then confirm that we are no longer in the A/B test group by checking the heading text again."),(0,i.kt)("p",null,"We could also load the opt-out cookie before navigating to this page."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/abOptOut.spec.js\n  it("with cookie before visiting page", async function() {\n    await driver.get("http://the-internet.herokuapp.com");\n    await driver\n      .manage()\n      .addCookie({ name: "optimizelyOptOut", value: "true" });\n    await driver.get("http://the-internet.herokuapp.com/abtest");\n    assert.equal(\n      await driver.findElement(By.css("h3")).getText(),\n      "No A/B Test"\n    );\n  });\n// ...\n')),(0,i.kt)("p",null,"Here we are navigating to the main page of the site first and then adding the opt-out cookie. After that we navigate to the split test page and then perform our check. Alternatively, we could opt out without forging a cookie. Instead we just need to append an opt out parameter to the URL."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/abOptOut.spec.js\n// ...\n  it("with opt out URL", async function() {\n    await driver.get(\n      "http://the-internet.herokuapp.com/abtest?optimizely_opt_out=true"\n    );\n    await driver\n      .switchTo()\n      .alert()\n      .dismiss();\n    assert.equal(\n      await driver.findElement(By.css("h3")).getText(),\n      "No A/B Test"\n    );\n  });\n});\n')),(0,i.kt)("p",null,"By appending ",(0,i.kt)("inlineCode",{parentName:"p"},"?optimizely_opt_out=true")," we achieve the same outcome as before. Keep in mind that this approach triggers a JavaScript alert, so we have to switch to and dismiss it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"driver.switchTo().alert().dismiss()"),") before performing our check."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mocha")," from the command-line) here is what will happen with either of the tests:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Opt-out of the split tests (either by cookie or appended URL)"),(0,i.kt)("li",{parentName:"ul"},"Visit the split testing page"),(0,i.kt)("li",{parentName:"ul"},"Grab the header text"),(0,i.kt)("li",{parentName:"ul"},"Confirm that the session is opted out of the split test"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"In this tip, we learned about split testing and learned about some standard opt-out mechanisms built into A/B testing platforms."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},72105:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:2,hide_sidebar:!0,publish_date:new Date("2016-11-19T00:00:00.000Z"),last_update:{date:new Date("2023-03-14T00:00:00.000Z")}},o=void 0,l={unversionedId:"opt-out-of-ab-tests/python",id:"opt-out-of-ab-tests/python",title:"python",description:"A Solution",source:"@site/docs/12-opt-out-of-ab-tests/python.md",sourceDirName:"12-opt-out-of-ab-tests",slug:"/opt-out-of-ab-tests/python",permalink:"/docs/opt-out-of-ab-tests/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/12-opt-out-of-ab-tests/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1678752e3,formattedLastUpdatedAt:"Mar 14, 2023",frontMatter:{language:"python",level:2,hide_sidebar:!0,publish_date:"2016-11-19T00:00:00.000Z",last_update:{date:"2023-03-14T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"First, here is a primer on Split Testing."),(0,i.kt)("blockquote",null,(0,i.kt)("h3",{parentName:"blockquote",id:"split-testing"},"Split Testing"),(0,i.kt)("p",{parentName:"blockquote"},"Split testing is a simple way to experiment with an application's features to see which changes lead to higher user engagement. A simple example would be testing variations of an e-mail landing page to see if more people sign up. In such a split test there would be the control (how the application looks and behaves now) and variants (e.g., 2 or 3 changes that could include changing text or images on the page, element positioning, color of the submit button, etc)."),(0,i.kt)("p",{parentName:"blockquote"},"Once the variants are configured, they are put into rotation, and the experiment starts. During this experiment each user will see a different version of the feature and their engagement with it will be tracked. Split tests live for the length of the experiment or until a winner is found (e.g., tracking indicates that a variant converted higher than the control). If no winner is found, new variants may be created and another experiment tried. If a winner is found, then the winning variant becomes the new control and the feature gets updated accordingly.")),(0,i.kt)("p",null,"Thankfully there are some standard opt-out mechanisms built into A/B testing platforms. They tend to come in the form of an appended URL or forging a cookie."),(0,i.kt)("p",null,"Let's start with an example for each approach with a popular A/B testing platform, ",(0,i.kt)("a",{parentName:"p",href:"https://www.optimizely.com/"},"Optimizely"),"."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Our example page is from ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the-internet")," and can be seen ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/abtest"},"here"),". There are three different versions of the page that are available. On each page the heading text will vary:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Control: ",(0,i.kt)("inlineCode",{parentName:"li"},"A/B Test Control")),(0,i.kt)("li",{parentName:"ul"},"Variation 1: ",(0,i.kt)("inlineCode",{parentName:"li"},"A/B Test Variation 1")),(0,i.kt)("li",{parentName:"ul"},"Opt-out: ",(0,i.kt)("inlineCode",{parentName:"li"},"No A/B Test"))),(0,i.kt)("p",null,"Let's start things off by loading our requisite libraries (",(0,i.kt)("inlineCode",{parentName:"p"},"import unittest")," for our test framework and ",(0,i.kt)("inlineCode",{parentName:"p"},"from selenium import webdriver")," to drive the browser), declare our test class, and wire up some test ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: ab_test_opt_out.py\nimport unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\n\nclass ABTestOptOut(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n\n    def tearDown(self):\n        self.driver.quit()\n# ...\n")),(0,i.kt)("p",null,"Now let's begin our first test to step through loading the split testing page and verifying that the text changes after we forge an opt-out cookie."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: ab_test_opt_out.py\n# ...\n    def test_forge_cookie_on_target_page(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/abtest')\n        heading_text = driver.find_element(By.TAG_NAME,'h3').text\n        assert heading_text in ['A/B Test Variation 1', 'A/B Test Control']\n        driver.add_cookie({'name' : 'optimizelyOptOut', 'value' : 'true'})\n        driver.refresh()\n        heading_text = driver.find_element(By.TAG_NAME,'h3').text\n        assert heading_text == 'No A/B Test'\n\n# ...\n")),(0,i.kt)("p",null,"After navigating to the page we confirm that we are in one of the A/B test groups by grabbing the heading text and checking to see if it matches what we expect. After that we add the opt-out cookie, refresh the page, and then confirm that we are no longer in the A/B test group by checking the heading text again."),(0,i.kt)("p",null,"We could also load the opt-out cookie before navigating to this page."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: ab_test_opt_out.py\n# ...\n    def test_forge_cookie_on_homepage_then_navigate_to_target_page(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com')\n        driver.add_cookie({'name' : 'optimizelyOptOut', 'value' : 'true'})\n        driver.get('http://the-internet.herokuapp.com/abtest')\n        heading_text = driver.find_element(By.TAG_NAME,'h3').text\n        assert heading_text == 'No A/B Test'\n\n# ...\n")),(0,i.kt)("p",null,"Here we are navigating to the main page of the site first and then adding the opt-out cookie. After that we navigate to the split test page and then perform our check. Alternatively, we could opt out without forging a cookie. Instead we just need to append an opt out parameter to the URL."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: ab_test_opt_out.py\n    def test_url_parameter(self):\n            driver = self.driver\n            driver.get('http://the-internet.herokuapp.com/abtest?optimizely_opt_out=true')\n            driver.switch_to.alert.dismiss()\n            heading_text = driver.find_element(By.TAG_NAME,'h3').text\n            assert heading_text == 'No A/B Test'\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,i.kt)("p",null,"By appending ",(0,i.kt)("inlineCode",{parentName:"p"},"?optimizely_opt_out=true")," we achieve the same outcome as before. Keep in mind that this approach triggers a JavaScript alert, so we have to switch to and dismiss it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"driver.switch_to.alert.dismiss()"),") before performing our check."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"python ab_test_opt_out.py")," from the command-line) here is what will happen with either of the tests:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Opt-out of the split tests (either by cookie or appended URL)"),(0,i.kt)("li",{parentName:"ul"},"Visit the split testing page"),(0,i.kt)("li",{parentName:"ul"},"Grab the header text"),(0,i.kt)("li",{parentName:"ul"},"Confirm that the session is opted out of the split test"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip was helpful in guiding you in different methods of how to opt out of split tests."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},60403:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:2,hide_sidebar:!0,publish_date:new Date("2015-10-15T00:00:00.000Z"),last_update:{date:new Date("2023-02-28T00:00:00.000Z")}},o=void 0,l={unversionedId:"opt-out-of-ab-tests/ruby",id:"opt-out-of-ab-tests/ruby",title:"ruby",description:"A Solution",source:"@site/docs/12-opt-out-of-ab-tests/ruby.md",sourceDirName:"12-opt-out-of-ab-tests",slug:"/opt-out-of-ab-tests/ruby",permalink:"/docs/opt-out-of-ab-tests/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/12-opt-out-of-ab-tests/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677542400,formattedLastUpdatedAt:"Feb 28, 2023",frontMatter:{language:"ruby",level:2,hide_sidebar:!0,publish_date:"2015-10-15T00:00:00.000Z",last_update:{date:"2023-02-28T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"First, here is a primer on Split Testing."),(0,i.kt)("blockquote",null,(0,i.kt)("h3",{parentName:"blockquote",id:"split-testing"},"Split Testing"),(0,i.kt)("p",{parentName:"blockquote"},"Split testing is a simple way to experiment with an application's features to see which changes lead to higher user engagement. A simple example would be testing variations of an e-mail landing page to see if more people sign up. In such a split test there would be the control (how the application looks and behaves now) and variants (e.g., 2 or 3 changes that could include changing text or images on the page, element positioning, color of the submit button, etc)."),(0,i.kt)("p",{parentName:"blockquote"},"Once the variants are configured, they are put into rotation, and the experiment starts. During this experiment each user will see a different version of the feature and their engagement with it will be tracked. Split tests live for the length of the experiment or until a winner is found (e.g., tracking indicates that a variant converted higher than the control). If no winner is found, new variants may be created and another experiment tried. If a winner is found, then the winning variant becomes the new control and the feature gets updated accordingly.")),(0,i.kt)("p",null,"Thankfully there are some standard opt-out mechanisms built into A/B testing platforms. They tend to come in the form of an appended URL or forging a cookie."),(0,i.kt)("p",null,"Let's start with an example for each approach with a popular A/B testing platform, ",(0,i.kt)("a",{parentName:"p",href:"https://www.optimizely.com/"},"Optimizely"),"."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Our example page is from ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the-internet")," and can be seen ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/abtest"},"here"),". There are three different versions of the page that are available. On each page the heading text will vary:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Control: ",(0,i.kt)("inlineCode",{parentName:"li"},"A/B Test Control")),(0,i.kt)("li",{parentName:"ul"},"Variation 1: ",(0,i.kt)("inlineCode",{parentName:"li"},"A/B Test Variation 1")),(0,i.kt)("li",{parentName:"ul"},"Opt-out: ",(0,i.kt)("inlineCode",{parentName:"li"},"No A/B Test"))),(0,i.kt)("p",null,"Let's kick things off by loading our requisite libraries (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to control the browser and ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," and it's matchers for our assertions) and adding some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods to handle our test configuration."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: split_test.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude ::RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Now let's wire up our first test to step through loading the split testing page and verifying that the text changes as we forge an opt-out cookie."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/abtest'\n  heading_text = @driver.find_element(css: 'h3').text\n  expect(['A/B Test Variation 1', 'A/B Test Control'].include? heading_text).to eql true\n  @driver.manage.add_cookie(name: 'optimizelyOptOut', value: 'true')\n  @driver.navigate.refresh\n  heading_text = @driver.find_element(css: 'h3').text\n  expect(heading_text).to eql('No A/B Test')\nend\n")),(0,i.kt)("p",null,"After navigating to the page we confirm that we are in one of the A/B test groups by grabbing the heading text and checking to see if it matches what we expect. After that we add the opt-out cookie, refresh the page, and then confirm that we are no longer in the A/B test group by checking the heading text again."),(0,i.kt)("p",null,"We could also load the opt-out cookie before navigating to this page."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com'\n  @driver.manage.add_cookie(name: 'optimizelyOptOut', value: 'true')\n  @driver.get 'http://the-internet.herokuapp.com/abtest'\n  expect(@driver.find_element(css: 'h3').text).to eql('No A/B Test')\nend\n")),(0,i.kt)("p",null,"Here we first navigate to the main page of the site and then add the opt-out cookie. After that, we navigate to the split test page and perform our checks. Alternatively, we could opt out without forging a cookie. Instead we would need to append an opt out request to the URL."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/abtest?optimizely_opt_out=true'\n  @driver.switch_to.alert.dismiss\n  expect(@driver.find_element(css: 'h3').text).to eql('No A/B Test')\nend\n")),(0,i.kt)("p",null,"By appending ",(0,i.kt)("inlineCode",{parentName:"p"},"?optimizely_opt_out=true")," we achieve the same outcome as before. Keep in mind that this approach triggers a JavaScript alert, so we have to switch to and dismiss it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"@driver.switch_to.alert.dismiss"),") before performing our check."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby split_test.rb")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Opt-out of the split tests (either by cookie or appended URL)"),(0,i.kt)("li",{parentName:"ul"},"Visit the split testing page"),(0,i.kt)("li",{parentName:"ul"},"Grab the header text"),(0,i.kt)("li",{parentName:"ul"},"Confirm that the session is opted out of the split tests"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip was helpful in guiding you in different methods of how to opt out of split tests."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},61954:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:1,hide_sidebar:!0,publish_date:new Date("2016-06-12T00:00:00.000Z"),last_update:{date:new Date("2023-03-29T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-access-basic-auth/csharp",id:"how-to-access-basic-auth/csharp",title:"csharp",description:"A Solution",source:"@site/docs/13-how-to-access-basic-auth/csharp.md",sourceDirName:"13-how-to-access-basic-auth",slug:"/how-to-access-basic-auth/csharp",permalink:"/docs/how-to-access-basic-auth/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/13-how-to-access-basic-auth/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680048e3,formattedLastUpdatedAt:"Mar 29, 2023",frontMatter:{language:"csharp",level:1,hide_sidebar:!0,publish_date:"2016-06-12T00:00:00.000Z",last_update:{date:"2023-03-29T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By specifying the username and password ",(0,i.kt)("em",{parentName:"p"},"in the URL")," when visiting a page with Selenium, we can a side-step the system level dialog box and avoid setting up a proxy server. This approach will work for both HTTP or HTTPS pages."),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"First we'll include our requisite classes for our test framework (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"NUnit.Framework"),"), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenQA.Selenium"),", etc.), and start our class off with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: BasicAuth1.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\n\npublic class BasicAuth1\n{\n    IWebDriver Driver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now to add our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: BasicAuth1.cs\n    [Test]\n    public void ConnectToBasicAuthByURL()\n    {\n        Driver.Navigate().GoToUrl("http://admin:admin@the-internet.herokuapp.com/basic_auth");\n        string PageMessage = Driver.FindElement(By.CssSelector("p")).Text;\n        Assert.That(PageMessage.Contains("Congratulations!"));\n    }\n}\n// ...\n')),(0,i.kt)("p",null,"In the test we're loading the page by passing in the username and password in the front of the URL (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"http://admin:admin@"),"). Once it loads we grab text from the page to make sure we ended up in the right place."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("p",null,"Alternatively we could have accessed this page as part of the test setup (after creating an instance of Selenium). This would have cached the Basic Auth session in the browser, enabling us to visit the page again without having to specify credentials. This is particularly useful if you have numerous pages behind Basic Auth."),(0,i.kt)("p",null,"Here's what that script would look like."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: BasicAuth2.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\n\nclass BasicAuth2\n{\n    IWebDriver Driver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n        Driver.Navigate().GoToUrl("http://admin:admin@the-internet.herokuapp.com/basic_auth");\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n\n    [Test]\n    public void AccessBasicAuthPageAfterAuthentication()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/basic_auth");\n        string PageMessage = Driver.FindElement(By.CssSelector("p")).Text;\n        Assert.That(PageMessage.Contains("Congratulations!"));\n    }\n\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: If your application serves both HTTP and HTTPS pages from behind Basic Auth then you will need to load one of each type before executing your test steps. Otherwise you will get authorization errors when switching between HTTP and HTTPS because the browser can't use Basic Auth credentials interchangeably (e.g. HTTP for HTTPS and vice versa).")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save the first example and run it here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page using Basic Auth"),(0,i.kt)("li",{parentName:"ul"},"Get the page text"),(0,i.kt)("li",{parentName:"ul"},"Assert that the text is what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("p",null,"And when you save the second example and run it here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page using Basic Auth in the setup"),(0,i.kt)("li",{parentName:"ul"},"Navigate to the Basic Auth page (without providing credentials)"),(0,i.kt)("li",{parentName:"ul"},"Get the page text"),(0,i.kt)("li",{parentName:"ul"},"Assert that the text is what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully these examples will help save you from getting any setbacks from Basic Auth when you come across it."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},50167:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:1,hide_sidebar:!0,publish_date:new Date("2015-10-14T00:00:00.000Z"),last_update:{date:new Date("2023-04-03T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-access-basic-auth/java",id:"how-to-access-basic-auth/java",title:"java",description:"A Solution",source:"@site/docs/13-how-to-access-basic-auth/java.md",sourceDirName:"13-how-to-access-basic-auth",slug:"/how-to-access-basic-auth/java",permalink:"/docs/how-to-access-basic-auth/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/13-how-to-access-basic-auth/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:168048e4,formattedLastUpdatedAt:"Apr 3, 2023",frontMatter:{language:"java",level:1,hide_sidebar:!0,publish_date:"2015-10-14T00:00:00.000Z",last_update:{date:"2023-04-03T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By specifying the username and password ",(0,i.kt)("em",{parentName:"p"},"in the URL")," when visiting a page with Selenium, we can a side-step the system level dialog box and avoid setting up a proxy server. This approach will work for both HTTP or HTTPS pages."),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"First let's import our requisite classes (for annotations (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.junit.After"),", etc.), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.openqa.selenium.WebDriver"),", etc.), and matchers for our assertions (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.hamcrest.CoreMatchers"),", etc.)) and start our class with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// filename: WorkWithBasicAuth.java\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.hamcrest.MatcherAssert.assertThat;\n\npublic class WorkWithBasicAuth {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now to add our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: WorkWithBasicAuth.java\n// ...\n    @Test\n    public void workWithBasicAuthTest() {\n        driver.get("http://admin:admin@the-internet.herokuapp.com/basic_auth");\n        String pageMessage = driver.findElement(By.cssSelector("p")).getText();\n        assertThat(pageMessage, containsString("Congratulations!"));\n    }\n\n}\n')),(0,i.kt)("p",null,"In the test we're loading the page by passing in the username and password in the front of the URL (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"http://admin:admin@"),"). Once it loads we grab text from the page to make sure we ended up in the right place."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("p",null,"Alternatively, we could have accessed this page as part of the test setup (after creating an instance of Selenium). This would have cached the Basic Auth session in the browser, enabling us to visit the page again without having to specify credentials. This is particularly useful if you have numerous pages behind Basic Auth."),(0,i.kt)("p",null,"Here's what the script would look like."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: WorkWithBasicAuth2.java\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.hamcrest.MatcherAssert.assertThat;\n\npublic class WorkWithBasicAuth2 {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n        driver.get("http://admin:admin@the-internet.herokuapp.com/basic_auth");\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n\n    @Test\n    public void workWithBasicAuthTest2() {\n        driver.get("http://the-internet.herokuapp.com/basic_auth");\n        String pageMessage = driver.findElement(By.cssSelector("p")).getText();\n        assertThat(pageMessage, containsString("Congratulations!"));\n    }\n\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: If your application serves both HTTP and HTTPS pages from behind Basic Auth then you will need to load one of each type before executing your test steps. Otherwise you will get authorization errors when switching between HTTP and HTTPS because the browser can't use Basic Auth credentials interchangeably (e.g. HTTP for HTTPS and vice versa).")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save the first example and run it here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page using Basic Auth"),(0,i.kt)("li",{parentName:"ul"},"Get the page text"),(0,i.kt)("li",{parentName:"ul"},"Assert that the text is what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("p",null,"And when you save the second example and run it here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page using Basic Auth in the setup"),(0,i.kt)("li",{parentName:"ul"},"Navigate to the Basic Auth page (without providing credentials)"),(0,i.kt)("li",{parentName:"ul"},"Get the page text"),(0,i.kt)("li",{parentName:"ul"},"Assert that the text is what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip will help save you from getting tripped by Basic Auth when you come across it.\nThanks to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/RomanIsko"},"Roman Isko")," for contributing the initial Java code for this tip."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},9362:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:1,hide_sidebar:!0,publish_date:new Date("2019-08-09T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-access-basic-auth/javascript",id:"how-to-access-basic-auth/javascript",title:"javascript",description:"A Solution",source:"@site/docs/13-how-to-access-basic-auth/javascript.md",sourceDirName:"13-how-to-access-basic-auth",slug:"/how-to-access-basic-auth/javascript",permalink:"/docs/how-to-access-basic-auth/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/13-how-to-access-basic-auth/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"javascript",level:1,hide_sidebar:!0,publish_date:"2019-08-09T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By specifying the username and password ",(0,i.kt)("em",{parentName:"p"},"in the URL")," when visiting a page with Selenium, we can side-step the system level dialog box and avoid setting up a proxy server. This approach will work for both HTTP or HTTPS pages."),(0,i.kt)("p",null,"Let's take a look at an example."),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"Let's start by requiring our requisite libraries, declare our test class, and wire up some test setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/basic-auth.spec.js\n// ...\nconst assert = require("assert");\nconst { Builder, By, Key } = require("selenium-webdriver");\n\ndescribe("Basic Auth", function() {\n  let driver;\n\n  beforeEach(async function() {\n    this.timeout(60000);\n    driver = await new Builder().forBrowser("chrome").build();\n  });\n\n  afterEach(async function() {\n    await driver.quit();\n  });\n// ...\n')),(0,i.kt)("p",null,"Now let's add our test code to the script."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/basic-auth-1.spec.js\n// ...\n  it("should visit basic auth secured page directly", async function() {\n    await driver.get(\n      "http://admin:admin@the-internet.herokuapp.com/basic_auth"\n    );\n    const page_message = await driver\n      .findElement(By.css(".example p"))\n      .getText();\n    assert(\n      page_message === "Congratulations! You must have the proper credentials."\n    );\n  });\n});\n')),(0,i.kt)("p",null,"In the test we're loading the page by passing in the username and password in the front of the URL (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"http://admin:admin@"),"). Once it loads we grab text from the page to make sure we ended up in the right place."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("p",null,"Alternatively, we could have accessed this page before the test (e.g., as part of the test setup). This would have cached the Basic Auth session in the browser, enabling us to visit the page again without having to specify credentials. This is particularly useful if you have numerous pages behind Basic Auth."),(0,i.kt)("p",null,"Here's what that script would look like."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/basic-auth.spec-2.js\n// ...\n  beforeEach(async function() {\n    this.timeout(60000);\n    driver = await new Builder().forBrowser("chrome").build();\n    await driver.get(\n      "http://admin:admin@the-internet.herokuapp.com/basic_auth"\n    );\n  });\n\n  // ...\n\n  it("should visit basic auth without credentials after visiting page with them", async function() {\n    await driver.get("http://the-internet.herokuapp.com/basic_auth");\n    const page_message = await driver\n      .findElement(By.css(".example p"))\n      .getText();\n    assert(\n      page_message === "Congratulations! You must have the proper credentials."\n    );\n  });\n});\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: If your application serves both HTTP and HTTPS pages from behind Basic Auth then you will need to load one of ",(0,i.kt)("em",{parentName:"strong"},"each")," type before executing your test steps. Otherwise you will get authorization errors when switching between HTTP and HTTPS because the browser can't use Basic Auth credentials interchangeably (e.g. HTTP for HTTPS and vice versa).")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save these files and run them (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mocha"),"), here is what will happen:"),(0,i.kt)("u",null,"basic-auth-1.spec.js"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page using Basic Auth"),(0,i.kt)("li",{parentName:"ul"},"Get the page text"),(0,i.kt)("li",{parentName:"ul"},"Assert that the text is what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("p",null,"And when you save the second example and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"basic-auth-2.spec.js"),"), here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page using Basic Auth as part of the test setup"),(0,i.kt)("li",{parentName:"ul"},"Visit the page without the Basic Auth credentials (successfully)"),(0,i.kt)("li",{parentName:"ul"},"Get the page text"),(0,i.kt)("li",{parentName:"ul"},"Assert that the text is what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully these examples will help save you from getting any setbacks from Basic Auth when you come across it."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},11012:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:1,hide_sidebar:!0,publish_date:new Date("2016-11-17T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-access-basic-auth/python",id:"how-to-access-basic-auth/python",title:"python",description:"A Solution",source:"@site/docs/13-how-to-access-basic-auth/python.md",sourceDirName:"13-how-to-access-basic-auth",slug:"/how-to-access-basic-auth/python",permalink:"/docs/how-to-access-basic-auth/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/13-how-to-access-basic-auth/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"python",level:1,hide_sidebar:!0,publish_date:"2016-11-17T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By specifying the username and password ",(0,i.kt)("em",{parentName:"p"},"in the URL")," when visiting a page with Selenium, we can side-step the system level dialog box and avoid setting up a proxy server. This approach will work for both HTTP or HTTPS pages."),(0,i.kt)("p",null,"Let's take a look at an example."),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"Let's start by requiring our requisite libraries (",(0,i.kt)("inlineCode",{parentName:"p"},"import unittest")," for our test framework and ",(0,i.kt)("inlineCode",{parentName:"p"},"from selenium import webdriver")," to drive the browser), declare our test class, and wire up some test ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: basic_auth_1.py\n\nimport unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\nclass BasicAuth1(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n\n    def tearDown(self):\n        self.driver.quit()\n")),(0,i.kt)("p",null,"Now to add our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: basic_auth_1.py\n# ...\n    def test_visit_basic_auth_secured_page(self):\n        driver = self.driver\n        driver.get('http://admin:admin@the-internet.herokuapp.com/basic_auth')\n        page_message = driver.find_element(By.CSS_SELECTOR, '.example p').text\n        assert page_message == 'Congratulations! You must have the proper credentials.'\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,i.kt)("p",null,"In the test we're loading the page by passing in the username and password in the front of the URL (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"http://admin:admin@"),"). Once it loads we grab text from the page to make sure we ended up in the right place."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("p",null,"Alternatively, we could have accessed this page as part of the test setup (after creating an instance of Selenium). This would have cached the Basic Auth session in the browser, enabling us to visit the page again without having to specify credentials. This is particularly useful if you have numerous pages behind Basic Auth."),(0,i.kt)("p",null,"Here's what that would look like."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: basic_auth_2.py\nimport unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\n\nclass BasicAuth1(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n        self.driver.get('http://admin:admin@the-internet.herokuapp.com/basic_auth')\n\n    def tearDown(self):\n        self.driver.quit()\n\n    def test_visit_basic_auth_secured_page(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/basic_auth')\n        page_message = driver.find_element(By.CSS_SELECTOR, '.example p').text\n        assert page_message == 'Congratulations! You must have the proper credentials.'\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: If your application serves both HTTP and HTTPS pages from behind Basic Auth then you will need to load one of ",(0,i.kt)("em",{parentName:"strong"},"each")," type before executing your test steps. Otherwise you will get authorization errors when switching between HTTP and HTTPS because the browser can't use Basic Auth credentials interchangeably (e.g. HTTP for HTTPS and vice versa).")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save the first example and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"python basic_auth_1.py"),"), here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page using Basic Auth"),(0,i.kt)("li",{parentName:"ul"},"Get the page text"),(0,i.kt)("li",{parentName:"ul"},"Assert that the text is what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("p",null,"And when you save the second example and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"python basic_auth_2.py"),"), here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page using Basic Auth in the setup"),(0,i.kt)("li",{parentName:"ul"},"Navigate to the Basic Auth page (without providing credentials)"),(0,i.kt)("li",{parentName:"ul"},"Get the page text"),(0,i.kt)("li",{parentName:"ul"},"Assert that the text is what we expect")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip will help save you from getting tripped by Basic Auth when you come across it."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},21005:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:1,hide_sidebar:!0,publish_date:new Date("2015-10-14T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-access-basic-auth/ruby",id:"how-to-access-basic-auth/ruby",title:"ruby",description:"A Solution",source:"@site/docs/13-how-to-access-basic-auth/ruby.md",sourceDirName:"13-how-to-access-basic-auth",slug:"/how-to-access-basic-auth/ruby",permalink:"/docs/how-to-access-basic-auth/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/13-how-to-access-basic-auth/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"ruby",level:1,hide_sidebar:!0,publish_date:"2015-10-14T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By specifying the username and password ",(0,i.kt)("em",{parentName:"p"},"in the URL")," when visiting a page with Selenium, we can a side-step the system level dialog box and avoid setting up a proxy server. This approach will work for both HTTP or HTTPS pages."),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"Let's start by requiring our requisite libraries (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to drive the browser and ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers")," to handle our assertions) and implementing some helper methods (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run"),") to handle our test configuration."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: basic_auth.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Now let's add our test code to the script."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://admin:admin@the-internet.herokuapp.com/basic_auth'\n  page_message = @driver.find_element(css: '.example p').text\n  expect(page_message).to eql 'Congratulations! You must have the proper credentials.'\nend\n")),(0,i.kt)("p",null,"In the test we're loading the page by passing in the username and password in the front of the URL (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"http://admin:admin@"),"). Once it loads we grab text from the page to make sure we ended up in the right place."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("p",null,"Alternatively, we could have accessed this page as part of the test setup (after creating an instance of Selenium). This would have cached the Basic Auth session in the browser, enabling us to visit the page again without having to specify credentials. This is particularly useful if you have numerous pages behind Basic Auth."),(0,i.kt)("p",null,"Here's what that script would look like."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: basic_auth_setup.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\n  @driver.get 'http://admin:admin@the-internet.herokuapp.com/basic_auth'\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n\nrun do\n  @driver.get 'http://the-internet.herokuapp.com/basic_auth'\n  page_message = @driver.find_element(css: '.example p').text\n  expect(page_message).to eql 'Congratulations! You must have the proper credentials.'\nend\n")),(0,i.kt)("p",null,"NOTE: If your application serves both HTTP and HTTPS pages from behind Basic Auth then you will need to load one of each type before executing your test steps. Otherwise you will get authorization errors when switching between HTTP and HTTPS because the browser can't use Basic Auth credentials interchangeably (e.g. HTTP for HTTPS and vice versa).__"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save the first example and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby basic_auth.rb"),"), here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page using Basic Auth"),(0,i.kt)("li",{parentName:"ul"},"Get the page text"),(0,i.kt)("li",{parentName:"ul"},"Assert that the text is what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("p",null,"And when you save the second example and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby basic_auth_setup.rb"),"), here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page using Basic Auth in the setup"),(0,i.kt)("li",{parentName:"ul"},"Navigate to the Basic Auth page (without providing credentials)"),(0,i.kt)("li",{parentName:"ul"},"Get the page text"),(0,i.kt)("li",{parentName:"ul"},"Assert that the text is what we expect")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully these examples will help save you from getting any setbacks from Basic Auth when you come across it."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},62900:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"download-secure-files/csharp",id:"download-secure-files/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/15-download-secure-files/csharp.md",sourceDirName:"15-download-secure-files",slug:"/download-secure-files/csharp",permalink:"/docs/download-secure-files/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/15-download-secure-files/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},50384:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"download-secure-files/java",id:"download-secure-files/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/15-download-secure-files/java.md",sourceDirName:"15-download-secure-files",slug:"/download-secure-files/java",permalink:"/docs/download-secure-files/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/15-download-secure-files/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},19537:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"download-secure-files/javascript",id:"download-secure-files/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/15-download-secure-files/javascript.md",sourceDirName:"15-download-secure-files",slug:"/download-secure-files/javascript",permalink:"/docs/download-secure-files/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/15-download-secure-files/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},32628:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"download-secure-files/python",id:"download-secure-files/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/15-download-secure-files/python.md",sourceDirName:"15-download-secure-files",slug:"/download-secure-files/python",permalink:"/docs/download-secure-files/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/15-download-secure-files/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},11396:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:3,hide_sidebar:!0,publish_date:new Date("2015-08-20T00:00:00.000Z"),last_update:{date:new Date("2023-03-27T00:00:00.000Z")}},o=void 0,l={unversionedId:"download-secure-files/ruby",id:"download-secure-files/ruby",title:"ruby",description:"A Solution",source:"@site/docs/15-download-secure-files/ruby.md",sourceDirName:"15-download-secure-files",slug:"/download-secure-files/ruby",permalink:"/docs/download-secure-files/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/15-download-secure-files/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1679875200,formattedLastUpdatedAt:"Mar 27, 2023",frontMatter:{language:"ruby",level:3,hide_sidebar:!0,publish_date:"2015-08-20T00:00:00.000Z",last_update:{date:"2023-03-27T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"To access secure files with our HTTP library we'll need to pull the authenticated session information out of Selenium's cookie store and pass it into the HTTP library when we perform the request."),(0,i.kt)("p",null,"Let's continue with some examples."),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"First let's require our libraries (",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to drive the browser, ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers")," for our assertions, and ",(0,i.kt)("inlineCode",{parentName:"p"},"rest-client")," for our HTTP requests) and wire up some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: secure_download.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\nrequire 'rest-client'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Next we'll write our test. In it we'll want to access a page of download links that is behind some form of authentication (Basic HTTP Authentication in this case)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://admin:admin@the-internet.herokuapp.com/download_secure'\n  cookie = @driver.manage.cookie_named 'rack.session'\n  link = @driver.find_element(css: '.example a').attribute('href')\n  response = RestClient.head link, cookie: { cookie[:name] => cookie[:value] }\n  expect(response.headers[:content_type]).to eql('application/octet-stream')\n  expect(response.headers[:content_length].to_i).to be > 0\nend\n")),(0,i.kt)("p",null,"Once the page loads, we grab the authentication session cookie from Selenium along with the URL for the first file listed. Then we fire up our HTTP library and perform a ",(0,i.kt)("inlineCode",{parentName:"p"},"HEAD")," request using both the download link and the session cookie. We then check the response headers to make sure the file is the correct type and that it's not empty."),(0,i.kt)("p",null,"If we run this script, it will pass. But, it's only limited to the first download link, and it assumes that the file will always be whatever we declared (in this case 'application/octet-stream')."),(0,i.kt)("p",null,"In the next example, let's update the script to remedy these issues."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("p",null,"Here, we will update our previous example code to make the script more robust, by adding a helper method just before our test code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"def content_type(file)\n  file = File.basename(file)\n  if file.include? '.txt'\n    'application/octet-stream'\n  elsif file.include? '.pdf'\n    'application/pdf'\n  else\n    raise 'Unknown file type'\n  end\nend\n")),(0,i.kt)("p",null,"With this new helper method added, we can tease out the filename from a given URL and return the correct content type. If the file type isn't recognized, then we'll stop the test and raise an exception."),(0,i.kt)("p",null,"Now we can update our test code to use this method in addition to grabbing all download links from the page and iterating through them."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://admin:admin@the-internet.herokuapp.com/download_secure'\n  cookie = @driver.manage.cookie_named 'rack.session'\n  links = @driver.find_elements(css: '.example a')\n  links.map! { |link| link.attribute('href') }\n  links.each do |link|\n    response = RestClient.head link, cookie: { cookie[:name] => cookie[:value] }\n    expect(response.headers[:content_type]).to eql(content_type(link))\n    expect(response.headers[:content_length].to_i).to be > 0\n  end\nend\n")),(0,i.kt)("p",null,"By using ",(0,i.kt)("inlineCode",{parentName:"p"},"find_elements")," (plural) we get ",(0,i.kt)("em",{parentName:"p"},"all")," of the download links (returned in an array). We then use ",(0,i.kt)("inlineCode",{parentName:"p"},"map!")," to update the array of download links to give us ",(0,i.kt)("em",{parentName:"p"},"just")," the URLs (instead of a collection of Selenium objects which contain URLs). After that, we're able to iterate over the array of URLs, performing a ",(0,i.kt)("inlineCode",{parentName:"p"},"HEAD")," request and assertions for each one (but this time, we're using our new ",(0,i.kt)("inlineCode",{parentName:"p"},"content_type")," helper method)."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby secure_download.rb")," from the command-line), here is what will happen."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Browser opens"),(0,i.kt)("li",{parentName:"ul"},"The secure file downloads page loads"),(0,i.kt)("li",{parentName:"ul"},"The authenticated cookie information is retrieved"),(0,i.kt)("li",{parentName:"ul"},"All download URLs on the page are found"),(0,i.kt)("li",{parentName:"ul"},"HTTP library performs a HEAD request against the download link using the retrieved cookie information"),(0,i.kt)("li",{parentName:"ul"},"The response headers are checked to make sure the file is the correct type and not empty"),(0,i.kt)("li",{parentName:"ul"},"The previous two steps are repeated until all download links are verified"),(0,i.kt)("li",{parentName:"ul"},"Browser closes")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"From here, it's simple enough to add in additional content types and file types. And while this example demonstrates accessing files behind Basic HTTP Authentication it should also work with files behind form-based authentication."),(0,i.kt)("p",null,"Hopefully this helps save you some time, enabling you to build a more lean and fast set of download tests."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},87016:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:2,hide_sidebar:!0,publish_date:new Date("2016-06-13T00:00:00.000Z"),last_update:{date:new Date("2023-03-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"take-screenshot-on-failure/csharp",id:"take-screenshot-on-failure/csharp",title:"csharp",description:"A Solution",source:"@site/docs/16-take-screenshot-on-failure/csharp.md",sourceDirName:"16-take-screenshot-on-failure",slug:"/take-screenshot-on-failure/csharp",permalink:"/docs/take-screenshot-on-failure/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/16-take-screenshot-on-failure/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680134400,formattedLastUpdatedAt:"Mar 30, 2023",frontMatter:{language:"csharp",level:2,hide_sidebar:!0,publish_date:"2016-06-13T00:00:00.000Z",last_update:{date:"2023-03-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"A simple way to gain insight into your test failures is to capture screenshots at the moment of failure. This is something that is fairly quick to add to your tests, and allows you to review these error messages."),(0,i.kt)("p",null,"Here is an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Let's start by including our requisite classes for our test framework (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"NUnit.Framework"),"), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenQA.Selenium"),", etc.), accessing C#'s image functionality (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Drawing.Imaging"),"), and start our class off with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: Screenshot.cs\nusing NUnit.Framework;\nusing NUnit.Framework.Interfaces;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\nusing System.Drawing.Imaging;\n\npublic class Screenshot\n{\n    IWebDriver Driver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        if (TestContext.CurrentContext.Result.Outcome.Status.Equals(TestStatus.Failed))\n            TakeScreenshot();\n\n        Driver.Quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Notice in the teardown we have a conditional statement before we call ",(0,i.kt)("inlineCode",{parentName:"p"},"Driver.Quit();"),". It's checking to see if the test failed, if it has then it will take a screenshot. Right now the method we're referencing isn't declared. Let's add it now."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: Screenshot.cs\n// ...\n    private void TakeScreenshot()\n    {\n        string SaveLocation = @"C:\\Temp\\" +\n                               "failshot_" +\n                               TestContext.CurrentContext.Test.FullName +\n                               ".png";\n        ITakesScreenshot ScreenshotDriver = (ITakesScreenshot) Driver;\n        ScreenshotDriver.GetScreenshot().SaveAsFile(SaveLocation, ScreenshotImageFormat.Png);\n    }\n// ...\n')),(0,i.kt)("p",null,"There are numerous ways to make the filename unique for the screenshot (e.g., unique ID, timestamp, etc.). The simplest way to get started is with the full test name (e.g., test class name and test method name), which we've done. We also specified the save location on disk using a string literal (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},'@"C:\\Temp"'),"), feel free to change it to suit your needs."),(0,i.kt)("p",null,"The rest is a simple matter of casting the ",(0,i.kt)("inlineCode",{parentName:"p"},"Driver")," as an ",(0,i.kt)("inlineCode",{parentName:"p"},"ITakeScreenshot")," object and calling ",(0,i.kt)("inlineCode",{parentName:"p"},"GetScreenshot().SaveAsFile")," (specifying the save location and image format -- which is PNG in this case)."),(0,i.kt)("p",null,"Now let's wire up our test with a forced failure."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: Screenshot.cs\n// ...\n    [Test]\n    public void ScreenShotOnFailure()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com");\n        Assert.That(false.Equals(true));\n    }\n}\n')),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (",(0,i.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\Screenshot.sln")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Test Fails"),(0,i.kt)("li",{parentName:"ul"},"Selenium Captures a screenshot in ",(0,i.kt)("inlineCode",{parentName:"li"},"C:\\Temp")," with the name ",(0,i.kt)("inlineCode",{parentName:"li"},"failshot_Screenshot.ScreenShotOnFailure.png")),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Having a screenshot to aid in troubleshooting failing tests along with a stack trace helps in having more insight."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},69186:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:2,hide_sidebar:!0,publish_date:new Date("2015-11-11T00:00:00.000Z"),last_update:{date:new Date("2023-04-03T00:00:00.000Z")}},o=void 0,l={unversionedId:"take-screenshot-on-failure/java",id:"take-screenshot-on-failure/java",title:"java",description:"A Solution",source:"@site/docs/16-take-screenshot-on-failure/java.md",sourceDirName:"16-take-screenshot-on-failure",slug:"/take-screenshot-on-failure/java",permalink:"/docs/take-screenshot-on-failure/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/16-take-screenshot-on-failure/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:168048e4,formattedLastUpdatedAt:"Apr 3, 2023",frontMatter:{language:"java",level:2,hide_sidebar:!0,publish_date:"2015-11-11T00:00:00.000Z",last_update:{date:"2023-04-03T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"A simple way to gain insight into your test failures is to capture screenshots at the moment of failure. This is something that is fairly quick to add to your tests, and allows you to review these error messages."),(0,i.kt)("p",null,"Here is an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Let's start by importing our requisite classes (for annotations (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.junit.After"),", etc.), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.openqa.selenium.WebDriver"),", etc.), and matchers for our assertions (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.hamcrest.CoreMatchers"),", etc.)) and start our class with a setup method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// filename: Screenshot.java\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.TestRule;\nimport org.junit.rules.TestWatcher;\nimport org.junit.runner.Description;\nimport org.openqa.selenium.OutputType;\nimport org.openqa.selenium.TakesScreenshot;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport java.io.File;\nimport java.io.IOException;\nimport org.apache.commons.io.FileUtils;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.hamcrest.MatcherAssert.assertThat;\n\npublic class Screenshot {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n    }\n// ...\n")),(0,i.kt)("p",null,"We still need to handle our teardown. But in order to get the timing right with screenshots on failure we'll need to break from the norm of a simple ",(0,i.kt)("inlineCode",{parentName:"p"},"@After")," annotation. For this we'll look to a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/junit-team/junit/wiki/Rules"},"JUnit Rule"),", specifically the ",(0,i.kt)("a",{parentName:"p",href:"http://junit.org/apidocs/org/junit/rules/TestWatcher.html"},"TestWatcher"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: Screenshot.java\n// ...\n    @Rule\n    public TestRule watcher = new TestWatcher() {\n        @Override\n        protected void failed(Throwable throwable, Description description) {\n            File scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);\n            try {\n                FileUtils.copyFile(scrFile,\n                        new File("failshot_"\n                                + description.getClassName()\n                                + "_" + description.getMethodName()\n                                + ".png"));\n            } catch (IOException exception) {\n                exception.printStackTrace();\n            }\n        }\n\n        @Override\n        protected void finished(Description description) {\n            driver.quit();\n        }\n    };\n// ...\n')),(0,i.kt)("p",null,"With a ",(0,i.kt)("inlineCode",{parentName:"p"},"TestWatcher")," we easily gain access to a test after it's failed (e.g., in the ",(0,i.kt)("inlineCode",{parentName:"p"},"failed")," method) and when the test completes regardless of it's outcome (e.g., the ",(0,i.kt)("inlineCode",{parentName:"p"},"finished")," method). So for our teardown we issue ",(0,i.kt)("inlineCode",{parentName:"p"},"driver.quit();")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"finished"),". And when there's a failure we capture a screenshot and write it to disk (in the current working directory) in ",(0,i.kt)("inlineCode",{parentName:"p"},"failed"),"."),(0,i.kt)("p",null,"There are numerous ways to make the filename unique (e.g., unique ID, timestamp, etc.). The simplest way to get started is with the test class name and the test method name, which we've done."),(0,i.kt)("p",null,"Now let's wire up our test with a forced failure."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: Screenshot.java\n// ...\n    @Test\n    public void OnError() {\n        driver.get("http://the-internet.herokuapp.com");\n        assertThat(false, is(true));\n    }\n\n}\n')),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (",(0,i.kt)("inlineCode",{parentName:"p"},"mvn clean test")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Fail"),(0,i.kt)("li",{parentName:"ul"},"Capture a screenshot in the current working directory with the name ",(0,i.kt)("inlineCode",{parentName:"li"},"failshot_Screenshot_OnError.png")),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Having a screenshot to aid in troubleshooting failing tests along with a stack trace helps in having more insight."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},12121:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:2,hide_sidebar:!0,publish_date:new Date("2015-07-08T00:00:00.000Z"),last_update:{date:new Date("2023-03-09T00:00:00.000Z")}},o=void 0,l={unversionedId:"take-screenshot-on-failure/javascript",id:"take-screenshot-on-failure/javascript",title:"javascript",description:"A Solution",source:"@site/docs/16-take-screenshot-on-failure/javascript.md",sourceDirName:"16-take-screenshot-on-failure",slug:"/take-screenshot-on-failure/javascript",permalink:"/docs/take-screenshot-on-failure/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/16-take-screenshot-on-failure/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:167832e4,formattedLastUpdatedAt:"Mar 9, 2023",frontMatter:{language:"javascript",level:2,hide_sidebar:!0,publish_date:"2015-07-08T00:00:00.000Z",last_update:{date:"2023-03-09T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"A simple way to gain insight into your test failures is to capture screenshots at the moment of failure. This is something that is fairly quick to add to your tests, and allows you to review these error messages."),(0,i.kt)("p",null,"Here is an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Let's start by importing our requisite libraries and wire up some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/screenshot.spec.js\nconst assert = require("assert");\nconst { Builder, By } = require("selenium-webdriver");\nconst fs = require("fs");\nconst path = require("path");\n\ndescribe("Screenshot", function() {\n  let driver;\n\n  beforeEach(async function() { this.timeout(60000) driver = await new Builder().forBrowser("chrome").build();\n  });\n\n  afterEach(async function() {\n    if (this.currentTest.state !== "passed") {\n      const testName = this.currentTest.fullTitle().replace(/\\s/g, "-");\n      const fileName = path.join(__dirname, `screenshot_${testName}.jpg`);\n      fs.writeFileSync(fileName, await driver.takeScreenshot(), "base64");\n    }\n    await driver.quit();\n  });\n// ...\n')),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"afterEach")," we check to see if the test was unsuccessful (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},'this.currenTest.state !== "passed"'),"). If not, then the test has either failed or errored and we capture a screenshot through the help of Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},".takeScreenshot()")," function. To save it to disk, we use ",(0,i.kt)("inlineCode",{parentName:"p"},"fs")," and its ",(0,i.kt)("inlineCode",{parentName:"p"},"writeFileSync")," function. It takes the full path to save to, the payload (e.g., the screenshot), and the encoding (which for the image is ",(0,i.kt)("inlineCode",{parentName:"p"},'"base64"'),")."),(0,i.kt)("p",null,"To make the filename unique we use the test name after cleaning it up (by replacing spaces with ",(0,i.kt)("inlineCode",{parentName:"p"},"-"),"). When this command executes it will save an image file (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"screenshot_Screenshot-on-failure.jpg"),") to the local system in the current working directory."),(0,i.kt)("p",null,"Now to wire up a test which will fail."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/screenshot.spec.js\n// ...\n  it("on failure", async function() {\n    await driver.get("http://the-internet.herokuapp.com");\n    assert(true === false);\n  });\n});\n')),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (",(0,i.kt)("inlineCode",{parentName:"p"},"mocha")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Load the homepage of ",(0,i.kt)("a",{parentName:"li",href:"http://github.com/tourdedave/the-internet"},"the-internet")),(0,i.kt)("li",{parentName:"ul"},"Fail on the assertion"),(0,i.kt)("li",{parentName:"ul"},"Capture a screenshot in the current working directory"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Having a screenshot to aid in troubleshooting failing tests along with a stack trace helps in having more insight."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},58357:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:2,hide_sidebar:!0,publish_date:new Date("2016-11-26T00:00:00.000Z"),last_update:{date:new Date("2023-03-14T00:00:00.000Z")}},o=void 0,l={unversionedId:"take-screenshot-on-failure/python",id:"take-screenshot-on-failure/python",title:"python",description:"A Solution",source:"@site/docs/16-take-screenshot-on-failure/python.md",sourceDirName:"16-take-screenshot-on-failure",slug:"/take-screenshot-on-failure/python",permalink:"/docs/take-screenshot-on-failure/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/16-take-screenshot-on-failure/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1678752e3,formattedLastUpdatedAt:"Mar 14, 2023",frontMatter:{language:"python",level:2,hide_sidebar:!0,publish_date:"2016-11-26T00:00:00.000Z",last_update:{date:"2023-03-14T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"A simple way to gain insight into your test failures is to capture screenshots at the moment of failure. And it's a quick and easy thing to add to your tests."),(0,i.kt)("p",null,"Let's start with an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Let's start by importing our requisite libraries (",(0,i.kt)("inlineCode",{parentName:"p"},"import unittest")," for our test framework, ",(0,i.kt)("inlineCode",{parentName:"p"},"from selenium import webdriver")," to drive the browser, and ",(0,i.kt)("inlineCode",{parentName:"p"},"import sys")," to determine when there's a test failure), declare our test class, and write test ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# filename: screenshot.py\nimport sys\nimport unittest\nfrom selenium import webdriver\n\n\nclass ScreenShotOnFailure(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Chrome()\n\n    def tearDown(self):\n        if sys.exc_info():\n            self.driver.save_screenshot("failshot_%s.png" % self._testMethodName)\n        self.driver.quit()\n# ...\n')),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown")," we check to see if ",(0,i.kt)("inlineCode",{parentName:"p"},"sys.exc_info()")," exists. If it does, then there's been a test failure and we capture a screenshot through the help of Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},".save_screenshot")," method. ",(0,i.kt)("inlineCode",{parentName:"p"},".save_screenshot")," accepts a filename as a string (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"'failshot.png'"),"). To make the filename unique we use the test method name (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"self._testMethodName"),"). When this command executes it will save an image file to the local system in the current working directory."),(0,i.kt)("p",null,"Now to wire up a test which will fail."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: screenshot.py\n# ...\n    def test_example_1(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com')\n        assert driver.title == 'blah blah blah'\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (",(0,i.kt)("inlineCode",{parentName:"p"},"python screenshot.py")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Load the homepage of ",(0,i.kt)("a",{parentName:"li",href:"http://github.com/tourdedave/the-internet"},"the-internet")),(0,i.kt)("li",{parentName:"ul"},"Check the text of the page header and fail"),(0,i.kt)("li",{parentName:"ul"},"Output a failure message in the terminal"),(0,i.kt)("li",{parentName:"ul"},"Capture a screenshot in the current working directory"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Having a screenshot to aid in troubleshooting failing tests along with a stack trace helps in having more insight. Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"import sys")," determines when there's been a test failure."),(0,i.kt)("p",null,"If you want truly unique filenames, then you should use a unique ID in the filename instead of a timestamp (e.g., something like ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/assaf/uuid"},(0,i.kt)("inlineCode",{parentName:"a"},"uuid")),"). This will prevent screenshots from getting overwritten when you have two (or more) tests taking screenshots at the same time."),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},55028:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:2,hide_sidebar:!0,publish_date:new Date("2015-07-08T00:00:00.000Z"),last_update:{date:new Date("2023-02-28T00:00:00.000Z")}},o=void 0,l={unversionedId:"take-screenshot-on-failure/ruby",id:"take-screenshot-on-failure/ruby",title:"ruby",description:"A Solution",source:"@site/docs/16-take-screenshot-on-failure/ruby.md",sourceDirName:"16-take-screenshot-on-failure",slug:"/take-screenshot-on-failure/ruby",permalink:"/docs/take-screenshot-on-failure/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/16-take-screenshot-on-failure/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677542400,formattedLastUpdatedAt:"Feb 28, 2023",frontMatter:{language:"ruby",level:2,hide_sidebar:!0,publish_date:"2015-07-08T00:00:00.000Z",last_update:{date:"2023-02-28T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"A simple way to gain insight into your test failures is to capture screenshots at the moment of failure. This is something that is fairly quick to add to your tests, and allows you to review these error messages."),(0,i.kt)("p",null,"Here is an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Let's start by including our requisite libraries (",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to drive the browser and ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers")," for our assertion) and wire up some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setup")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: screenshot.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n")),(0,i.kt)("p",null,"Next we'll want to create a method to execute our tests. This is where we'll capture when a failure occurs and take a screenshot."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'def run\n  setup\n  begin\n    yield\n  rescue RSpec::Expectations::ExpectationNotMetError => error\n    puts error.message\n    @driver.save_screenshot "./#{Time.now.strftime("failshot__%d_%m_%Y__%H_%M_%S")}.png"\n  end\n  teardown\nend\n')),(0,i.kt)("p",null,"After calling ",(0,i.kt)("inlineCode",{parentName:"p"},"setup")," and before calling ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown")," we wrap our test code execution (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"yield"),") in a ",(0,i.kt)("inlineCode",{parentName:"p"},"rescue")," block. This handles the exception that a test failure will return. When a failure occurs the error message will get outputted to the terminal (just like it normally would) but now we are also capturing a screenshot through the help of Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},".save_screenshot")," method."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},".save_screenshot")," accepts a filename as a string (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"'failshot.png'"),"). When this command executes it will save an image file to your local system in the current working directory."),(0,i.kt)("p",null,"Note the use of ",(0,i.kt)("inlineCode",{parentName:"p"},"Time.now.strftime")," in the screenshot filename. This is adding a timestamp (down to the second) to the filename. This provides a (reasonably) unique file name and has the added benefit of listing the files in the order taken."),(0,i.kt)("p",null,"Now let's wire up our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com'\n  expect(@driver.find_element(css: 'h1').text).to eql 'blah blah blah'\nend\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If we save this file and run it (",(0,i.kt)("inlineCode",{parentName:"p"},"ruby screenshot.rb")," from the command-line) here is what would happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Load the homepage of ",(0,i.kt)("a",{parentName:"li",href:"http://github.com/tourdedave/the-internet"},"the-internet")),(0,i.kt)("li",{parentName:"ul"},"Check the text of the page header and fail"),(0,i.kt)("li",{parentName:"ul"},"Output a failure message in the terminal"),(0,i.kt)("li",{parentName:"ul"},"Capture a timestamped screenshot in the current working directory"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"For more info on ",(0,i.kt)("inlineCode",{parentName:"p"},"strftime")," (a.k.a. String Formatted Time) go ",(0,i.kt)("a",{parentName:"p",href:"http://apidock.com/ruby/DateTime/strftime"},"here"),"."),(0,i.kt)("p",null,"But if you want truly unique filenames, then you should use a unique ID in the filename instead of a timestamp (e.g., something like ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/assaf/uuid"},(0,i.kt)("inlineCode",{parentName:"a"},"uuid")),"). This will prevent screenshots from getting overwritten when you have two (or more) tests taking screenshots at the same time."),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},43056:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"retrieve-http-status-codes/csharp",id:"retrieve-http-status-codes/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/17-retrieve-http-status-codes/csharp.md",sourceDirName:"17-retrieve-http-status-codes",slug:"/retrieve-http-status-codes/csharp",permalink:"/docs/retrieve-http-status-codes/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/17-retrieve-http-status-codes/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},63365:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"retrieve-http-status-codes/java",id:"retrieve-http-status-codes/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/17-retrieve-http-status-codes/java.md",sourceDirName:"17-retrieve-http-status-codes",slug:"/retrieve-http-status-codes/java",permalink:"/docs/retrieve-http-status-codes/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/17-retrieve-http-status-codes/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},49711:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"retrieve-http-status-codes/javascript",id:"retrieve-http-status-codes/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/17-retrieve-http-status-codes/javascript.md",sourceDirName:"17-retrieve-http-status-codes",slug:"/retrieve-http-status-codes/javascript",permalink:"/docs/retrieve-http-status-codes/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/17-retrieve-http-status-codes/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},68232:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"retrieve-http-status-codes/python",id:"retrieve-http-status-codes/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/17-retrieve-http-status-codes/python.md",sourceDirName:"17-retrieve-http-status-codes",slug:"/retrieve-http-status-codes/python",permalink:"/docs/retrieve-http-status-codes/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/17-retrieve-http-status-codes/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},34744:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:3,hide_sidebar:!0,publish_date:new Date("2015-10-15T00:00:00.000Z"),last_update:{date:new Date("2023-04-06T00:00:00.000Z")}},o=void 0,l={unversionedId:"retrieve-http-status-codes/ruby",id:"retrieve-http-status-codes/ruby",title:"ruby",description:"A Solution",source:"@site/docs/17-retrieve-http-status-codes/ruby.md",sourceDirName:"17-retrieve-http-status-codes",slug:"/retrieve-http-status-codes/ruby",permalink:"/docs/retrieve-http-status-codes/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/17-retrieve-http-status-codes/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680739200,formattedLastUpdatedAt:"Apr 6, 2023",frontMatter:{language:"ruby",level:3,hide_sidebar:!0,publish_date:"2015-10-15T00:00:00.000Z",last_update:{date:"2023-04-06T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"The tried and true approach that Selenium Committers and Practitioners recommend is to use a proxy server. With it, you will be able to watch and manipulate network traffic to and from the application you're testing. Thus giving you access to a whole host of functionality that isn't available otherwise."),(0,i.kt)("p",null,"Let's step through an example using ",(0,i.kt)("a",{parentName:"p",href:"http://bmp.lightbody.net/"},"BrowserMob Proxy"),"."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"First we need to download a copy of ",(0,i.kt)("a",{parentName:"p",href:"http://bmp.lightbody.net/"},"BrowserMob Proxy"),"."),(0,i.kt)("p",null,"Next we'll create a script and pull in our requisite libraries (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to drive the browser, ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," and it's matchers for our assertion, and the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jarib/browsermob-proxy-rb"},(0,i.kt)("inlineCode",{parentName:"a"},"browsermob/proxy"))," library to control the proxy server)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: status_codes.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\nrequire 'browsermob/proxy'\n")),(0,i.kt)("p",null,"Now let's create a method to prepare the proxy for use with Selenium. In it we start the proxy server, configure a browser profile to use it (for Firefox in this case), and return the profile object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"def configure_proxy\n  server = BrowserMob::Proxy::Server.new(\n    File.join(Dir.pwd, 'browsermob-proxy-2.0.0/bin/browsermob-proxy'))\n  @proxy = server.start.create_proxy\n  profile = Selenium::WebDriver::Firefox::Profile.new\n  profile.proxy = @proxy.selenium_proxy\n  profile\nend\n")),(0,i.kt)("p",null,"Next we wire up some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods to handle our test configuration."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"def setup\n  @driver = Selenium::WebDriver.for :firefox, profile: configure_proxy\nend\n\ndef teardown\n  @driver.quit\n  @proxy.close\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"setup")," we use the ",(0,i.kt)("inlineCode",{parentName:"p"},"configure_proxy")," method when specifying the profile object. And we close the proxy in ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown")," (after quitting the Selenium session)."),(0,i.kt)("p",null,"Now let's create a helper method to pull the status code out of the browser's ",(0,i.kt)("a",{parentName:"p",href:"http://www.softwareishard.com/blog/har-12-spec/"},"HTTP Archive")," (a.k.a. HAR) when an action is performed on the page."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"def retrieve_status_code\n  @proxy.new_har\n  yield\n  @proxy.har.entries.first.response.status\nend\n")),(0,i.kt)("p",null,"Now we're ready to wire up our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  status_code = retrieve_status_code do\n    @driver.get 'http://the-internet.herokuapp.com/status_codes/404'\n  end\n\n  expect(status_code).to eql 404\nend\n")),(0,i.kt)("p",null,"When visiting the page we are passing the Selenium command to the ",(0,i.kt)("inlineCode",{parentName:"p"},"retrieve_status_code")," method which returns the HTTP response code. We store this in a ",(0,i.kt)("inlineCode",{parentName:"p"},"status_code")," variable and use it to check that the response code is what we expect (",(0,i.kt)("inlineCode",{parentName:"p"},"404"),")."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE:")," If you get an error when running your test, be sure to append ",(0,i.kt)("inlineCode",{parentName:"p"},"log: true")," when creating an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"Browsermob::Proxy::Server"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"  server = BrowserMob::Proxy::Server.new(\n    File.join(Dir.pwd, 'browsermob-proxy-2.0.0/bin/browsermob-proxy'), log: true)\n")),(0,i.kt)("p",null,"Now when you run your test, you will see more detailed information as to why the server was unable to start."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby status_codes.rb")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Proxy server starts"),(0,i.kt)("li",{parentName:"ul"},"Proxy server session created"),(0,i.kt)("li",{parentName:"ul"},"Browser opens"),(0,i.kt)("li",{parentName:"ul"},"Visit the URL"),(0,i.kt)("li",{parentName:"ul"},"Retrieve the HTTP Status Code from loading the page"),(0,i.kt)("li",{parentName:"ul"},"Check that the status code is what was expected"),(0,i.kt)("li",{parentName:"ul"},"Browser closes"),(0,i.kt)("li",{parentName:"ul"},"Proxy session closes")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"This tip was inspired by ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/jimevansmusic"},"Jim Evans'")," multi-part blog post series on doing the same thing in C# with Fiddler (",(0,i.kt)("a",{parentName:"p",href:"http://jimevansmusic.blogspot.com/2013/08/implementing-webdriver-http-status.html"},"1"),", ",(0,i.kt)("a",{parentName:"p",href:"http://jimevansmusic.blogspot.com/2013/08/implementing-http-status-codes-in.html"},"2"),", ",(0,i.kt)("a",{parentName:"p",href:"http://jimevansmusic.blogspot.com/2013/08/implementing-http-status-codes-in_17.html"},"3"),") which was in response to ",(0,i.kt)("a",{parentName:"p",href:"https://code.google.com/p/selenium/issues/detail?id=141"},"Selenium Issue 141"),". Thanks Jim!"),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."))}h.isMDXComponent=!0},44127:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-figure-out-what-to-update/csharp",id:"how-to-figure-out-what-to-update/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/18-how-to-figure-out-what-to-update/csharp.md",sourceDirName:"18-how-to-figure-out-what-to-update",slug:"/how-to-figure-out-what-to-update/csharp",permalink:"/docs/how-to-figure-out-what-to-update/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/18-how-to-figure-out-what-to-update/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},50990:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-figure-out-what-to-update/java",id:"how-to-figure-out-what-to-update/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/18-how-to-figure-out-what-to-update/java.md",sourceDirName:"18-how-to-figure-out-what-to-update",slug:"/how-to-figure-out-what-to-update/java",permalink:"/docs/how-to-figure-out-what-to-update/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/18-how-to-figure-out-what-to-update/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},89477:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-figure-out-what-to-update/javascript",id:"how-to-figure-out-what-to-update/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/18-how-to-figure-out-what-to-update/javascript.md",sourceDirName:"18-how-to-figure-out-what-to-update",slug:"/how-to-figure-out-what-to-update/javascript",permalink:"/docs/how-to-figure-out-what-to-update/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/18-how-to-figure-out-what-to-update/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},11302:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-figure-out-what-to-update/python",id:"how-to-figure-out-what-to-update/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/18-how-to-figure-out-what-to-update/python.md",sourceDirName:"18-how-to-figure-out-what-to-update",slug:"/how-to-figure-out-what-to-update/python",permalink:"/docs/how-to-figure-out-what-to-update/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/18-how-to-figure-out-what-to-update/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},20275:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:1,hide_sidebar:!0,publish_date:new Date("2015-10-13T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-figure-out-what-to-update/ruby",id:"how-to-figure-out-what-to-update/ruby",title:"ruby",description:"A Solution",source:"@site/docs/18-how-to-figure-out-what-to-update/ruby.md",sourceDirName:"18-how-to-figure-out-what-to-update",slug:"/how-to-figure-out-what-to-update/ruby",permalink:"/docs/how-to-figure-out-what-to-update/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/18-how-to-figure-out-what-to-update/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"ruby",level:1,hide_sidebar:!0,publish_date:"2015-10-13T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"What To Do With The Answers",id:"what-to-do-with-the-answers",level:2},{value:"Question 1 - Money/Value",id:"question-1---moneyvalue",level:3},{value:"Question 2 - Usage Data",id:"question-2---usage-data",level:3},{value:"Question 3 - Browsers",id:"question-3---browsers",level:3},{value:"Question 4 - Risky Bits",id:"question-4---risky-bits",level:3},{value:"Now You Are Ready",id:"now-you-are-ready",level:2},{value:"Summary",id:"summary",level:2},{value:"About the Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"A great way to increase your chances of automated web testing success is to map out a testing strategy. The best way to do this is to answer these four questions:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"How does your business make money?"),(0,i.kt)("li",{parentName:"ol"},"How do your users use your application?"),(0,i.kt)("li",{parentName:"ol"},"What browsers are your users using?"),(0,i.kt)("li",{parentName:"ol"},"What things have broken in the application before?")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: for organizations that don't deal ",(0,i.kt)("em",{parentName:"strong"},"directly")," in dollars and cents (e.g. non-profits, federal agencies, etc.) you should focus on how the application generates value for the end user.")),(0,i.kt)("p",null,"After answering these questions you'll have a better understanding of the critical functionality and relevant browsers for the application you're testing. This will help you focus your test automation efforts on the things that matter most."),(0,i.kt)("p",null,"You'll want to keep track of these items somehow -- the recommended approach is to use a prioritized backlog."),(0,i.kt)("h2",{id:"what-to-do-with-the-answers"},"What To Do With The Answers"),(0,i.kt)("h3",{id:"question-1---moneyvalue"},"Question 1 - Money/Value"),(0,i.kt)("p",null,"Every company's application makes money (or generates value) through a core set of functionality -- a.k.a. a 'funnel'. Your answers to this question will help you determine what functionality makes up the funnel. This will be your highest priority for test automation."),(0,i.kt)("h3",{id:"question-2---usage-data"},"Question 2 - Usage Data"),(0,i.kt)("p",null,"There can be a big difference between how you think your application is used  and how your users actually use it. Odds are your application offers a robust set of functionality that grows well beyond the core functionality of the funnel."),(0,i.kt)("p",null,"Your answers to this question will help you determine what features are highly used and lightly used. Add the highly used items onto your automation backlog based on order of use below the answers to question 1."),(0,i.kt)("h3",{id:"question-3---browsers"},"Question 3 - Browsers"),(0,i.kt)("p",null,"Now that you know what functionality is business critical and widely adopted by your users, you need to determine what browsers to focus your automated web testing efforts on. Your usage data will tell you this as well. It will help you determine which browsers you can reasonably avoid testing in (e.g. based on non-existent or low usage numbers)."),(0,i.kt)("p",null,"Note the top 2 browsers (or 3 depending on your numbers), but focus on the top 1 for now. This is the browser you will start writing your automated tests in."),(0,i.kt)("h3",{id:"question-4---risky-bits"},"Question 4 - Risky Bits"),(0,i.kt)("p",null,"To round out the strategy it is best to think about what things have broken in the application before. You might be able to glean some of this information from a defect tracker but the best information is often in the minds of your colleagues. Ask around and see what they say."),(0,i.kt)("p",null,"What you come up with will likely read like a laundry list of browser specific issues or functionality that has been flaky or forgotten about in the past. Be sure to check this list against your automation backlog. If you've come across something that's not already in the backlog, add it and put it at the bottom. If it is there, make a note in the backlog item that this has been an issue in the past. If the issue has happened numerous times and has the potential to occur again, move the item up in the backlog priority."),(0,i.kt)("p",null,"If issues keep cropping up that are related to a specific browser, compare this browser to your short list from question #3. If it's a browser that's not in your list but it's a small pocket of high value users, track it on the backlog but put it at the bottom."),(0,i.kt)("h2",{id:"now-you-are-ready"},"Now You Are Ready"),(0,i.kt)("p",null,"Having answered these questions you should now have a prioritized backlog of critical functionality that's backed up by usage data, a short list of browsers to focus on, and an understanding of the risky parts of your application. With it you can make sure you are on the right track with your test automation (regardless if you're just getting started with test automation or already have a mature test automation practice)."),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this strategy will help you focus your testing efforts, avoid wasting time, and increase your confidence in the approach you are taking."),(0,i.kt)("p",null,"This strategy works best for applications with existing functionality and does not speak directly to testing new functionality that's being actively developed. That's not to say that the two couldn't co-exist. It largely depends on your available resources and pace of development but in order to reach high quality at speed, you first have to go slow."),(0,i.kt)("h2",{id:"about-the-author"},"About the Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},88598:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"data-driven-testing/csharp",id:"data-driven-testing/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/19-data-driven-testing/csharp.md",sourceDirName:"19-data-driven-testing",slug:"/data-driven-testing/csharp",permalink:"/docs/data-driven-testing/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/19-data-driven-testing/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},81030:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"data-driven-testing/java",id:"data-driven-testing/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/19-data-driven-testing/java.md",sourceDirName:"19-data-driven-testing",slug:"/data-driven-testing/java",permalink:"/docs/data-driven-testing/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/19-data-driven-testing/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},19595:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"data-driven-testing/javascript",id:"data-driven-testing/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/19-data-driven-testing/javascript.md",sourceDirName:"19-data-driven-testing",slug:"/data-driven-testing/javascript",permalink:"/docs/data-driven-testing/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/19-data-driven-testing/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},55152:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"data-driven-testing/python",id:"data-driven-testing/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/19-data-driven-testing/python.md",sourceDirName:"19-data-driven-testing",slug:"/data-driven-testing/python",permalink:"/docs/data-driven-testing/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/19-data-driven-testing/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},33993:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:2,hide_sidebar:!0,publish_date:new Date("2015-07-14T00:00:00.000Z"),last_update:{date:new Date("2023-02-28T00:00:00.000Z")}},o=void 0,l={unversionedId:"data-driven-testing/ruby",id:"data-driven-testing/ruby",title:"ruby",description:"A Solution",source:"@site/docs/19-data-driven-testing/ruby.md",sourceDirName:"19-data-driven-testing",slug:"/data-driven-testing/ruby",permalink:"/docs/data-driven-testing/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/19-data-driven-testing/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677542400,formattedLastUpdatedAt:"Feb 28, 2023",frontMatter:{language:"ruby",level:2,hide_sidebar:!0,publish_date:"2015-07-14T00:00:00.000Z",last_update:{date:"2023-02-28T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Enter Data-driven Testing."),(0,i.kt)("p",null,"By storing your desired inputs and expected outcomes in a central repository of some kind (e.g. a comma separated file, database, etc) you can easily wire up tests to use each of them instead of writing numerous tests and hard-coding these values directly in your test code."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Let's start with an example -- testing a login form on a website (e.g., with ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/login"},"this example")," on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet"),")."),(0,i.kt)("p",null,"First, we are going to create a file to store the test inputs and expected outputs in. In this case, a CSV (comma-separated value) file called ",(0,i.kt)("inlineCode",{parentName:"p"},"user_data.csv"),", like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"account_type,username,password,notification_message\nbad_password,tomsmith,badPassword,Your password is invalid!\nbad_username,badUsername,SuperSecretPassword!,Your username is invalid!\nstandard_user,tomsmith,SuperSecretPassword!,You logged into a secure area!\n")),(0,i.kt)("p",null,"Next let's create our test file, require our requisite libraries (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to control the browser, ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers")," for our assertion, and ",(0,i.kt)("inlineCode",{parentName:"p"},"csv")," to import the data from our CSV file) and add some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: data_driven.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\nrequire 'csv'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Now let's wire up our CSV parsing."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"def user_data\n  user_data = CSV.read Dir.pwd + '/user_data.csv'\n  descriptor = user_data.shift\n  descriptor = descriptor.map { |key| key.to_sym }\n  user_data.map { |user| Hash[ descriptor.zip(user) ] }\nend\n")),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"user_data")," we read the CSV file in and grab the first row in it with ",(0,i.kt)("inlineCode",{parentName:"p"},".shift"),". We store this row in a variable called ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptor")," and convert each value into a symbol. We then iterate over the rest of the CSV data and create a Hash object for each row of user data. In each Hash we are binding the relevant descriptor to each piece of user data (through the use of ",(0,i.kt)("inlineCode",{parentName:"p"},".zip"),"). This enables us to reference each of the user values by looking them up in the Hash by their descriptor symbol."),(0,i.kt)("p",null,"Next we'll need a helper method that will responsibly obtain the notification text from the page. It will need to both wait for the text to appear and clean up the resulting text so it doesn't include any extraneous characters."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"def notification_text\n  wait = Selenium::WebDriver::Wait.new(timeout: 5)\n  wait.until { @driver.find_element(class: 'flash').displayed? }\n  @driver.find_element(class: 'flash').text.delete('^a-zA-z !.')\nend\n")),(0,i.kt)("p",null,"We use the stock Selenium Wait function (e.g., an explicit wait) to continuously perform an action until either the timeout is reached or the action is true (whichever comes first). We then use it to see if the notification text is displayed on the page. If it is, then we grab the text and clean it up with a regular expression that deletes non-letter characters while preserving ",(0,i.kt)("inlineCode",{parentName:"p"},"!")," and ",(0,i.kt)("inlineCode",{parentName:"p"},".")," (which are expected in the output we're testing for)."),(0,i.kt)("p",null,"Now we're ready to wire up our test. In it we will iterate through each of the user entries in the CSV file and use their data to both complete a login action and verify the notification message."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"user_data.each do |user|\n  run do\n    @driver.get 'http://the-internet.herokuapp.com/login'\n    @driver.find_element(id: 'username').send_keys user[:username]\n    @driver.find_element(id: 'password').send_keys user[:password]\n    @driver.find_element(id: 'login').submit\n    begin\n      expect(notification_text).to eql user[:notification_message]\n    rescue Exception => error\n      puts error.message\n    end\n  end\nend\n")),(0,i.kt)("p",null,"We wrap the notification message assertion in a ",(0,i.kt)("inlineCode",{parentName:"p"},"rescue")," block so that when an exception occurs the test will continue on with the next piece of user data after outputting the failure message to the command prompt."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby data_driven.rb")," from the command-line) the script will parse the CSV file and perform the following for each entry:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Load the login page"),(0,i.kt)("li",{parentName:"ul"},"Submit the login form with user data"),(0,i.kt)("li",{parentName:"ul"},"Grab the notification message and assert it against the expected value"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"By storing data in a central repository to use for your tests and using Data-driven testing, you can simplify running repeated tests with various outputs."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},7747:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:2,hide_sidebar:!0,publish_date:new Date("2016-06-11T00:00:00.000Z"),last_update:{date:new Date("2023-03-29T00:00:00.000Z")}},o=void 0,l={unversionedId:"download-a-file/csharp",id:"download-a-file/csharp",title:"csharp",description:"A Solution",source:"@site/docs/2-download-a-file/csharp.md",sourceDirName:"2-download-a-file",slug:"/download-a-file/csharp",permalink:"/docs/download-a-file/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/2-download-a-file/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680048e3,formattedLastUpdatedAt:"Mar 29, 2023",frontMatter:{language:"csharp",level:2,hide_sidebar:!0,publish_date:"2016-06-11T00:00:00.000Z",last_update:{date:"2023-03-29T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"In order to avoid the dialog box, we will be instructing the browser to download files to a specific location without being prompted."),(0,i.kt)("p",null,"After the file is downloaded we can then perform some simple checks to make sure the file is what we expect."),(0,i.kt)("p",null,"Let's continue with an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Let's start off by declaring our requisite classes for our testing framework (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"using NUnit.Framework"),"), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"using OpenQA.Selenium"),", etc.), and leveraging common C# functions (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"using System.IO"),", etc.)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: FileDownload.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\nusing System.IO;\nusing System.Threading;\n// ...\n")),(0,i.kt)("p",null,"Now to create a class and add our test's setup."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: FileDownload.cs\npublic class FileDownload\n{\n    IWebDriver Driver;\n    string FolderPath;\n\n    [SetUp]\n    public void SetUp()\n    {\n        FolderPath = @"C:\\Temp\\" + System.Guid.NewGuid().ToString();\n        Directory.CreateDirectory(FolderPath);\n\n        FirefoxOptions options = new FirefoxOptions();\n        options.SetPreference("browser.download.dir", FolderPath);\n        options.SetPreference("browser.download.folderList", 2);\n        options.SetPreference("browser.helperApps.neverAsk.saveToDisk",\n                      "image/jpeg, application/pdf, application/octet-stream");\n        options.SetPreference("pdfjs.disabled", true);\n        Driver = new FirefoxDriver(options);\n    }\n// ...\n')),(0,i.kt)("p",null,"Our ",(0,i.kt)("inlineCode",{parentName:"p"},"SetUp()")," method is where the magic is happening in this example. In it we're creating a uniquely named temp directory (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Guid.NewGuid().ToString();"),"), configuring a browser profile object (for Firefox in this case), and plying it with the necessary configuration parameters to make it automatically download the file where we want (e.g., in the newly created temp directory)."),(0,i.kt)("p",null,"Here's a breakdown of each of the browser preferences being set:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"browser.download.dir")," accepts a string. This is how we set the custom download path. It needs to be an absolute path."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"browser.download.folderList")," takes a number. It tells Firefox which download directory to use. ",(0,i.kt)("inlineCode",{parentName:"li"},"2")," tells it to use a custom download path, wheras ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," would use the browser's default path, and ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," would place them on the Desktop."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"browser.helperApps.neverAsk.saveToDisk")," tells Firefox when not to prompt for a file download. It accepts a string of ",(0,i.kt)("a",{parentName:"li",href:"http://en.wikipedia.org/wiki/Internet_media_type"},"the file's MIME type"),". If you want to specify more than one, you do it with a comma-separated string (which we've done)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pdfjs.disabled")," is for when downloading PDFs. This overrides the sensible default in Firefox that previews PDFs in the browser. It accepts a boolean.")),(0,i.kt)("p",null,"This profile object is then passed into our instance of Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"Driver = new FirefoxDriver(Profile);"),")."),(0,i.kt)("p",null,"Now let's take care of our test's teardown."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: FileDownload.cs\n// ...\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n        Directory.Delete(FolderPath, true);\n    }\n// ...\n")),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"TearDown()")," we close the browser instance and then clean up the temp directory by deleting it. Specifying ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," as a second parameter for ",(0,i.kt)("inlineCode",{parentName:"p"},"Directory.Delete()")," will recursively delete the files in the folder before deleting it."),(0,i.kt)("p",null,"Now to wire up our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: FileDownload.cs\n// ...\n    [Test]\n    public void DownloadFileToDisk()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/download");\n        Driver.FindElement(By.CssSelector(".example a")).Click();\n        Thread.Sleep(2000);\n\n        DirectoryInfo DownloadFolder = new DirectoryInfo(FolderPath);\n        Assert.IsTrue(DownloadFolder.GetFiles().Length > 0, "File not downloaded");\n        foreach(FileInfo file in DownloadFolder.GetFiles())\n        {\n            Assert.IsTrue(file.Length > 0, "File empty");\n        }\n    }\n}\n')),(0,i.kt)("p",null,"After visiting the page we find the first download link and click it. The click triggers an automatic download to the temp directory created in ",(0,i.kt)("inlineCode",{parentName:"p"},"SetUp()"),". We need to wait for the download to finish, so we add a brief sleep (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"Thread.sleep(2000);"),"). After the file downloads, we perform some rudimentary checks to make sure the unique temp directory isn't empty and then check the file (or files) to see that they aren't empty either."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\FileDownload.sln")," from the command-line) here is will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create a uniquely named temp directory in the present working directory"),(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Find and click the first download link on the page"),(0,i.kt)("li",{parentName:"ul"},"Automatically download the file to the temp directory without prompting"),(0,i.kt)("li",{parentName:"ul"},"Check that the temp directory is not empty"),(0,i.kt)("li",{parentName:"ul"},"Check that the downloaded file is not empty"),(0,i.kt)("li",{parentName:"ul"},"Close the browser"),(0,i.kt)("li",{parentName:"ul"},"Delete the temp directory")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"A similar approach can be applied to some other browsers with varying configurations. But downloading files this way is not sustainable or recommended. Mark Collin articulates this point well in his prominent write-up about it ",(0,i.kt)("a",{parentName:"p",href:"http://ardesco.lazerycode.com/index.php/2012/07/how-to-download-files-with-selenium-and-why-you-shouldnt/"},"here"),"."),(0,i.kt)("p",null,"Thanks to Jonathan Taylor for contributing the initial C# code for this tip!"),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by\nthousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect\nfor writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool,\nManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at\nnumerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},58644:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:2,hide_sidebar:!0,publish_date:new Date("2015-11-15T00:00:00.000Z"),last_update:{date:new Date("2023-04-03T00:00:00.000Z")}},o=void 0,l={unversionedId:"download-a-file/java",id:"download-a-file/java",title:"java",description:"A Solution",source:"@site/docs/2-download-a-file/java.md",sourceDirName:"2-download-a-file",slug:"/download-a-file/java",permalink:"/docs/download-a-file/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/2-download-a-file/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:168048e4,formattedLastUpdatedAt:"Apr 3, 2023",frontMatter:{language:"java",level:2,hide_sidebar:!0,publish_date:"2015-11-15T00:00:00.000Z",last_update:{date:"2023-04-03T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"In order to avoid the dialog box, we will be instructing the browser to download files to a specific location without being prompted."),(0,i.kt)("p",null,"After the file is downloaded we can then perform some simple checks to make sure the file is what we expect."),(0,i.kt)("p",null,"Let's continue with an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Let's start off by importing our requisite classes for annotations (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.junit.After"),", etc.), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.openqa.selenium.WebDriver"),", etc.), matchers for assertions (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.hamcrest.CoreMatchers"),", etc. ), handling local files (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"java.io.File"),"), and a means to create a uniquely named folder to place downloaded files in (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"java.util.UUID"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// filename: Download.java\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport java.nio.file.Files;\nimport java.util.Objects;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.firefox.FirefoxOptions;\nimport org.openqa.selenium.firefox.FirefoxProfile;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.CoreMatchers.not;\nimport static org.junit.Assert.assertThat;\nimport java.io.File;\nimport java.util.UUID;\n")),(0,i.kt)("p",null,"Now to create a class and add our test's setup."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: Download.java\n//...\npublic class Download {\n    WebDriver driver;\n    File folder;\n\n    @Before\n    public void setUp() throws Exception {\n        folder = new File(UUID.randomUUID().toString());\n        folder.mkdir();\n        FirefoxOptions options = new FirefoxOptions();\n        FirefoxProfile profile = new FirefoxProfile();\n        profile.setPreference("browser.download.dir", folder.getAbsolutePath());\n        profile.setPreference("browser.download.folderList", 2);\n        profile.setPreference("browser.helperApps.neverAsk.saveToDisk",\n                "image/jpeg, application/pdf, application/octet-stream");\n        profile.setPreference("pdfjs.disabled", true);\n        options.setProfile(profile);\n        driver = new FirefoxDriver(options);\n    }\n\n')),(0,i.kt)("p",null,"Our ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp()")," method is where the magic is happening in this example. In it we're creating a uniquely named temp directory, configuring a browser profile object (for Firefox in this case), and plying it with the necessary configuration parameters to make it automatically download the file where we want (e.g., the newly created temp directory)."),(0,i.kt)("p",null,"Here's a breakdown of each of the browser preferences being set:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"browser.download.dir")," accepts a string. This is how we set the custom download path. It needs to be an absolute path."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"browser.download.folderList")," takes a number. It tells Firefox which download directory to use. ",(0,i.kt)("inlineCode",{parentName:"li"},"2")," tells it to use a custom download path, wheras ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," would use the browser's default path, and ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," would place them on the Desktop."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"browser.helperApps.neverAsk.saveToDisk")," tells Firefox when not to prompt for a file download. It accepts a string of ",(0,i.kt)("a",{parentName:"li",href:"http://en.wikipedia.org/wiki/Internet_media_type"},"the file's MIME type"),". If you want to specify more than one, you do it with a comma-separated string."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pdfjs.disabled")," is for when downloading PDFs. This overrides the sensible default in Firefox that previews PDFs in the browser. It accepts a boolean.")),(0,i.kt)("p",null,"This profile object is then passed into our instance of Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"driver = new FirefoxDriver(profile);"),")."),(0,i.kt)("p",null,"Now let's take care of our test's ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// filename: Download.java\n// ...\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n        for (File file: Objects.requireNonNull(folder.listFiles())) {\n            file.delete();\n        }\n        folder.delete();\n    }\n")),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown()")," we close the browser instance and then clean up the temp directory by deleting the files in the temp folder and then the temp folder."),(0,i.kt)("p",null,"Now to wire up our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: Download.java\n// ...\n    @Test\n    public void download() throws Exception {\n        driver.get("http://the-internet.herokuapp.com/download");\n        driver.findElement(By.cssSelector(".example a")).click();\n        // Wait 2 seconds to download file\n        Thread.sleep(2000);\n        File[] listOfFiles = folder.listFiles();\n        // Make sure the directory is not empty\n        assertThat(listOfFiles.length, is(not(0)));\n        for (File file : listOfFiles) {\n            // Make sure the downloaded file(s) is(are) not empty\n            assertThat(file.length(), is(not((long) 0)));\n        }\n    }\n\n}\n')),(0,i.kt)("p",null,"After visiting the page we find the first download link and click it. The click triggers an automatic download to the temp directory created in ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp()"),". We need to wait for the download to finish, so we add a brief sleep (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"Thread.sleep(2000);"),"). After the file downloads, we perform some rudimentary checks to make sure the temp directory isn't empty and then check the file (or files) that they aren't empty either."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn clean test")," from the command-line) here is will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create a uniquely named temp directory in the present working directory"),(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Find and click the first download link on the page"),(0,i.kt)("li",{parentName:"ul"},"Automatically download the file to the temp directory without prompting"),(0,i.kt)("li",{parentName:"ul"},"Check that the temp directory is not empty"),(0,i.kt)("li",{parentName:"ul"},"Check that the downloaded file is not empty"),(0,i.kt)("li",{parentName:"ul"},"Close the browser"),(0,i.kt)("li",{parentName:"ul"},"Delete the temp directory")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"A similar approach can be applied to some other browsers with varying configurations. But downloading files this way is not sustainable or recommended. Mark Collin articulates this point well in his prominent write-up about it ",(0,i.kt)("a",{parentName:"p",href:"http://ardesco.lazerycode.com/index.php/2012/07/how-to-download-files-with-selenium-and-why-you-shouldnt/"},"here"),"."),(0,i.kt)("p",null,"Thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/RomanIsko"},"Roman Isko")," for contributing the initial Java code for this tip."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},26293:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:2,hide_sidebar:!0,publish_date:new Date("2019-08-09T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"download-a-file/javascript",id:"download-a-file/javascript",title:"javascript",description:"A Solution",source:"@site/docs/2-download-a-file/javascript.md",sourceDirName:"2-download-a-file",slug:"/download-a-file/javascript",permalink:"/docs/download-a-file/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/2-download-a-file/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"javascript",level:2,hide_sidebar:!0,publish_date:"2019-08-09T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"An Example",id:"an-example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"In order to avoid the dialog box, we will be instructing the browser to download files to a specific location without being prompted."),(0,i.kt)("p",null,"After the file is downloaded we can then perform some simple checks to make sure the file is what we expect."),(0,i.kt)("p",null,"Let's continue with an example."),(0,i.kt)("h2",{id:"an-example"},"An Example"),(0,i.kt)("p",null,"Let's start by pulling in our requisite libraries."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/download.spec.js\nconst assert = require("assert");\nconst { Builder, By, Key } = require("selenium-webdriver");\nconst firefox = require("selenium-webdriver/firefox");\nconst fs = require("fs");\nconst path = require("path");\n// ...\n')),(0,i.kt)("p",null,"Now to create a setup method for our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/download.spec.js\n// ...\ndescribe("File download", function() {\n  let driver;\n  const tmpDir = path.join(__dirname, "tmp");\n\n  beforeEach(async function() {\n    this.timeout(60000)\n      try {\n        if (!fs.existsSync(tmpDir)) fs.mkdirSync(tmpDir);\n        let options = new firefox.Options()\n          .setPreference("browser.download.dir", tmpDir)\n          .setPreference("browser.download.folderList", 2)\n          .setPreference(\n            "browser.helperApps.neverAsk.saveToDisk",\n            "images/jpeg, application/pdf, application/octet-stream"\n          )\n          .setPreference("pdfjs.disabled", true);\n\n        driver = await new Builder()\n          .forBrowser("firefox")\n          .setFirefoxOptions(options)\n          .build();\n      } catch (ex) {\n       console.log(ex.stack)\n      }\n  });\n// ...\n')),(0,i.kt)("p",null,"After declaring our test suite, we declare two variables. One for the Selenium instance (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"driver"),") and the other for the temporary directory where we'll want to automatically download files to (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"tmpDir"),"). In it we're storing the absolute path to the current working directory, plus the name ",(0,i.kt)("inlineCode",{parentName:"p"},"tmp"),"."),(0,i.kt)("p",null,"In the setup method (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"beforeEach"),") we create this directory if it's not already there, and then create a new browser options object (for Firefox in this case), specifying the necessary configuration parameters to make it automatically download the file where we want (e.g., in the newly created temp directory)."),(0,i.kt)("p",null,"Here's a breakdown of each of the browser preferences being set:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"browser.download.dir")," accepts a string. This is how we set the custom download path. It needs to be an absolute path."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"browser.download.folderList")," takes a number. It tells Firefox which download directory to use. ",(0,i.kt)("inlineCode",{parentName:"li"},"2")," tells it to use a custom download path, wheras ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," would use the browser's default path, and ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," would place them on the Desktop."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"browser.helperApps.neverAsk.saveToDisk")," tells Firefox when not to prompt for a file download. It accepts a string of ",(0,i.kt)("a",{parentName:"li",href:"http://en.wikipedia.org/wiki/Internet_media_type"},"the file's MIME type"),". If you want to specify more than one, you do it with a comma-separated string (which we've done)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pdfjs.disabled")," is for when downloading PDFs. This overrides the sensible default in Firefox that previews PDFs in the browser. It accepts a boolean.")),(0,i.kt)("p",null,"We then hand the options object on to Selenium as part of the incantation to create a new browser instance."),(0,i.kt)("p",null,"Now let's take care of our test's teardown."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// filename: test/download.spec.js\n// ...\n  function cleanupTmpDir() {\n    if (fs.existsSync(tmpDir)) {\n      const files = fs.readdirSync(tmpDir).map(file => path.join(tmpDir, file));\n      files.forEach(file => fs.unlinkSync(file));\n      fs.rmdirSync(tmpDir);\n    }\n  }\n\n  afterEach(async function() {\n    this.timeout(60000);\n    await driver.quit();\n    cleanupTmpDir();\n  });\n// ...\n")),(0,i.kt)("p",null,"In the teardown (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"beforeEach"),") we close the browser instance and then clean up the temp directory by deleting its contents, and then the directory itself."),(0,i.kt)("p",null,"Now to wire up our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/download.spec.js\n// ...\n  it("should automatically download to local disk", async function() {\n    this.timeout(15000);\n    await driver.get("http://the-internet.herokuapp.com/download");\n    await driver.findElement(By.css(".example a")).click();\n    const files = fs.readdirSync(tmpDir).map(file => path.join(tmpDir, file));\n    assert(files.length);\n    assert(fs.statSync(files[0]).size);\n  });\n});\n')),(0,i.kt)("p",null,"After visiting the page we find the first download link and click it. The click triggers an automatic download to the temp directory. After the file downloads, we perform some rudimentary checks to make sure the temp directory contains files and the first file in the directory is not empty."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mocha")," from the command-line) this is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create a uniquely named temp directory in the present working directory"),(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Find and click the first download link on the page"),(0,i.kt)("li",{parentName:"ul"},"Automatically download the file to the temp directory without prompting"),(0,i.kt)("li",{parentName:"ul"},"Check that the temp directory is not empty"),(0,i.kt)("li",{parentName:"ul"},"Check that the downloaded file is not empty"),(0,i.kt)("li",{parentName:"ul"},"Close the browser"),(0,i.kt)("li",{parentName:"ul"},"Delete the temp directory")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"A similar approach can be applied to some other browsers with varying configurations to download a file into a temp directory, automaticaly close the browser, and delete the directory,"),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},6688:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:2,hide_sidebar:!0,publish_date:new Date("2016-09-23T00:00:00.000Z"),last_update:{date:new Date("2023-03-02T00:00:00.000Z")}},o=void 0,l={unversionedId:"download-a-file/python",id:"download-a-file/python",title:"python",description:"A Solution",source:"@site/docs/2-download-a-file/python.md",sourceDirName:"2-download-a-file",slug:"/download-a-file/python",permalink:"/docs/download-a-file/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/2-download-a-file/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677715200,formattedLastUpdatedAt:"Mar 2, 2023",frontMatter:{language:"python",level:2,hide_sidebar:!0,publish_date:"2016-09-23T00:00:00.000Z",last_update:{date:"2023-03-02T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"In order to avoid the dialog box, we will be instructing the browser to download files to a specific location without being prompted."),(0,i.kt)("p",null,"After the file is downloaded we can then perform some simple checks to make sure the file is what we expect."),(0,i.kt)("p",null,"Let's continue with an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Let's start by pulling in our requisite libraries for interacting with the operating system (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"import os"),"), creating a temporary directory and cleaning it up, using our testing framework (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"import unittest"),"), and driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"from selenium import webdriver"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: download.py\nimport os\nimport time\nimport shutil\nimport tempfile\nimport unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.firefox.options import Options\nfrom selenium.webdriver.common.by import By\n\n# ...\n")),(0,i.kt)("p",null,"Now to create a test class and add our test's setup."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# filename: download.py\nclass Download(unittest.TestCase):\n\n    def setUp(self):\n        self.download_dir = tempfile.mkdtemp()\n        options = Options()\n        options.set_preference("browser.download.dir", self.download_dir)\n        options.set_preference("browser.download.folderList", 2)\n        options.set_preference(\n            "browser.helperApps.neverAsk.saveToDisk",\n            "images/jpeg, application/pdf, application/octet-stream")\n        options.set_preference("pdfjs.disabled", True)\n        self.driver = webdriver.Firefox(options=options)\n# ...\n')),(0,i.kt)("p",null,"Our ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp(self):")," method is where the magic is happening in this example. In it we're creating a uniquely named temp directory (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"self.download_dir = tempfile.mkdtemp()"),"), configuring a browser profile object (for Firefox in this case), and plying it with the necessary configuration parameters to make it automatically download the file where we want (e.g., in the newly created temp directory)."),(0,i.kt)("p",null,"Here's a breakdown of each of the browser preferences being set:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"browser.download.dir")," accepts a string. This is how we set the custom download path. It needs to be an absolute path."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"browser.download.folderList")," takes a number. It tells Firefox which download directory to use. ",(0,i.kt)("inlineCode",{parentName:"li"},"2")," tells it to use a custom download path, wheras ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," would use the browser's default path, and ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," would place them on the Desktop."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"browser.helperApps.neverAsk.saveToDisk")," tells Firefox when not to prompt for a file download. It accepts a string of ",(0,i.kt)("a",{parentName:"li",href:"http://en.wikipedia.org/wiki/Internet_media_type"},"the file's MIME type"),". If you want to specify more than one, you do it with a comma-separated string (which we've done)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pdfjs.disabled")," is for when downloading PDFs. This overrides the sensible default in Firefox that previews PDFs in the browser. It accepts a boolean.")),(0,i.kt)("p",null,"This object is then passed into our instance of Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"self.driver = webdriver.Firefox(options=options"),")."),(0,i.kt)("p",null,"Now let's take care of our test's teardown."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: download.py\n# ...\n  def tearDown(self):\n      self.driver.quit()\n      shutil.rmtree(self.download_dir)\n# ...\n")),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown(self):")," we close the browser instance and then clean up the temp directory by deleting it, which will recursively delete the files in the folder before deleting it."),(0,i.kt)("p",null,"Now to wire up our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# filename: download.py\n# ...\n    def test_example_1(self):\n        driver = self.driver\n        driver.get(\'http://the-internet.herokuapp.com/download\')\n        download_link = driver.find_element(By.CSS_SELECTOR, \'.example a\')\n        download_link.click()\n\n        time.sleep(1.0)  # necessary for slow download speeds\n\n        files = os.listdir(self.download_dir)\n        files = [os.path.join(self.download_dir, f)\n                 for f in files]  # add directory to each filename\n        assert len(files) > 0, "no files were downloaded"\n        assert os.path.getsize(files[0]) > 0, "downloaded file was empty"\n\n\nif __name__ == "__main__":\n    unittest.main()\n')),(0,i.kt)("p",null,"After visiting the page we find the first download link and click it. The click triggers an automatic download to the temp directory created in ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp()"),". We need to wait for the download to finish, so we add a brief sleep (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"time.sleep(1.0)"),"). After the file downloads, we perform some rudimentary checks to make sure the unique temp directory isn't empty and then check the file to see that it isn't empty either."),(0,i.kt)("p",null,"The last two lines of the file are so the file can be executed directly from the command-line."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"python download.py")," from the command-line) this is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create a uniquely named temp directory in the present working directory"),(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Find and click the first download link on the page"),(0,i.kt)("li",{parentName:"ul"},"Automatically download the file to the temp directory without prompting"),(0,i.kt)("li",{parentName:"ul"},"Check that the temp directory is not empty"),(0,i.kt)("li",{parentName:"ul"},"Check that the downloaded file is not empty"),(0,i.kt)("li",{parentName:"ul"},"Close the browser"),(0,i.kt)("li",{parentName:"ul"},"Delete the temp directory")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"A similar approach can be applied to some other browsers with varying configurations. But downloading files this way is not sustainable or recommended. Mark Collin articulates this point well in his prominent write-up about it ",(0,i.kt)("a",{parentName:"p",href:"http://ardesco.lazerycode.com/index.php/2012/07/how-to-download-files-with-selenium-and-why-you-shouldnt/"},"here"),". In a future tip I'll cover a more reliable, faster, and scalable browser agnostic approach to downloading files. Stay tuned."),(0,i.kt)("p",null,"Thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/trabulmonkee"},"Mike Millgate")," for contributing the Python code for this tip, and to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Dude-X"},"Isaul Vargas")," & ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bittner"},"Peter Bittner")," for code reviewing!"),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},41783:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:2,hide_sidebar:!0,publish_date:new Date("2015-07-27T00:00:00.000Z"),last_update:{date:new Date("2023-03-08T00:00:00.000Z")}},o=void 0,l={unversionedId:"download-a-file/ruby",id:"download-a-file/ruby",title:"ruby",description:"A Solution",source:"@site/docs/2-download-a-file/ruby.md",sourceDirName:"2-download-a-file",slug:"/download-a-file/ruby",permalink:"/docs/download-a-file/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/2-download-a-file/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1678233600,formattedLastUpdatedAt:"Mar 8, 2023",frontMatter:{language:"ruby",level:2,hide_sidebar:!0,publish_date:"2015-07-27T00:00:00.000Z",last_update:{date:"2023-03-08T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"In order to avoid the dialog box, we will be instructing the browser to download files to a specific location without being prompted."),(0,i.kt)("p",null,"After the file is downloaded we can then perform some simple checks to make sure the file is what we expect."),(0,i.kt)("p",null,"Let's continue with an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Let's start off by pulling in our requisite libraries (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to drive the browser, ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expectations"),"\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers")," for assertions, ",(0,i.kt)("inlineCode",{parentName:"p"},"uuid")," to help create a uniquely named temporary download directory, and ",(0,i.kt)("inlineCode",{parentName:"p"},"fileutils"),"\nto create & destroy the temp directory) and wiring up our ",(0,i.kt)("inlineCode",{parentName:"p"},"setup")," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: download_file.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\nrequire 'uuid'\nrequire 'fileutils'\n\ndef setup\n  @download_dir = File.join(Dir.pwd, UUID.new.generate)\n  FileUtils.mkdir_p @download_dir\n\n  # Firefox\n  options = Selenium::WebDriver::Options.firefox\n  options.add_preference('browser.download.dir', @download_dir)\n  options.add_preference('browser.download.folderList', 2)\n  options.add_preference('browser.helperApps.neverAsk.saveToDisk', 'images/jpeg, application/pdf, application/octet-stream')\n  options.add_preference('pdfjs.disabled', true)\n  @driver = Selenium::WebDriver.for :firefox, options: options\nend\n")),(0,i.kt)("p",null,"Our ",(0,i.kt)("inlineCode",{parentName:"p"},"setup")," method is where the magic is happening in this example. In it we're creating a uniquely named\ntemp directory and storing the absolute path of it in an instance variable that we'll use throughout this file."),(0,i.kt)("p",null,"We're also setting a few browser preferences (for Firefox in this case) and plying it with the necessary configuration\nparameters to make it automatically download the file where we want. Here's a breakdown of each of them:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"browser.download.dir")," accepts a string. This is how we set the custom download path. It needs to be an absolute path."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"browser.download.folderList")," takes a number. It tells Firefox which download directory to use. ",(0,i.kt)("inlineCode",{parentName:"li"},"2")," tells it to use a custom download path, wheras ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," would use the browser's default path, and ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," would place them on the Desktop."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"browser.helperApps.neverAsk.saveToDisk")," tells Firefox when not to prompt for a file download. It accepts a string of ",(0,i.kt)("a",{parentName:"li",href:"http://en.wikipedia.org/wiki/Internet_media_type"},"the file's MIME type"),". If you want to specify more than one, you do it with a comma-separated string."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pdfjs.disabled")," is for when downloading PDFs. This overrides the sensible default in Firefox that previews PDFs in the browser. It accepts a boolean.")),(0,i.kt)("p",null,"These preferences are then passed into our instance of Selenium."),(0,i.kt)("p",null,"Now let's add some ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"def teardown\n  @driver.quit\n  FileUtils.rm_rf @download_dir\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown")," we make sure to clean up the temp directory after closing the browser. Other than that, it's business as usual."),(0,i.kt)("p",null,"Now onto the test itself."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/download'\n  download_link = @driver.find_element(css: '.example a')\n  download_link.click\n\n  files = Dir.glob(\"#{@download_dir}/*\")\n  expect(files.empty?).to eql false\n  expect(File.size(files.first)).to be > 0\nend\n")),(0,i.kt)("p",null,"After loading the page we find the first download link and click it. The click triggers an automatic download to the temp\ndirectory created in ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),". After that, we perform some rudimentary checks to make sure the directory isn't empty and\nthat the file isn't empty either."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby download_file.rb")," from the command-line) here is will happen."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create a uniquely named temp directory"),(0,i.kt)("li",{parentName:"ul"},"Load the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Find and click the first download link on the page"),(0,i.kt)("li",{parentName:"ul"},"Automatically download the file to the temp directory without prompting"),(0,i.kt)("li",{parentName:"ul"},"Check that the temp directory is not empty"),(0,i.kt)("li",{parentName:"ul"},"Check that the downloaded file is not empty"),(0,i.kt)("li",{parentName:"ul"},"Close the browser"),(0,i.kt)("li",{parentName:"ul"},"Delete the temp directory and it's contents")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"A similar approach can be applied to some other browsers with varying configurations. But downloading files this way is\nnot sustainable or recommended. Mark Collin articulates this point well in his prominent write-up about it\n",(0,i.kt)("a",{parentName:"p",href:"http://ardesco.lazerycode.com/index.php/2012/07/how-to-download-files-with-selenium-and-why-you-shouldnt/"},"here"),"."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by\nthousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect\nfor writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool,\nManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at\nnumerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},17751:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"adding-a-language/csharp",id:"adding-a-language/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/21-adding-a-language/csharp.md",sourceDirName:"21-adding-a-language",slug:"/adding-a-language/csharp",permalink:"/docs/adding-a-language/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/21-adding-a-language/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},50466:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"adding-a-language/java",id:"adding-a-language/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/21-adding-a-language/java.md",sourceDirName:"21-adding-a-language",slug:"/adding-a-language/java",permalink:"/docs/adding-a-language/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/21-adding-a-language/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},82308:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"adding-a-language/javascript",id:"adding-a-language/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/21-adding-a-language/javascript.md",sourceDirName:"21-adding-a-language",slug:"/adding-a-language/javascript",permalink:"/docs/adding-a-language/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/21-adding-a-language/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},31378:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"adding-a-language/python",id:"adding-a-language/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/21-adding-a-language/python.md",sourceDirName:"21-adding-a-language",slug:"/adding-a-language/python",permalink:"/docs/adding-a-language/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/21-adding-a-language/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},6461:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:1,hide_sidebar:!0,publish_date:new Date("2015-10-13T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"adding-a-language/ruby",id:"adding-a-language/ruby",title:"ruby",description:"A Solution",source:"@site/docs/21-adding-a-language/ruby.md",sourceDirName:"21-adding-a-language",slug:"/adding-a-language/ruby",permalink:"/docs/adding-a-language/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/21-adding-a-language/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"ruby",level:1,hide_sidebar:!0,publish_date:"2015-10-13T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"A great way to determine which language to go with is to answer one simple question: ",(0,i.kt)("strong",{parentName:"p"},"Who will own the automated tests?")),(0,i.kt)("p",null,"The answer to this, and the discussion that unfolds from it, will help you more effectively choose a programming language for test automation."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"If you're a tester (or a team of testers) and you will be building and maintaining the test automation, then it's best to consider what languages you (and your team) already have experience with, or are interested in gaining, rather than what the application you're testing is built in. Have a discussion with your team to see what interests them."),(0,i.kt)("p",null,"For example, there's not much advantage in writing your test automation in Java if your team has no previous development experience and will be the ones owning it. Instead, try to choose a language that is more approachable -- e.g. a scripting language like Ruby or Python. But if you're a developer that is working on the application and just looking to add automated acceptance testing to the mix then it makes sense to continue with the same language."),(0,i.kt)("p",null,"As your suite of tests grow you will find the need to add functionality to make things easier to use, run faster, offer better reporting, etc. When this happens you will effectively be doing two jobs -- building a test harness (a.k.a. a Selenium framework) AND writing automated tests."),(0,i.kt)("p",null,"As you're considering which language to go with, consider what open source frameworks already exist for the languages you're considering. Going with one that's already built will save you a lot of time and give you a host of functionality out of the box that you would otherwise have to build and maintain yourself -- and it's FREE."),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Choosing a programming language for automated testing is not a decision that should be taken lightly. If you're just starting out (or looking to port your tests) then considering and discussing this will help position you for greater success."),(0,i.kt)("p",null,"For a second and third opinion on this topic you can read Adam Goucher and Joe Colantonio's takes ",(0,i.kt)("a",{parentName:"p",href:"https://saucelabs.com/resources/blog/stop-being-a-language-snob-debunking-the-but-our-application-is-written-in-x-myth-guest-post"},"here")," and ",(0,i.kt)("a",{parentName:"p",href:"http://www.joecolantonio.com/2015/05/31/selenium-what-programming-language-you-should-learn-to-get-into-test-automation/"},"here"),"."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},129:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"locator-strategy/csharp",id:"locator-strategy/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/22-locator-strategy/csharp.md",sourceDirName:"22-locator-strategy",slug:"/locator-strategy/csharp",permalink:"/docs/locator-strategy/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/22-locator-strategy/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},91320:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"locator-strategy/java",id:"locator-strategy/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/22-locator-strategy/java.md",sourceDirName:"22-locator-strategy",slug:"/locator-strategy/java",permalink:"/docs/locator-strategy/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/22-locator-strategy/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},81942:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"locator-strategy/javascript",id:"locator-strategy/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/22-locator-strategy/javascript.md",sourceDirName:"22-locator-strategy",slug:"/locator-strategy/javascript",permalink:"/docs/locator-strategy/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/22-locator-strategy/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},12202:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"locator-strategy/python",id:"locator-strategy/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/22-locator-strategy/python.md",sourceDirName:"22-locator-strategy",slug:"/locator-strategy/python",permalink:"/docs/locator-strategy/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/22-locator-strategy/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},45720:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:1,hide_sidebar:!0,publish_date:new Date("2013-10-22T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"locator-strategy/ruby",id:"locator-strategy/ruby",title:"ruby",description:"A Solution",source:"@site/docs/22-locator-strategy/ruby.md",sourceDirName:"22-locator-strategy",slug:"/locator-strategy/ruby",permalink:"/docs/locator-strategy/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/22-locator-strategy/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"ruby",level:1,hide_sidebar:!0,publish_date:"2013-10-22T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Example 3",id:"example-3",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"While each locator strategy serves its purpose there is one approach that is better. It is one that is cross-browser performant, simpler to maintain, and powerful -- that's CSS Selectors."),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"With the markup below (taken from ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/download"},"here"),") we can demonstrate grabbing the first link from a series of links with varying degrees of precision via CSS Selectors."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<div id="content" class="large-12 columns">\n  <div class="example">\n    <h3>File Downloader</h3>\n    <a href="download/hello-world.pdf">hello-world.pdf</a><br>\n    <a href="download/avatar.jpg">avatar.jpg</a>\n  </div>\n</div>\n')),(0,i.kt)("p",null,"To begin the script, here are the setup, teardown, and run actions we will use."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'selenium-webdriver'\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"The way Selenium works is by first finding the element you want and then chaining additional actions to it. So, to grab the first link and output it's URL we can do the following."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/download'\n  link = @driver.find_element(css: 'a').attribute('href')\n  puts link\nend\n")),(0,i.kt)("p",null,"Note the ",(0,i.kt)("inlineCode",{parentName:"p"},"css: a"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"css:")," is us telling Selenium what locator strategy to use, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," is a selector for a link."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("p",null,"While the previous solution works, it's far from perfect. Of all the possible links on the page Selenium will return the first one. So, if there were other links aside from the ones listed in the download list, we may not get the result we want. To help this, we can be more precise with our CSS."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/download'\n  link = @driver.find_element(css: '#content a').attribute('href')\n  puts link\nend\n")),(0,i.kt)("p",null,"Note the ",(0,i.kt)("inlineCode",{parentName:"p"},"css: '#content a'"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"#content")," is a selector for an HTML element with ",(0,i.kt)("inlineCode",{parentName:"p"},'id="content"'),". With it we are able to chain together the previously used ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," (separated by spaces) to grab the first link from within the content div on the page."),(0,i.kt)("h2",{id:"example-3"},"Example 3"),(0,i.kt)("p",null,"While Example 2 does become more precise, we can scope down even further."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/download'\n  link = @driver.find_element(css: '#content .example a').attribute('href')\n  puts link\nend\n")),(0,i.kt)("p",null,"Note the ",(0,i.kt)("inlineCode",{parentName:"p"},"css: '#content .example a'"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},".example")," is a selector for an HTML element with ",(0,i.kt)("inlineCode",{parentName:"p"},'class="example"'),". With this we are able to grab the first link from within the example div which is within the content div."),(0,i.kt)("p",null,"Alternatively, we could have just scoped into ",(0,i.kt)("inlineCode",{parentName:"p"},".example a"),". Either would have worked and for this simple example it doesn't matter. The layout of a page will ultimately influence your CSS Selector decision. The ultimate goal is to find and use unique and reliable selectors that will get you the intended behavior you want for your test."),(0,i.kt)("p",null,"You can find a full list of CSS Selectors ",(0,i.kt)("a",{parentName:"p",href:"http://www.w3schools.com/cssref/css_selectors.asp"},"here"),"."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("u",null,"Example 1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Grab the first link and output the URL to terminal")),(0,i.kt)("u",null,"Example 1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Grab the first link within the content div on the page and output the URL to terminal")),(0,i.kt)("u",null,"Example 1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Grab the first link from within the example div, which is within the content div, and output the URL to terminal")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"In a perfect world all pages would be written with sound markup and uniquely named bits but that's more the exception than the rule. So, you will likely find as you dig into automating various sites that things will not be as straightforward as the examples above. There are some circumstances where you have a selector dialed in but you hit issues with older browsers."),(0,i.kt)("p",null,"As far as finding CSS Selectors, the simplest way to find them is to inspect the elements on a page. The best way to do this is from within your web browser. Fortunately popular browsers of today come pre-loaded with development tools that make this simple to accomplish."),(0,i.kt)("p",null,"When viewing the page right click on the element you want to interact with and click ",(0,i.kt)("strong",{parentName:"p"},"Inspect Element"),". This will bring up a small window with all of the HTML for the page but zoomed into your selection highlighted. From here you can see if there are unique attributes you can work with (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"class"),", etc). At the bottom of the window a set of selectors will be listed showing you the selector for your selection and a heirarchy of the selectors on the page that lead up to your selection."),(0,i.kt)("p",null,"From here you should able to construct a CSS Selector to use in a test."),(0,i.kt)("p",null,"To that end, stay tuned for future tips where we'll cover more advanced CSS Selector techniques and strategies for dealing with older browsers."),(0,i.kt)("p",null,"Until then, Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},24717:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"dynamic-pages/csharp",id:"dynamic-pages/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/23-dynamic-pages/csharp.md",sourceDirName:"23-dynamic-pages",slug:"/dynamic-pages/csharp",permalink:"/docs/dynamic-pages/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/23-dynamic-pages/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},81817:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"dynamic-pages/java",id:"dynamic-pages/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/23-dynamic-pages/java.md",sourceDirName:"23-dynamic-pages",slug:"/dynamic-pages/java",permalink:"/docs/dynamic-pages/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/23-dynamic-pages/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},5033:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"dynamic-pages/javascript",id:"dynamic-pages/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/23-dynamic-pages/javascript.md",sourceDirName:"23-dynamic-pages",slug:"/dynamic-pages/javascript",permalink:"/docs/dynamic-pages/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/23-dynamic-pages/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},69265:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"dynamic-pages/python",id:"dynamic-pages/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/23-dynamic-pages/python.md",sourceDirName:"23-dynamic-pages",slug:"/dynamic-pages/python",permalink:"/docs/dynamic-pages/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/23-dynamic-pages/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},95202:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:2,hide_sidebar:!0,publish_date:new Date("2015-10-13T00:00:00.000Z"),last_update:{date:new Date("2023-02-28T00:00:00.000Z")}},o=void 0,l={unversionedId:"dynamic-pages/ruby",id:"dynamic-pages/ruby",title:"ruby",description:"A Solution",source:"@site/docs/23-dynamic-pages/ruby.md",sourceDirName:"23-dynamic-pages",slug:"/dynamic-pages/ruby",permalink:"/docs/dynamic-pages/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/23-dynamic-pages/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677542400,formattedLastUpdatedAt:"Feb 28, 2023",frontMatter:{language:"ruby",level:2,hide_sidebar:!0,publish_date:"2015-10-13T00:00:00.000Z",last_update:{date:"2023-02-28T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By using a flexible wait strategy you can easily meet the rigors of testing dynamic web applications."),(0,i.kt)("p",null,"Thankfully Selenium comes with one built in -- ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SeleniumHQ/selenium/wiki/Ruby-Bindings#explicit-waits"},"Explicit Waits"),". With them you specify a timeout and an action. Selenium will repeatedly try that action until it can either complete it successfully (at which point it will move onto the next step of the test), or it will throw a timeout exception (causing your test to error)."),(0,i.kt)("p",null,"Let's continue with an example."),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"Let's use from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet")," which load content dynamically (",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/dynamic_loading"},"link"),"). On it there is a ",(0,i.kt)("inlineCode",{parentName:"p"},"Start")," button that when clicked will trigger a loading bar to appear for 5 seconds. After that time it will disappear and a new element with the text ",(0,i.kt)("inlineCode",{parentName:"p"},"'Hello World!'")," will appear."),(0,i.kt)("p",null,"We'll start by requiring our dependent libraries (",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webriver")," to drive the browser and ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers")," to perform our assertions) and wiring up some ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods to handle our test configuration."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: dynamic_loading.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Now we can create our first test. In it we'll visit the page, click the start button, wait for the finish text to appear, and assert that it appeared."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/dynamic_loading/2'\n  @driver.find_element(css: '#start button').click\n  Selenium::WebDriver::Wait.new(timeout: 6).until { @driver.find_element(id: 'finish').displayed? }\n  expect(@driver.find_element(id: 'finish').displayed?).to eql true\nend\n")),(0,i.kt)("p",null,"In the code above we are using an explicit wait with a timeout of ",(0,i.kt)("inlineCode",{parentName:"p"},"6")," seconds (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"Selenium::WebDriver::Wait.new(timeout: 6).until"),"), looking for the element with the finish text (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"@driver.find_element(id: 'finish')"),", and seeing if it's displayed (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},".displayed?"),")."),(0,i.kt)("p",null,"If we set the timeout too low (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"timeout: 2"),") Selenium won't wait long enough for the loading bar to finish, which will trigger the timeout threshold and throw an exception (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"until': timed out after 2 seconds (Selenium::WebDriver::Error::TimeOutError)"),")."),(0,i.kt)("p",null,"And if we didn't use an explicit wait at all, the test would have errored because Selenium would have tried to check for the finish text before it displayed and return a ",(0,i.kt)("inlineCode",{parentName:"p"},"NoSuchElement")," exception (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},'Unable to locate element: {"method":"css selector","selector":"#finish"} (Selenium::WebDriver::Error::NoSuchElementError)'),")."),(0,i.kt)("p",null,"For applications that already have the target element on the page but have it hidden, this approach will work as well (which we can see by pointing our test at the other dynamic loading example)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/dynamic_loading/1'\n  @driver.find_element(css: '#start button').click\n  Selenium::WebDriver::Wait.new(timeout: 6).until { @driver.find_element(id: 'finish').displayed? }\n  expect(@driver.find_element(id: 'finish').displayed?).to eql true\nend\n")),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("p",null,"Explicit waits are a useful tool to have in your toolbelt since they enable you to finely tune your tests and avoid static sleeps and arbitrary timeouts. But rather than litter your test code with the verbose Selenium incantation, it's best to pull this code out into a method that accepts a timeout argument and the action you want to wait for as a block."),(0,i.kt)("p",null,"You can then clean up our test code and reuse this method whenever an explicit wait is needed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"def wait_for(seconds = 6)\n  Selenium::WebDriver::Wait.new(:timeout => seconds).until { yield }\nend\n\nrun do\n  @driver.get 'http://the-internet.herokuapp.com/dynamic_loading/1'\n  @driver.find_element(css: '#start button').click\n  wait_for { @driver.find_element(id: 'finish').displayed? }\n  expect(@driver.find_element(id: 'finish').displayed?).to eql true\nend\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save the file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby dynamic_loading.rb")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Click the Start button"),(0,i.kt)("li",{parentName:"ul"},"Wait for the loading bar to disappear and display the finish text"),(0,i.kt)("li",{parentName:"ul"},"Assert that the finish text element is displayed"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip will help you build more efficient and resilient tests when faced with dynamic pages that are constructed in various ways."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},52210:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"rest-apis/csharp",id:"rest-apis/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/24-rest-apis/csharp.md",sourceDirName:"24-rest-apis",slug:"/rest-apis/csharp",permalink:"/docs/rest-apis/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/24-rest-apis/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},66226:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"rest-apis/java",id:"rest-apis/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/24-rest-apis/java.md",sourceDirName:"24-rest-apis",slug:"/rest-apis/java",permalink:"/docs/rest-apis/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/24-rest-apis/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},65905:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"rest-apis/javascript",id:"rest-apis/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/24-rest-apis/javascript.md",sourceDirName:"24-rest-apis",slug:"/rest-apis/javascript",permalink:"/docs/rest-apis/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/24-rest-apis/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},8450:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"rest-apis/python",id:"rest-apis/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/24-rest-apis/python.md",sourceDirName:"24-rest-apis",slug:"/rest-apis/python",permalink:"/docs/rest-apis/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/24-rest-apis/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},76888:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:2,hide_sidebar:!0,publish_date:"2013-11-5",last_update:{date:new Date("2023-03-09T00:00:00.000Z")}},o=void 0,l={unversionedId:"rest-apis/ruby",id:"rest-apis/ruby",title:"ruby",description:"A Solution",source:"@site/docs/24-rest-apis/ruby.md",sourceDirName:"24-rest-apis",slug:"/rest-apis/ruby",permalink:"/docs/rest-apis/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/24-rest-apis/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:167832e4,formattedLastUpdatedAt:"Mar 9, 2023",frontMatter:{language:"ruby",level:2,hide_sidebar:!0,publish_date:"2013-11-5",last_update:{date:"2023-03-09T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Going beyond signups",id:"going-beyond-signups",level:2},{value:"Testing against REST only",id:"testing-against-rest-only",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"REST APIs are increasingly common in the backends of newer websites. If you are fortunate enough to have such an architecture in the site you are testing it may make sense to make use of those REST APIs in your Selenium test suite. By using calls to the REST APIs in the backend to perform parts of a test setup, and using Selenium to perform the assertion within the website normally, we can end up with tests that are faster, more focused, and more reliable."),(0,i.kt)("p",null,"REST APIs are based on the HTTP protocol, which is the same protocol that powers essentially the entire internet.  Nearly every modern programming language has libraries that can be used to make HTTP requests, thus we can add support for calling into REST APIs to virtually any test suite."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,'I decided to pick an example that is nearly ubiquitous: sign-up. When we make a new user for a test, we have a "clean slate" which allows us great control over how to shape that user for our test. We eliminate possible corruption of our test user\'s state from other tests. And if we make that user using a REST API call, we avoid the time penalty of having to fill out a sign-up form (not to mention having to find any emails involved in confirming an email address).'),(0,i.kt)("p",null,"Suppose our hypothetical website is backed by a REST API, and it documents a call to create a user as follows:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"POST http://api.myfakeapp.com/v1/create-user")),(0,i.kt)("p",null,"This call takes a JSON request body, and creates a user."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"{\n  'username':   'example-username',\n  'password':   'abcd1234',\n  'email':      'bob@example.com',\n  'first_name': 'bob',\n  'last_name':  'example'\n}\n")),(0,i.kt)("p",null,"That tells us we will have to send an ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP POST")," request to the URL ",(0,i.kt)("inlineCode",{parentName:"p"},"/v1/create-user"),", with a JSON object body that has valid values for all of the fields shown. If this all sounds scary, it might help to know that this is more-or-less what your browser does when you submit a form. In this case though, we are going to do it sans-browser."),(0,i.kt)("p",null,"The following module has a ",(0,i.kt)("inlineCode",{parentName:"p"},"create_test_user")," method which we will incorporate into our test setups. It contains some helpful inline comments that describe each of the actions being taken."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: rest_api_interface.rb\n\nrequire 'net/http'\nrequire 'json'\nrequire 'securerandom'\n\nmodule RestApiInterface\n\n  Headers = {\n    'content-type' => 'application/json',\n    'user-agent' => 'Rest Api Helper',\n  }\n\n  def post_to_api path, post_body_obj\n    json_body = JSON.generate(post_body_obj)\n    response = nil\n    Net::HTTP.start('api.myfakeapp.com') do |http|\n      response = http.post(path, json_body, Headers)\n    end\n    response\n  end\n\n  def create_test_user\n    # Step 1: Build the user parameters randomly\n    random_test_user = {\n      'username'   => random_string,\n      'password'   => random_string,\n      'email'      => \"#{random_string}@testing.com\",\n      'first_name' => 'test',\n      'last_name'  => 'user',\n    }\n\n    # Step 2: Execute the API call\n    response = post_to_api '/v0/oauth/create-profile', random_test_user\n\n    # Step 3: Ensure the api call returned a success code\n    if response.code != '200'\n      raise 'User creation failed'\n    end\n\n    # Final Step: Return the user object so we can use it\n    random_test_user\n  end\n\n  def random_string\n    # This is an easy way to get a good randomized string\n    SecureRandom.hex\n  end\nend\n\n")),(0,i.kt)("p",null,"With this we are now ready to make, and then use, test users from within our Selenium code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'selenium-webdriver'\nrequire 'rest_api_interface'\ninclude RestApiInterface\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\n  @user = create_test_user\nend\n\ndef login\n  @driver.get 'http://myfakeapp.com'\n  @driver.find_element(:css, 'input[name=\"username\"]').send_keys @user['username']\n  @driver.find_element(:css, 'input[name=\"password\"]').send_keys @user['password']\n  @driver.find_element(:css, 'button[name=\"login\"]').click\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  login\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"With support code like the above, we are free to write code that can assume we are logged in with a clean user. Like the following (which will output the user that is logged in)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  puts @driver.find_element(:css, '#user_id').text\nend\n")),(0,i.kt)("h2",{id:"going-beyond-signups"},"Going beyond signups"),(0,i.kt)("p",null,"This technique of mixing in REST API calls with your Selenium code is very powerful. Admittedly, the example given is easy to criticize. Signing up a fresh user for every test is probably not an appropriate strategy for many sites. Further, the example does not get around having to login. Once the mechanics of this kind of interaction are in place however, it becomes possible to setup many kind of resources and relationships between them using REST API calls."),(0,i.kt)("p",null,"I used to work for an organization that ran highly specialized markets, with several configuration options, as well as different kinds of users including buyers and sellers. I used this technique to build test markets through all permutations of configuration with test buyers and sellers. My Selenium tests would then simply visit the test markets as the test buyers and sellers and confirm the expected features were available.This allowed my tests to provide both a high level of coverage while staying fast, precise, and wholly self-contained."),(0,i.kt)("h2",{id:"testing-against-rest-only"},"Testing against REST only"),(0,i.kt)("p",null,'Once you\'ve gotten used to using REST APIs to create test data fast, there is a question that naturally pops up: "Why not just test against the REST API itself, without using Selenium?"'),(0,i.kt)("p",null,"Indeed, there are many great reasons to consider pure REST API tests to supplement a Selenium test suite. When compared to Selenium tests, pure REST API tests are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Extremely fast"),(0,i.kt)("li",{parentName:"ul"},"Extremely reliable"),(0,i.kt)("li",{parentName:"ul"},"Easier to build higher levels of test coverage"),(0,i.kt)("li",{parentName:"ul"},"Simpler execution architecture."),(0,i.kt)("li",{parentName:"ul"},"More encouraging of testable design in the application")),(0,i.kt)("p",null,"REST API tests are very appropriate for exercising the business logic that powers an application. Of course they leave a lot of important parts of the application untested including Javascript within the website, thus they should never be considered a complete Selenium replacement."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note: Given the ever increasing important of mobile applications, I believe special mention concerning the testing of a mobile application is important here. There are several Selenium like tools for mobile testing out there, but the landscape is still quite immature. Fortunately, the majority of most mobile applications are in fact backed by a REST API. Pure REST API testing should be considered an important component of any test plan for every mobile application!")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"When considering how to make your Selenium suite have higher coverage, run faster, and be more reliable, it is often worth looking beyond Selenium for solutions to these common problems. REST APIs are becoming very common and provide a relatively easy means for creating test data which Selenium tests can make use of. REST APIs can in fact be a powerful way to test an application all by themselves."),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Robert Schultheis is a Test Engineer for ",(0,i.kt)("a",{parentName:"p",href:"http://www.knewton.com/"},"Knewton"),", a company devoted to personalizing education for every student globally.  He gave ",(0,i.kt)("a",{parentName:"p",href:"http://www.youtube.com/watch?v=WIMF7Nc1sbY"},"a talk")," with more details about using REST APIs for testing and beyond, and has also released a Ruby gem known as ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Knewton/grifter"},"Grifter")," which allows for the creation of DSLs for interacting with REST APIs easily."),(0,i.kt)("p",null,'Robert wishes to express his gratitude to Dave for allowing him a chance to author this guest post, and wishes "Happy Testing" to all Elemental Selenium readers.'))}h.isMDXComponent=!0},13702:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:2,hide_sidebar:!0,publish_date:new Date("2016-06-13T00:00:00.000Z"),last_update:{date:new Date("2023-03-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-work-with-tables/csharp",id:"how-to-work-with-tables/csharp",title:"csharp",description:"A Solution",source:"@site/docs/25-how-to-work-with-tables/csharp.md",sourceDirName:"25-how-to-work-with-tables",slug:"/how-to-work-with-tables/csharp",permalink:"/docs/how-to-work-with-tables/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/25-how-to-work-with-tables/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680134400,formattedLastUpdatedAt:"Mar 30, 2023",frontMatter:{language:"csharp",level:2,hide_sidebar:!0,publish_date:"2016-06-13T00:00:00.000Z",last_update:{date:"2023-03-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"You can easily traverse a table through the use of ",(0,i.kt)("a",{parentName:"p",href:"http://www.w3schools.com/css/css_pseudo_classes.asp"},"CSS Pseudo-classes"),"."),(0,i.kt)("p",null,"But keep in mind that if you care about older browsers (e.g., Internet Explorer 8, et al), then this approach won't work on them. In those cases your best bet is to find a workable solution for the short term and get a front-end developer to update the table with helpful attributes."),(0,i.kt)("blockquote",null,(0,i.kt)("h3",{parentName:"blockquote",id:"a-quick-primer-on-tables-and-css-pseudo-classes"},(0,i.kt)("em",{parentName:"h3"},(0,i.kt)("strong",{parentName:"em"},"A quick primer on Tables and CSS Pseudo-classes"))),(0,i.kt)("p",{parentName:"blockquote"},"Understanding the broad strokes of an HTML table's structure goes a long way in writing effective automation against it. So here's a quick primer."),(0,i.kt)("blockquote",{parentName:"blockquote"},(0,i.kt)("p",{parentName:"blockquote"},"A table has:"),(0,i.kt)("ul",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ul"},"a header (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"<thead>"),")"),(0,i.kt)("li",{parentName:"ul"},"a body (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"<tbody>"),")."),(0,i.kt)("li",{parentName:"ul"},"rows (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"<tr>"),") -- horizontal slats of data"),(0,i.kt)("li",{parentName:"ul"},"columns -- vertical slats of data"))),(0,i.kt)("blockquote",{parentName:"blockquote"},(0,i.kt)("p",{parentName:"blockquote"},"Columns are made up of cells, which are:"),(0,i.kt)("ul",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ul"},"a header (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"<th>"),")"),(0,i.kt)("li",{parentName:"ul"},"one or more standard cells (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"<td>")," -- which is short for ",(0,i.kt)("strong",{parentName:"li"},"table data"),")"))),(0,i.kt)("p",{parentName:"blockquote"},"CSS Pseudo-classes work by walking through the structure of an object and targeting a specific part of it based on a relative number (e.g. the ",(0,i.kt)("strong",{parentName:"p"},"third")," ",(0,i.kt)("inlineCode",{parentName:"p"},"<td>")," cell from a row in the table body). This works well with tables since we can grab all instances of a target (e.g. the third ",(0,i.kt)("inlineCode",{parentName:"p"},"<td>")," cell from each ",(0,i.kt)("inlineCode",{parentName:"p"},"<tr>")," in the table body) and use it in our test -- which would give us all of the data for the third column.")),(0,i.kt)("p",null,"Let's step through some examples for a common set of table functionality like sorting columns in ascending and descending order."),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: You can see the application under test ",(0,i.kt)("a",{parentName:"strong",href:"http://the-internet.herokuapp.com/tables"},"here"),". It's an example from ",(0,i.kt)("a",{parentName:"strong",href:"https://github.com/tourdedave/the-internet"},"the-internet"),". In the example there are 2 tables. We will start with the first table and then work with the second.")),(0,i.kt)("p",null,"Let's start by declaring our requisite classes for our testing framework (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"using NUnit.Framework"),"), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"using OpenQA.Selenium"),", etc.), and accessing C#'s collections functionality (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"using System.Collections.Generic"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: Tables.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\nusing System;\nusing System.Collections.Generic;\n\npublic class Tables\n{\n    IWebDriver Driver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Here is the markup from the first table we're working with. Note that it does not have any ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," attributes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<table id="table1" class="tablesorter">\n  <thead>\n    <tr>\n      <th><span>Last Name</span></th>\n      <th><span>First Name</span></th>\n      <th><span>Email</span></th>\n      <th><span>Due</span></th>\n      <th><span>Web Site</span></th>\n      <th><span>Action</span></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Smith</td>\n      <td>John</td>\n      <td>jsmith@gmail.com</td>\n      <td>$50.00</td>\n      <td>http://www.jsmith.com</td>\n      <td>\n        <a href="#edit">edit</a>\n        <a href="#delete">delete</a>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')),(0,i.kt)("p",null,"There are 6 columns (",(0,i.kt)("inlineCode",{parentName:"p"},"Last Name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"First Name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Email"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Due"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Web Site"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Action"),"). Each one is sortable by clicking on the column header. The first click will sort them in ascending order, the second click in descending order."),(0,i.kt)("p",null,"There is a small sampling of data in the table to work with (4 rows worth), so we should be able to sort the data, grab it, and confirm that it sorted correctly. So let's do that in our first test with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," column using a CSS Pseudo-class."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: Tables.cs\n// ...\n    [Test]\n    public void TableWithNoHelpfulMarkup1()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/tables");\n        Driver.FindElement(By.CssSelector("#table1 thead tr th:nth-of-type(4)")).Click();\n\n        IReadOnlyCollection<IWebElement> Dues = Driver.FindElements(By.CssSelector("#table1 tbody tr td:nth-of-type(4)"));\n        List<double> FormattedDues = new List<double>();\n        foreach(IWebElement Due in Dues)\n        {\n            FormattedDues.Add(double.Parse(Due.Text.Replace("$", "")));\n        }\n\n        Assert.That(FormattedDues, Is.Ordered);\n    }\n// ...\n')),(0,i.kt)("p",null,"After visiting the page we find and click the column heading that we want with a CSS Pseudo-class (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"#table1 thead tr th:nth-of-type(4)"),"). This locator targets the 4th ",(0,i.kt)("inlineCode",{parentName:"p"},"<th>")," element in the table heading section (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"<thead>"),") (which is the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," column heading)."),(0,i.kt)("p",null,"We use another pseudo-class to find all ",(0,i.kt)("inlineCode",{parentName:"p"},"<td>")," elements within the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," column by looking for the 4th ",(0,i.kt)("inlineCode",{parentName:"p"},"<td>")," of each row in the table body. Once we have them we grab each of their text values, clean them up by removing the ",(0,i.kt)("inlineCode",{parentName:"p"},"$"),", convert them to a number (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"double"),"), and store them all in a collection called ",(0,i.kt)("inlineCode",{parentName:"p"},"FormattedDues"),". We then assert that the collection is sorted in ascending order."),(0,i.kt)("p",null,"If we wanted to test for descending order, we would need to click the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," heading twice after loading the page. Other than that the code is identical except for the assertion."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: Tables.cs\n// ...\n    [Test]\n    public void TableWithNoHelpfulMarkup2()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/tables");\n        Driver.FindElement(By.CssSelector("#table1 thead tr th:nth-of-type(4)")).Click();\n        Driver.FindElement(By.CssSelector("#table1 thead tr th:nth-of-type(4)")).Click();\n\n        IReadOnlyCollection<IWebElement> Dues = Driver.FindElements(By.CssSelector("#table1 tbody tr td:nth-of-type(4)"));\n        List<double> FormattedDues = new List<double>();\n        foreach(IWebElement Due in Dues)\n        {\n            FormattedDues.Add(double.Parse(Due.Text.Replace("$", "")));\n        }\n\n        Assert.That(FormattedDues, Is.Ordered.Descending);\n    }\n// ...\n')),(0,i.kt)("p",null,"We can easily use this locator strategy to test a different column (e.g., one that doesn't deal with numbers) and see that it gets sorted correctly too. Here's a test that exercises the ",(0,i.kt)("inlineCode",{parentName:"p"},"Email")," column."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: Tables.cs\n// ...\n    [Test]\n    public void TableWithNoHelpfulMarkup3()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/tables");\n        Driver.FindElement(By.CssSelector("#table1 thead tr th:nth-of-type(3)")).Click();\n\n        IReadOnlyCollection<IWebElement> Emails = Driver.FindElements(By.CssSelector("#table1 tbody tr td:nth-of-type(3)"));\n        List<string> FormattedEmails = new List<string>();\n        foreach(IWebElement Email in Emails)\n        {\n            FormattedEmails.Add(Email.Text);\n        }\n\n        Assert.That(FormattedEmails, Is.Ordered);\n    }\n// ...\n')),(0,i.kt)("p",null,"The mechanism for this is the same except that we don't need to clean the text up before performing our assertion (we just need to pull the text out of the ",(0,i.kt)("inlineCode",{parentName:"p"},"IWebElement")," collection)."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("p",null,"But what about older browsers?"),(0,i.kt)("p",null,"If we run these against an older browser (e.g., Internet Explorer 8, etc.) it will throw an exception stating ",(0,i.kt)("inlineCode",{parentName:"p"},"Unable to find element"),". This is because older browsers don't support CSS Pseudo-classes."),(0,i.kt)("p",null,"You've come a long way, so it's best to get value out of what you've just written. To do that you can run these tests on ",(0,i.kt)("strong",{parentName:"p"},"current browsers")," and submit a request to your front-end developers to update the table markup with some semantic ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," attributes. Later, when these new locators have been implemented on the page, you can revisit these tests and update them accordingly."),(0,i.kt)("p",null,"Here is markup of what our original table would look like with some helpful attributes added in. It's also the markup from the second example of ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/tables"},"our application under test"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<table id="table2" class="tablesorter">\n  <thead>\n    <tr>\n      <th><span class="last-name">Last Name</span></th>\n      <th><span class="first-name">First Name</span></th>\n      <th><span class="email">Email</span></th>\n      <th><span class="dues">Due</span></th>\n      <th><span class="web-site">Web Site</span></th>\n      <th><span class="action">Action</span></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td class="last-name">Smith</td>\n      <td class="first-name">John</td>\n      <td class="email">jsmith@gmail.com</td>\n      <td class="dues">$50.00</td>\n      <td class="web-site">http://www.jsmith.com</td>\n      <td class="action">\n        <a href="#edit">edit</a>\n        <a href="#delete">delete</a>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')),(0,i.kt)("p",null,"With these well-placed and descriptive class attributes the locators in our sorting tests become ",(0,i.kt)("em",{parentName:"p"},"a lot")," simpler to write and more expressive. Let's revisit sorting the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," column in ascending order in a new test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: Tables.cs\n// ...\n    [Test]\n    public void TableWithHelpfulMarkup()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/tables");\n        Driver.FindElement(By.CssSelector("#table2 thead .dues")).Click();\n        IReadOnlyCollection<IWebElement> Dues = Driver.FindElements(By.CssSelector("#table2 tbody .dues"));\n        List<double> FormattedDues = new List<double>();\n        foreach(IWebElement Due in Dues)\n        {\n            FormattedDues.Add(double.Parse(Due.Text.Replace("$", "")));\n        }\n        Assert.That(FormattedDues, Is.Ordered);\n    }\n}\n')),(0,i.kt)("p",null,"Not only will these selectors work in current ",(0,i.kt)("em",{parentName:"p"},"and")," older browsers, but they are also more resilient to changes in the table layout since they are not using hard-coded numbers that rely on the column order."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\Tables.sln")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Click the column heading"),(0,i.kt)("li",{parentName:"ul"},"Grab the values for the column"),(0,i.kt)("li",{parentName:"ul"},"Assert that the column values are sorted in the correct order (ascending or descending)"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"CSS Pseudo-classes are a great resource and unlock a lot of potential for your tests; enabling a bit of CSS gymnastics assuming you've come up with a test strategy that rules out older browsers. If you don't have a test strategy or are curious to see how yours compares, check out ",(0,i.kt)("a",{parentName:"p",href:"/docs/what-to-test/18-what-to-test"},"tip 18"),"."),(0,i.kt)("p",null,"For more info on CSS Pseudo-classes see ",(0,i.kt)("a",{parentName:"p",href:"https://saucelabs.com/resources/selenium/css-selectors"},"this write-up by Sauce Labs"),", and maybe ",(0,i.kt)("a",{parentName:"p",href:"http://www.w3.org/TR/css3-selectors/#structural-pseudos"},"the W3C spec CSS3")," if you're feeling adventurous. And for a more in-depth walk-through on HTML Table design check out Treehouse's write-up ",(0,i.kt)("a",{parentName:"p",href:"http://blog.teamtreehouse.com/how-to-code-sortable-tabular-data-with-jquery"},"here"),"."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},60991:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:2,hide_sidebar:!0,publish_date:new Date("2015-11-11T00:00:00.000Z"),last_update:{date:new Date("2023-04-03T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-work-with-tables/java",id:"how-to-work-with-tables/java",title:"java",description:"A Solution",source:"@site/docs/25-how-to-work-with-tables/java.md",sourceDirName:"25-how-to-work-with-tables",slug:"/how-to-work-with-tables/java",permalink:"/docs/how-to-work-with-tables/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/25-how-to-work-with-tables/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:168048e4,formattedLastUpdatedAt:"Apr 3, 2023",frontMatter:{language:"java",level:2,hide_sidebar:!0,publish_date:"2015-11-11T00:00:00.000Z",last_update:{date:"2023-04-03T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"You can easily traverse a table through the use of ",(0,i.kt)("a",{parentName:"p",href:"http://www.w3schools.com/css/css_pseudo_classes.asp"},"CSS Pseudo-classes"),"."),(0,i.kt)("p",null,"But keep in mind that if you care about older browsers (e.g., Internet Explorer 8, et al), then this approach won't work on them. In those cases your best bet is to find a workable solution for the short term and get a front-end developer to update the table with helpful attributes."),(0,i.kt)("blockquote",null,(0,i.kt)("h3",{parentName:"blockquote",id:"a-quick-primer-on-tables-and-css-pseudo-classes"},(0,i.kt)("em",{parentName:"h3"},(0,i.kt)("strong",{parentName:"em"},"A quick primer on Tables and CSS Pseudo-classes"))),(0,i.kt)("p",{parentName:"blockquote"},"Understanding the broad strokes of an HTML table's structure goes a long way in writing effective automation against it. So here's a quick primer."),(0,i.kt)("blockquote",{parentName:"blockquote"},(0,i.kt)("p",{parentName:"blockquote"},"A table has:"),(0,i.kt)("ul",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ul"},"a header (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"<thead>"),")"),(0,i.kt)("li",{parentName:"ul"},"a body (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"<tbody>"),")."),(0,i.kt)("li",{parentName:"ul"},"rows (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"<tr>"),") -- horizontal slats of data"),(0,i.kt)("li",{parentName:"ul"},"columns -- vertical slats of data"))),(0,i.kt)("blockquote",{parentName:"blockquote"},(0,i.kt)("p",{parentName:"blockquote"},"Columns are made up of cells, which are:"),(0,i.kt)("ul",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ul"},"a header (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"<th>"),")"),(0,i.kt)("li",{parentName:"ul"},"one or more standard cells (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"<td>")," -- which is short for ",(0,i.kt)("strong",{parentName:"li"},"table data"),")"))),(0,i.kt)("p",{parentName:"blockquote"},"CSS Pseudo-classes work by walking through the structure of an object and targeting a specific part of it based on a relative number (e.g. the ",(0,i.kt)("strong",{parentName:"p"},"third")," ",(0,i.kt)("inlineCode",{parentName:"p"},"<td>")," cell from a row in the table body). This works well with tables since we can grab all instances of a target (e.g. the third ",(0,i.kt)("inlineCode",{parentName:"p"},"<td>")," cell from each ",(0,i.kt)("inlineCode",{parentName:"p"},"<tr>")," in the table body) and use it in our test -- which would give us all of the data for the third column.")),(0,i.kt)("p",null,"Let's step through some examples for a common set of table functionality like sorting columns in ascending and descending order."),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: You can see the application under test ",(0,i.kt)("a",{parentName:"strong",href:"http://the-internet.herokuapp.com/tables"},"here"),". It's an example from ",(0,i.kt)("a",{parentName:"strong",href:"https://github.com/tourdedave/the-internet"},"the-internet"),". In the example there are 2 tables. We will start with the first table and then work with the second.")),(0,i.kt)("p",null,"Let's start by importing our requisite classes (for annotations (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.junit.After"),", etc.), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.openqa.selenium.WebDriver"),", etc.), and matchers for our assertions (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.hamcrest.CoreMatchers"),", etc.)) and start our class with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// filename: Tables.java\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport java.util.LinkedList;\nimport java.util.List;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.number.OrderingComparison.lessThan;\nimport static org.hamcrest.number.OrderingComparison.lessThanOrEqualTo;\nimport static org.hamcrest.number.OrderingComparison.greaterThanOrEqualTo;\n\npublic class Tables {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Here is the markup from the first table we're working with. Note that it does not have any ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," attributes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"<table id=\"table1\" class=\"tablesorter\">\n    <thead>\n      <tr>\n        <th><span>Last Name</span></th>\n        <th><span>First Name</span></th>\n        <th><span>Email</span></th>\n        <th><span>Due</span></th>\n        <th><span>Web Site</span></th>\n        <th><span>Action</span></th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>Smith</td>\n        <td>John</td>\n        <td>jsmith@gmail.com</td>\n        <td>$50.00</td>\n        <td>http://www.jsmith.com</td>\n        <td>\n          <a href='#edit'>edit</a>\n          <a href='#delete'>delete</a>\n        </td>\n      </tr>\n")),(0,i.kt)("p",null,"There are 6 columns (",(0,i.kt)("inlineCode",{parentName:"p"},"Last Name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"First Name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Email"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Due"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Web Site"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Action"),"). Each one is sortable by clicking on the column header. The first click will sort them in ascending order, the second click in descending order."),(0,i.kt)("p",null,"There is a small sampling of data in the table to work with (4 rows worth), so we should be able to sort the data, grab it, and confirm that it sorted correctly. So let's do that in our first test with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," column using a CSS Pseudo-class."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: Tables.java\n// ...\n    @Test\n    public void withoutHelpfulMarkupDuesAscending() {\n    {\n        driver.get("http://the-internet.herokuapp.com/tables");\n        driver.findElement(By.cssSelector("#table1 thead tr th:nth-of-type(4)")).click();\n\n        List<WebElement> dues = driver.findElements(By.cssSelector("#table1 tbody tr td:nth-of-type(4)"));\n        List<Double> dueValues = new LinkedList<Double>();\n        for(WebElement element : dues){\n            dueValues.add(Double.parseDouble(element.getText().replace("$", "")));\n        }\n\n        for(int counter = 0; counter < dueValues.size() - 1; counter++){\n            assertThat(dueValues.get(counter), is(lessThanOrEqualTo(dueValues.get(counter + 1))));\n        }\n    }\n// ...\n')),(0,i.kt)("p",null,"After visiting the page we find and click the column heading that we want with a CSS Pseudo-class (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"#table1 thead tr th:nth-of-type(4)"),"). This locator targets the 4th ",(0,i.kt)("inlineCode",{parentName:"p"},"<th>")," element in the table heading section (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"<thead>"),") (which is the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," column heading)."),(0,i.kt)("p",null,"We use another pseudo-class to find all ",(0,i.kt)("inlineCode",{parentName:"p"},"<td>")," elements within the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," column by looking for the 4th ",(0,i.kt)("inlineCode",{parentName:"p"},"<td>")," of each row in the table body. Once we have them we grab each of their text values, clean them up by removing the ",(0,i.kt)("inlineCode",{parentName:"p"},"$"),", convert them to a number (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"Double"),"), and store them all in a collection called ",(0,i.kt)("inlineCode",{parentName:"p"},"dueValues"),". We then iterate through the collection and compare values that are next to each other to see if they're sorted correctly."),(0,i.kt)("p",null,"If we wanted to test for descending order, we would need to click the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," heading twice after loading the page. Other than that the code is identical except for the assertion which is checking that the adjacent value is ",(0,i.kt)("inlineCode",{parentName:"p"},"greaterThanOrEqual"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: Tables.java\n// ...\n    @Test\n    public void withoutHelpfulMarkupDuesDescending() {\n        driver.get("http://the-internet.herokuapp.com/tables");\n\n        driver.findElement(By.cssSelector("#table1 thead tr th:nth-of-type(4)")).click();\n        driver.findElement(By.cssSelector("#table1 thead tr th:nth-of-type(4)")).click();\n\n        List<WebElement> dues = driver.findElements(By.cssSelector("#table1 tbody tr td:nth-of-type(4)"));\n        List<Double> dueValues = new LinkedList<Double>();\n        for (WebElement element : dues) {\n            dueValues.add(Double.parseDouble(element.getText().replace("$", "")));\n        }\n\n        for (int counter = 0; counter < dueValues.size() - 1; counter++) {\n            assertThat(dueValues.get(counter), is(greaterThanOrEqualTo(dueValues.get(counter + 1))));\n        }\n    }\n// ...\n')),(0,i.kt)("p",null,"We can easily use this locator strategy to test a different column (e.g., one that doesn't deal with numbers) and see that it gets sorted correctly too. Here's a test that exercises the ",(0,i.kt)("inlineCode",{parentName:"p"},"Email")," column."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: Tables.java\n// ...\n    @Test\n    public void withoutHelpfulMarkupEmailAscending() {\n        driver.get("http://the-internet.herokuapp.com/tables");\n\n        driver.findElement(By.cssSelector("#table1 thead tr th:nth-of-type(3)")).click();\n\n        List<WebElement> emails = driver.findElements(By.cssSelector("#table1 tbody tr td:nth-of-type(3)"));\n        for(int counter = 0; counter < emails.size() -1; counter++){\n            assertThat(\n                    emails.get(counter).getText().compareTo(emails.get(counter + 1).getText()),\n                    is(lessThan(0)));\n        }\n    }\n// ...\n')),(0,i.kt)("p",null,"The mechanism for this is the same except that we don't need to clean the text up or convert it before performing our assertion. And our assertion is using ",(0,i.kt)("inlineCode",{parentName:"p"},"compareTo")," which returns a number based on the result. A negative number means that it's ascending, a positive number descending, and a ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," means the two values are equal."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("p",null,"But What About Older Browsers?"),(0,i.kt)("p",null,"Now we have some working tests that will load the page and check sorting for a couple of columns in both ascending and descending order. Great! But if we run these again an older browser (e.g., Internet Explorer 8, etc.) it will throw an exception stating ",(0,i.kt)("inlineCode",{parentName:"p"},"Unable to find element"),". This is because older browsers don't support CSS Pseudo-classes."),(0,i.kt)("p",null,"You've come a long way, so it's best to get value out of what you've just written. To do that you can run these tests on ",(0,i.kt)("strong",{parentName:"p"},"current browsers")," and submit a request to your front-end developers to update the table's markup with some semantic ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," attributes. Later, when these new locators have been implemented on the page, you can revisit these tests and update them accordingly."),(0,i.kt)("p",null,"Here is markup of what our original table would look like with some helpful attributes added in. It's also the markup from the second table on ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/tables"},"the example page"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"<table id=\"table2\" class=\"tablesorter\">\n    <thead>\n      <tr>\n        <th><span class='last-name'>Last Name</span></th>\n        <th><span class='first-name'>First Name</span></th>\n        <th><span class='email'>Email</span></th>\n        <th><span class='dues'>Due</span></th>\n        <th><span class='web-site'>Web Site</span></th>\n        <th><span class='action'>Action</span></th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td class='last-name'>Smith</td>\n        <td class='first-name'>John</td>\n        <td class='email'>jsmith@gmail.com</td>\n        <td class='dues'>$50.00</td>\n        <td class='web-site'>http://www.jsmith.com</td>\n        <td class='action'>\n          <a href='#edit'>edit</a>\n          <a href='#delete'>delete</a>\n        </td>\n      </tr>\n")),(0,i.kt)("p",null,"With these well-placed, descriptive class attributes our sorting tests become ",(0,i.kt)("em",{parentName:"p"},"a lot")," simpler and more expressive. Let's revisit sorting the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," column in ascending order in a new test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: Tables.java\n// ...\n    @Test\n    public void withHelpfulMarkup()\n    {\n        driver.get("http://the-internet.herokuapp.com/tables");\n        driver.findElement(By.cssSelector("#table2 thead .dues")).click();\n        List<WebElement> dues = driver.findElements(By.cssSelector("#table2 tbody .dues"));\n        List<Double> dueValues = new LinkedList<Double>();\n        for(WebElement element : dues){\n            dueValues.add(Double.parseDouble(element.getText().replace("$", "")));\n        }\n        for(int counter = 0; counter < dueValues.size() - 1; counter++){\n            assertThat(dueValues.get(counter), is(lessThanOrEqualTo(dueValues.get(counter + 1))));\n        }\n    }\n}\n')),(0,i.kt)("p",null,"Not only will these selectors work in current ",(0,i.kt)("em",{parentName:"p"},"and")," older browsers, but they are also more resilient to changes in the table layout since they are not using hard-coded numbers that rely on the column order."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn clean test")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Click the column heading"),(0,i.kt)("li",{parentName:"ul"},"Grab the values for the column"),(0,i.kt)("li",{parentName:"ul"},"Assert that the column values are sorted in the correct order (ascending or descending)"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"CSS Pseudo-classes are a great resource and unlock a lot of potential for your tests; enabling a bit of CSS gymnastics assuming you've come up with a test strategy that rules out older browsers. If you don't have a test strategy or are curious to see how yours compares, check out ",(0,i.kt)("a",{parentName:"p",href:"/docs/what-to-test/18-what-to-test"},"tip 18"),"."),(0,i.kt)("p",null,"For more info on CSS Pseudo-classes see ",(0,i.kt)("a",{parentName:"p",href:"https://saucelabs.com/resources/selenium/css-selectors"},"this write-up by Sauce Labs"),", and maybe ",(0,i.kt)("a",{parentName:"p",href:"http://www.w3.org/TR/css3-selectors/#structural-pseudos"},"the W3C spec CSS3")," if you're feeling adventurous. And for a more in-depth walk-through on HTML Table design check out Treehouse's write-up ",(0,i.kt)("a",{parentName:"p",href:"http://blog.teamtreehouse.com/how-to-code-sortable-tabular-data-with-jquery"},"here"),"."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},19402:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:2,hide_sidebar:!0,publish_date:new Date("2015-10-13T00:00:00.000Z"),last_update:{date:new Date("2023-03-24T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-work-with-tables/javascript",id:"how-to-work-with-tables/javascript",title:"javascript",description:"A Solution",source:"@site/docs/25-how-to-work-with-tables/javascript.md",sourceDirName:"25-how-to-work-with-tables",slug:"/how-to-work-with-tables/javascript",permalink:"/docs/how-to-work-with-tables/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/25-how-to-work-with-tables/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1679616e3,formattedLastUpdatedAt:"Mar 24, 2023",frontMatter:{language:"javascript",level:2,hide_sidebar:!0,publish_date:"2015-10-13T00:00:00.000Z",last_update:{date:"2023-03-24T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"You can easily traverse a table through the use of ",(0,i.kt)("a",{parentName:"p",href:"http://www.w3schools.com/css/css_pseudo_classes.asp"},"CSS Pseudo-classes"),"."),(0,i.kt)("p",null,"But keep in mind that if you care about older browsers (e.g., Internet Explorer 8, et al), then this approach won't work on them. In those cases your best bet is to find a workable solution for the short term and get a front-end developer to update the table with helpful attributes."),(0,i.kt)("blockquote",null,(0,i.kt)("h3",{parentName:"blockquote",id:"a-quick-primer-on-tables-and-css-pseudo-classes"},(0,i.kt)("em",{parentName:"h3"},(0,i.kt)("strong",{parentName:"em"},"A quick primer on Tables and CSS Pseudo-classes"))),(0,i.kt)("p",{parentName:"blockquote"},"Understanding the broad strokes of an HTML table's structure goes a long way in writing effective automation against it. So here's a quick primer."),(0,i.kt)("blockquote",{parentName:"blockquote"},(0,i.kt)("p",{parentName:"blockquote"},"A table has:"),(0,i.kt)("ul",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ul"},"a header (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"<thead>"),")"),(0,i.kt)("li",{parentName:"ul"},"a body (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"<tbody>"),")."),(0,i.kt)("li",{parentName:"ul"},"rows (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"<tr>"),") -- horizontal slats of data"),(0,i.kt)("li",{parentName:"ul"},"columns -- vertical slats of data"))),(0,i.kt)("blockquote",{parentName:"blockquote"},(0,i.kt)("p",{parentName:"blockquote"},"Columns are made up of cells, which are:"),(0,i.kt)("ul",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ul"},"a header (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"<th>"),")"),(0,i.kt)("li",{parentName:"ul"},"one or more standard cells (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"<td>")," -- which is short for ",(0,i.kt)("strong",{parentName:"li"},"table data"),")"))),(0,i.kt)("p",{parentName:"blockquote"},"CSS Pseudo-classes work by walking through the structure of an object and targeting a specific part of it based on a relative number (e.g. the ",(0,i.kt)("strong",{parentName:"p"},"third")," ",(0,i.kt)("inlineCode",{parentName:"p"},"<td>")," cell from a row in the table body). This works well with tables since we can grab all instances of a target (e.g. the third ",(0,i.kt)("inlineCode",{parentName:"p"},"<td>")," cell from each ",(0,i.kt)("inlineCode",{parentName:"p"},"<tr>")," in the table body) and use it in our test -- which would give us all of the data for the third column.")),(0,i.kt)("p",null,"Let's step through some examples for a common set of table functionality like sorting columns in ascending and descending order."),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: You can see the application under test ",(0,i.kt)("a",{parentName:"strong",href:"http://the-internet.herokuapp.com/tables"},"here"),". It's an example from ",(0,i.kt)("a",{parentName:"strong",href:"https://github.com/tourdedave/the-internet"},"the-internet"),". In the example there are 2 tables. We will start with the first table and then work with the second.")),(0,i.kt)("p",null,"We kick things off by pulling in our requisite libraries, declare our test class, and wire up some test setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/tables.spec.js\nconst assert = require("assert");\nconst { Builder, By, Key } = require("selenium-webdriver");\n\ndescribe("Tables", function() {\n  let driver;\n\n  beforeEach(async function() {\n  this.timeout(60000);\n    driver = await new Builder().forBrowser("chrome").build();\n  });\n\n  afterEach(async function() {\n    await driver.quit();\n  });\n// ...\n')),(0,i.kt)("p",null,"Here is the markup from the first table example we're working with. Note that it does not have any ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," attributes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"<table id=\"table1\" class=\"tablesorter\">\n    <thead>\n      <tr>\n        <th><span>Last Name</span></th>\n        <th><span>First Name</span></th>\n        <th><span>Email</span></th>\n        <th><span>Due</span></th>\n        <th><span>Web Site</span></th>\n        <th><span>Action</span></th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>Smith</td>\n        <td>John</td>\n        <td>jsmith@gmail.com</td>\n        <td>$50.00</td>\n        <td>http://www.jsmith.com</td>\n        <td>\n          <a href='#edit'>edit</a>\n          <a href='#delete'>delete</a>\n        </td>\n      </tr>\n")),(0,i.kt)("p",null,"There are 6 columns (",(0,i.kt)("inlineCode",{parentName:"p"},"Last Name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"First Name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Email"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Due"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Web Site"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Action"),"). Each one is sortable by clicking on the column header. The first click should sort them in ascending order, the second click in descending order."),(0,i.kt)("p",null,"There is a small sampling of data in the table to work with (4 rows worth). So we should be able to sort the data, grab it, and confirm that it sorted correctly. So lets do that in our first test with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," column using a CSS pseudo Class."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/tables.spec.js\n// ...\n  it("should sort number column in ascending order", async function() {\n    await driver.get("http://the-internet.herokuapp.com/tables");\n    await driver\n      .findElement(By.css("#table1 thead tr th:nth-of-type(4)"))\n      .click();\n    const due_column = await driver.findElements(\n      By.css("#table1 tbody tr td:nth-of-type(4)")\n    );\n    let dues = [];\n    for (const entry in due_column) {\n      const text = await due_column[entry].getText();\n      dues.push(Number(text.replace("$", "")));\n    }\n    assert(dues === dues.sort());\n  });\n// ...\n')),(0,i.kt)("p",null,"After loading the page we find and click the column heading that we want with a CSS pseudo-class (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"#table1 thead tr th:nth-of-type(4)"),"). This locator targets the 4th ",(0,i.kt)("inlineCode",{parentName:"p"},"<th>")," element in the table heading section (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"<thead>"),") (which is the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," column heading)."),(0,i.kt)("p",null,"We then use another pseudo-class to find all ",(0,i.kt)("inlineCode",{parentName:"p"},"<td>")," elements within the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," column by looking for the 4th ",(0,i.kt)("inlineCode",{parentName:"p"},"<td>")," of each row in the table body. Once we have them we grab each of their text values, clean them up (",(0,i.kt)("inlineCode",{parentName:"p"},".replace('$','')"),"), convert them to a number (",(0,i.kt)("inlineCode",{parentName:"p"},"Number()"),"), and store them all in a array called ",(0,i.kt)("inlineCode",{parentName:"p"},"dues"),". We then compare this collection to a sorted version of itself to see if they match. If they do, then the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," column was sorted in ascending order and the test will pass."),(0,i.kt)("p",null,"If we wanted to test for descending order, we would need to click the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," heading twice after loading the page. Other than that the code is identical except for the assertion which is checking the same thing but reversing the sort order."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/tables.spec.js\n// ...\n  it("should sort number column in descending order", async function() {\n    await driver.get("http://the-internet.herokuapp.com/tables");\n    await driver\n      .findElement(By.css("#table1 thead tr th:nth-of-type(4)"))\n      .click();\n    await driver\n      .findElement(By.css("#table1 thead tr th:nth-of-type(4)"))\n      .click();\n    const due_column = await driver.findElements(\n      By.css("#table1 tbody tr td:nth-of-type(4)")\n    );\n    let dues = [];\n    for (const entry in due_column) {\n      const text = await due_column[entry].getText();\n      dues.push(Number(text.replace("$", "")));\n    }\n    assert(dues === dues.sort().reverse());\n  });\n// ...\n')),(0,i.kt)("p",null,"We can easily use this approach to test a different column (e.g., one that doesn't deal with numbers) and see that it gets sorted correctly too. Here's a test that exercises the ",(0,i.kt)("inlineCode",{parentName:"p"},"Email")," column."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/tables.spec.js\n// ...\n  it("should sort text column in ascending", async function() {\n    await driver.get("http://the-internet.herokuapp.com/tables");\n    await driver\n      .findElement(By.css("#table1 thead tr th:nth-of-type(3)"))\n      .click();\n    const email_column = await driver.findElements(\n      By.css("#table1 tbody tr td:nth-of-type(3)")\n    );\n    let emails = [];\n    for (const entry in email_column) {\n      emails.push(await email_column[entry].getText());\n    }\n    assert(emails === emails.sort());\n  });\n// ...\n')),(0,i.kt)("p",null,"The mechanism for this is the same except that we don't need to clean the text up or convert it before performing our assertion."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("p",null,"But what about older browsers?"),(0,i.kt)("p",null,"If we run these against an older browser (e.g., Internet Explorer 8, etc.) it will throw an exception stating ",(0,i.kt)("inlineCode",{parentName:"p"},"Unable to find element"),". This is because older browsers don't support CSS Pseudo-classes."),(0,i.kt)("p",null,"You've come a long way, so it's best to get value out of what you've just written. To do that you can run these tests on ",(0,i.kt)("strong",{parentName:"p"},"current browsers")," and submit a request to your front-end developers to update the table markup with some semantic ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," attributes. Later, when these new locators have been implemented on the page, you can revisit these tests and update them accordingly."),(0,i.kt)("p",null,"Here is markup of what our original table would look like with some helpful attributes added in. It's also the markup from the second example of ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/tables"},"our application under test"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"<table id=\"table2\" class=\"tablesorter\">\n    <thead>\n      <tr> <th><span class='last-name'>Last Name</span></th>\n        <th><span class='first-name'>First Name</span></th>\n        <th><span class='email'>Email</span></th>\n        <th><span class='dues'>Due</span></th>\n        <th><span class='web-site'>Web Site</span></th>\n        <th><span class='action'>Action</span></th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td class='last-name'>Smith</td>\n        <td class='first-name'>John</td>\n        <td class='email'>jsmith@gmail.com</td>\n        <td class='dues'>$50.00</td>\n        <td class='web-site'>http://www.jsmith.com</td>\n        <td class='action'>\n          <a href='#edit'>edit</a>\n          <a href='#delete'>delete</a>\n        </td>\n      </tr>\n")),(0,i.kt)("p",null,"With these new attributes the locators in our sorting tests become a lot simpler and more expressive. Let's write a new ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," ascending order test to demonstrate."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/tables.spec.js\n// ...\n  it("sort number column in ascending order with helpful locators", async function() {\n    await driver.get("http://the-internet.herokuapp.com/tables");\n    driver.findElement(By.css("#table2 thead .dues")).click();\n    const due_column = await driver.findElements(By.css("#table2 tbody .dues"));\n    let dues = [];\n    for (const entry in due_column) {\n      const text = await due_column[entry].getText();\n      dues.push(Number(text.replace("$", "")));\n    }\n    assert(dues === dues.sort());\n  });\n});\n')),(0,i.kt)("p",null,"Not only will these selectors work in current ",(0,i.kt)("em",{parentName:"p"},"and")," older browsers, but they are also more resilient to changes in the table layout since they are not using hard-coded numbers that rely on the column order."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mocha")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Browser opens"),(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Click the column heading"),(0,i.kt)("li",{parentName:"ul"},"Grab the values for the target column"),(0,i.kt)("li",{parentName:"ul"},"Assert that the column is sorted in the correct order (ascending or descending depending on the test)"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"CSS Pseudo-classes are a great resource and unlock a lot of potential for your tests; enabling a bit of CSS gymnastics assuming you've come up with a test strategy that rules out older browsers. If you don't have a test strategy or are curious to see how yours compares, check out ",(0,i.kt)("a",{parentName:"p",href:"/docs/what-to-test/18-what-to-test"},"tip 18"),"."),(0,i.kt)("p",null,"For more info on CSS Pseudo-classes see ",(0,i.kt)("a",{parentName:"p",href:"https://saucelabs.com/resources/selenium/css-selectors"},"this write-up by Sauce Labs"),", and maybe ",(0,i.kt)("a",{parentName:"p",href:"http://www.w3.org/TR/css3-selectors/#structural-pseudos"},"the W3C spec CSS3")," if you're feeling adventurous. And for a more in-depth walk-through on HTML Table design check out Treehouse's write-up ",(0,i.kt)("a",{parentName:"p",href:"http://blog.teamtreehouse.com/how-to-code-sortable-tabular-data-with-jquery"},"here"),"."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},7778:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:2,hide_sidebar:!0,publish_date:new Date("2016-11-23T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-work-with-tables/python",id:"how-to-work-with-tables/python",title:"python",description:"A Solution",source:"@site/docs/25-how-to-work-with-tables/python.md",sourceDirName:"25-how-to-work-with-tables",slug:"/how-to-work-with-tables/python",permalink:"/docs/how-to-work-with-tables/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/25-how-to-work-with-tables/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"python",level:2,hide_sidebar:!0,publish_date:"2016-11-23T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example 1",id:"example-1",level:2},{value:"But What About Older Browsers?",id:"but-what-about-older-browsers",level:3},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"You can easily traverse a table through the use of ",(0,i.kt)("a",{parentName:"p",href:"http://www.w3schools.com/css/css_pseudo_classes.asp"},"CSS Pseudo-classes"),"."),(0,i.kt)("p",null,"But keep in mind that if you care about older browsers (e.g., Internet Explorer 8, et al), then this approach won't work on them. In those cases your best bet is to find a workable solution for the short term and get a front-end developer to update the table with helpful attributes."),(0,i.kt)("blockquote",null,(0,i.kt)("h3",{parentName:"blockquote",id:"a-quick-primer-on-tables-and-css-pseudo-classes"},(0,i.kt)("em",{parentName:"h3"},(0,i.kt)("strong",{parentName:"em"},"A quick primer on Tables and CSS Pseudo-classes"))),(0,i.kt)("p",{parentName:"blockquote"},"Understanding the broad strokes of an HTML table's structure goes a long way in writing effective automation against it. So here's a quick primer."),(0,i.kt)("blockquote",{parentName:"blockquote"},(0,i.kt)("p",{parentName:"blockquote"},"A table has:"),(0,i.kt)("ul",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ul"},"a header (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"<thead>"),")"),(0,i.kt)("li",{parentName:"ul"},"a body (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"<tbody>"),")."),(0,i.kt)("li",{parentName:"ul"},"rows (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"<tr>"),") -- horizontal slats of data"),(0,i.kt)("li",{parentName:"ul"},"columns -- vertical slats of data"))),(0,i.kt)("blockquote",{parentName:"blockquote"},(0,i.kt)("p",{parentName:"blockquote"},"Columns are made up of cells, which are:"),(0,i.kt)("ul",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ul"},"a header (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"<th>"),")"),(0,i.kt)("li",{parentName:"ul"},"one or more standard cells (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"<td>")," -- which is short for ",(0,i.kt)("strong",{parentName:"li"},"table data"),")"))),(0,i.kt)("p",{parentName:"blockquote"},"CSS Pseudo-classes work by walking through the structure of an object and targeting a specific part of it based on a relative number (e.g. the ",(0,i.kt)("strong",{parentName:"p"},"third")," ",(0,i.kt)("inlineCode",{parentName:"p"},"<td>")," cell from a row in the table body). This works well with tables since we can grab all instances of a target (e.g. the third ",(0,i.kt)("inlineCode",{parentName:"p"},"<td>")," cell from each ",(0,i.kt)("inlineCode",{parentName:"p"},"<tr>")," in the table body) and use it in our test -- which would give us all of the data for the third column.")),(0,i.kt)("p",null,"Let's step through some examples for a common set of table functionality like sorting columns in ascending and descending order."),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: You can see the application under test ",(0,i.kt)("a",{parentName:"strong",href:"http://the-internet.herokuapp.com/tables"},"here"),". It's an example from ",(0,i.kt)("a",{parentName:"strong",href:"https://github.com/tourdedave/the-internet"},"the-internet"),". In the example there are 2 tables. We will start with the first table and then work with the second.")),(0,i.kt)("p",null,"We kick things off by pulling in our requisite libraries (",(0,i.kt)("inlineCode",{parentName:"p"},"import unittest")," for our test framework and ",(0,i.kt)("inlineCode",{parentName:"p"},"from selenium import webdriver")," to drive the browser), declare our test class, and wire up some test ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: tables.py\nimport unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\n\nclass Tables(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n\n    def tearDown(self):\n        self.driver.quit()\n\n# ...\n")),(0,i.kt)("p",null,"Here is the markup from the first table example we're working with. Note that it does not have any ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," attributes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"<table id=\"table1\" class=\"tablesorter\">\n    <thead>\n      <tr>\n        <th><span>Last Name</span></th>\n        <th><span>First Name</span></th>\n        <th><span>Email</span></th>\n        <th><span>Due</span></th>\n        <th><span>Web Site</span></th>\n        <th><span>Action</span></th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>Smith</td>\n        <td>John</td>\n        <td>jsmith@gmail.com</td>\n        <td>$50.00</td>\n        <td>http://www.jsmith.com</td>\n        <td>\n          <a href='#edit'>edit</a>\n          <a href='#delete'>delete</a>\n        </td>\n      </tr>\n")),(0,i.kt)("p",null,"There are 6 columns (",(0,i.kt)("inlineCode",{parentName:"p"},"Last Name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"First Name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Email"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Due"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Web Site"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Action"),"). Each one is sortable by clicking on the column header. The first click should sort them in ascending order, the second click in descending order."),(0,i.kt)("p",null,"There is a small sampling of data in the table to work with (4 rows worth). So we should be able to sort the data, grab it, and confirm that it sorted correctly. So lets do that in our first test with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," column using a CSS Pseudo Class."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: tables.py\n# ...\n  def test_sort_number_column_in_ascending_order_with_limited_locators(self):\n      driver = self.driver\n      driver.get('http://the-internet.herokuapp.com/tables')\n      WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.CSS_SELECTOR,'#table1 thead tr th:nth-child(4)'))).click()\n      due_column = driver.find_elements(By.CSS_SELECTOR,'#table1 tbody tr td:nth-child(4)')\n      dues = [float(due.text.replace('$','')) for due in due_column]\n      assert dues == sorted(dues)\n\n# ...\n")),(0,i.kt)("p",null,"After loading the page we find and click the column heading that we want with a CSS Pseudo-class (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"#table1 thead tr th:nth-child(4)"),"). This locator targets the 4th ",(0,i.kt)("inlineCode",{parentName:"p"},"<th>")," element in the table heading section (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"<thead>"),") (which is the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," column heading)."),(0,i.kt)("p",null,"We then use another pseudo-class to find all ",(0,i.kt)("inlineCode",{parentName:"p"},"<td>")," elements within the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," column by looking for the 4th ",(0,i.kt)("inlineCode",{parentName:"p"},"<td>")," of each row in the table body. Once we have them we grab each of their text values, clean them up (",(0,i.kt)("inlineCode",{parentName:"p"},".replace('$','')"),"), convert them to a number (",(0,i.kt)("inlineCode",{parentName:"p"},"flat()"),"), and store them all in a list called ",(0,i.kt)("inlineCode",{parentName:"p"},"dues"),". We then compare this collection to a sorted version of itself to see if they match. If they do, then the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," column was sorted in ascending order and the test will pass."),(0,i.kt)("p",null,"If we wanted to test for descending order, we would need to click the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," heading twice after loading the page. Other than that the code is identical except for the assertion which is checking the same thing but reversing the sort order."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: tables.py\n# ...\n    def test_sort_number_column_in_descending_order_with_limited_locators(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/tables')\n        WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.CSS_SELECTOR,'#table1 thead tr th:nth-child(4)'))).click()\n        WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.CSS_SELECTOR,'#table1 thead tr th:nth-child(4)'))).click()\n        due_column = driver.find_elements(By.CSS_SELECTOR,'#table1 tbody tr td:nth-child(4)')\n        dues = [float(due.text.replace('$','')) for due in due_column]\n        assert dues == sorted(dues, reverse=True)\n\n# ...\n")),(0,i.kt)("p",null,"We can easily use this approach to test a different column (e.g., one that doesn't deal with numbers) and see that it gets sorted correctly too. Here's a test that exercises the ",(0,i.kt)("inlineCode",{parentName:"p"},"Email")," column."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: tables.py\n# ...\n    def test_sort_text_column_in_ascending_order_with_limited_locators(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/tables')\n        WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.CSS_SELECTOR,'#table1 thead tr th:nth-of-type(3)'))).click()\n        email_column = driver.find_elements(By.CSS_SELECTOR,'#table1 tbody tr td:nth-of-type(3)')\n        emails = [email.text for email in email_column]\n        assert emails == sorted(emails)\n\n# ...\n")),(0,i.kt)("p",null,"The mechanism for this is the same as before, except that we don't need to clean the text up or convert it before performing our assertion."),(0,i.kt)("h3",{id:"but-what-about-older-browsers"},"But What About Older Browsers?"),(0,i.kt)("p",null,"Now we have some working tests that will load the page and check sorting for a couple of columns in both ascending and descending order. Great! But if we run these again an older browser (e.g., Internet Explorer 8, etc.) it will throw an exception stating ",(0,i.kt)("inlineCode",{parentName:"p"},"Unable to find element"),". This is because older browsers don't support CSS Pseudo-classes."),(0,i.kt)("p",null,"You've come a long way, so it's best to get value out of what you've just written. To do that you can run these tests on ",(0,i.kt)("strong",{parentName:"p"},"current browsers")," and submit a request to your front-end developers to update the table markup with some semantic ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," attributes. Later, when these new locators have been implemented on the page, you can revisit these tests and update them accordingly."),(0,i.kt)("p",null,"Here is markup of what our original table would look like with some helpful attributes added in. It's also the markup from the second table on ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/tables"},"our application under test"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"<table id=\"table2\" class=\"tablesorter\">\n    <thead>\n      <tr>\n        <th><span class='last-name'>Last Name</span></th>\n        <th><span class='first-name'>First Name</span></th>\n        <th><span class='email'>Email</span></th>\n        <th><span class='dues'>Due</span></th>\n        <th><span class='web-site'>Web Site</span></th>\n        <th><span class='action'>Action</span></th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td class='last-name'>Smith</td>\n        <td class='first-name'>John</td>\n        <td class='email'>jsmith@gmail.com</td>\n        <td class='dues'>$50.00</td>\n        <td class='web-site'>http://www.jsmith.com</td>\n        <td class='action'>\n          <a href='#edit'>edit</a>\n          <a href='#delete'>delete</a>\n        </td>\n      </tr>\n")),(0,i.kt)("p",null,"With these new attributes the locators in our sorting tests become a lot simpler and more expressive. Let's write a new ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," ascending order test to demonstrate."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: tables.py\n# ...\n    def test_sort_number_column_in_ascending_order_with_helpful_locators(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/tables')\n        WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.CSS_SELECTOR,'#table2 thead .dues'))).click()\n        due_column = driver.find_elements(By.CSS_SELECTOR,'#table2 tbody .dues')\n        dues = [float(due.text.replace('$','')) for due in due_column]\n        assert dues == sorted(dues)\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,i.kt)("p",null,"Not only will these selectors work in current ",(0,i.kt)("em",{parentName:"p"},"and")," older browsers, but they are also more resilient to changes in the table layout since they are not using hard-coded numbers that rely on the column order."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"python tables.py")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Browser opens"),(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Click the column heading"),(0,i.kt)("li",{parentName:"ul"},"Grab the values for the target column"),(0,i.kt)("li",{parentName:"ul"},"Assert that the column is sorted in the correct order (ascending or descending depending on the test)"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"CSS Pseudo-classes are a great resource and unlock a lot of potential for your tests. They enable a bit of CSS gymnastics but that's only assuming you've come up with a test strategy that rules out older browsers. If you don't have a test strategy or are curious to see how yours compares, check out ",(0,i.kt)("a",{parentName:"p",href:"/docs/what-to-test/18-what-to-test"},"tip 18"),"."),(0,i.kt)("p",null,"For more info on CSS Pseudo-classes see ",(0,i.kt)("a",{parentName:"p",href:"https://saucelabs.com/resources/selenium/css-selectors"},"this write-up by Sauce Labs"),", and maybe ",(0,i.kt)("a",{parentName:"p",href:"http://www.w3.org/TR/css3-selectors/#structural-pseudos"},"the W3C spec for CSS3")," if you're feeling adventurous. And for a more in-depth walk-through on HTML Table design check out Treehouse's write-up ",(0,i.kt)("a",{parentName:"p",href:"http://blog.teamtreehouse.com/how-to-code-sortable-tabular-data-with-jquery"},"here"),"."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},27115:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:2,hide_sidebar:!0,publish_date:new Date("2015-10-13T00:00:00.000Z"),last_update:{date:new Date("2023-03-09T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-work-with-tables/ruby",id:"how-to-work-with-tables/ruby",title:"ruby",description:"A Solution",source:"@site/docs/25-how-to-work-with-tables/ruby.md",sourceDirName:"25-how-to-work-with-tables",slug:"/how-to-work-with-tables/ruby",permalink:"/docs/how-to-work-with-tables/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/25-how-to-work-with-tables/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:167832e4,formattedLastUpdatedAt:"Mar 9, 2023",frontMatter:{language:"ruby",level:2,hide_sidebar:!0,publish_date:"2015-10-13T00:00:00.000Z",last_update:{date:"2023-03-09T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"You can easily traverse a table through the use of ",(0,i.kt)("a",{parentName:"p",href:"http://www.w3schools.com/css/css_pseudo_classes.asp"},"CSS Pseudo-classes"),"."),(0,i.kt)("p",null,"But keep in mind that if you care about older browsers (e.g., Internet Explorer 8, et al), then this approach won't work on them. In those cases your best bet is to find a workable solution for the short term and get a front-end developer to update the table with helpful attributes."),(0,i.kt)("blockquote",null,(0,i.kt)("h3",{parentName:"blockquote",id:"a-quick-primer-on-tables-and-css-pseudo-classes"},(0,i.kt)("em",{parentName:"h3"},(0,i.kt)("strong",{parentName:"em"},"A quick primer on Tables and CSS Pseudo-classes"))),(0,i.kt)("p",{parentName:"blockquote"},"Understanding the broad strokes of an HTML table's structure goes a long way in writing effective automation against it. So here's a quick primer."),(0,i.kt)("blockquote",{parentName:"blockquote"},(0,i.kt)("p",{parentName:"blockquote"},"A table has:"),(0,i.kt)("ul",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ul"},"a header (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"<thead>"),")"),(0,i.kt)("li",{parentName:"ul"},"a body (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"<tbody>"),")."),(0,i.kt)("li",{parentName:"ul"},"rows (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"<tr>"),") -- horizontal slats of data"),(0,i.kt)("li",{parentName:"ul"},"columns -- vertical slats of data"))),(0,i.kt)("blockquote",{parentName:"blockquote"},(0,i.kt)("p",{parentName:"blockquote"},"Columns are made up of cells, which are:"),(0,i.kt)("ul",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ul"},"a header (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"<th>"),")"),(0,i.kt)("li",{parentName:"ul"},"one or more standard cells (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"<td>")," -- which is short for ",(0,i.kt)("strong",{parentName:"li"},"table data"),")"))),(0,i.kt)("p",{parentName:"blockquote"},"CSS Pseudo-classes work by walking through the structure of an object and targeting a specific part of it based on a relative number (e.g. the ",(0,i.kt)("strong",{parentName:"p"},"third")," ",(0,i.kt)("inlineCode",{parentName:"p"},"<td>")," cell from a row in the table body). This works well with tables since we can grab all instances of a target (e.g. the third ",(0,i.kt)("inlineCode",{parentName:"p"},"<td>")," cell from each ",(0,i.kt)("inlineCode",{parentName:"p"},"<tr>")," in the table body) and use it in our test -- which would give us all of the data for the third column.")),(0,i.kt)("p",null,"Let's step through some examples for a common set of table functionality like sorting columns in ascending and descending order."),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: You can see the application under test ",(0,i.kt)("a",{parentName:"strong",href:"http://the-internet.herokuapp.com/tables"},"here"),". It's an example from ",(0,i.kt)("a",{parentName:"strong",href:"https://github.com/tourdedave/the-internet"},"the-internet"),". In the example there are 2 tables. We will start with the first table and then work with the second.")),(0,i.kt)("p",null,"We kick things off by requiring our dependent libraries (",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webriver")," to drive the browser and ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," and its matchers to handle our assertions) and wiring up some ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods to handle our test configuration."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: table_sort.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Here is the markup from the first table example we're working with. Note that it does not have any ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," attributes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"<table id=\"table1\" class=\"tablesorter\">\n    <thead>\n      <tr>\n        <th><span>Last Name</span></th>\n        <th><span>First Name</span></th>\n        <th><span>Email</span></th>\n        <th><span>Due</span></th>\n        <th><span>Web Site</span></th>\n        <th><span>Action</span></th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>Smith</td>\n        <td>John</td>\n        <td>jsmith@gmail.com</td>\n        <td>$50.00</td>\n        <td>http://www.jsmith.com</td>\n        <td>\n          <a href='#edit'>edit</a>\n          <a href='#delete'>delete</a>\n        </td>\n      </tr>\n")),(0,i.kt)("p",null,"There are 6 columns (",(0,i.kt)("inlineCode",{parentName:"p"},"Last Name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"First Name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Email"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Due"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Web Site"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Action"),"). Each one is sortable by clicking on the column header. The first click will sort them in ascending order, the second click in descending order."),(0,i.kt)("p",null,"There is a small sampling of data in the table to work with (4 rows worth), so we should be able to sort the data, grab it, and confirm that it sorted correctly. So let's do that in our first test with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," column using a CSS Pseudo Class."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# ...\n\nrun do\n  @driver.get 'http://the-internet.herokuapp.com/tables'\n\n  @driver.find_element(css: '#table1 thead tr th:nth-of-type(4)').click\n\n  dues = @driver.find_elements(css: '#table1 tbody tr td:nth-of-type(4)')\n  due_values = dues.map { |due| due.text.delete('$').to_f }\n\n  expect(due_values).to eql due_values.sort\nend\n")),(0,i.kt)("p",null,"After loading the page we find and click the column heading that we want with a CSS Pseudo-class (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"#table1 thead tr th:nth-of-type(4)"),"). This locator targets the 4th ",(0,i.kt)("inlineCode",{parentName:"p"},"<th>")," element in the table heading section (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"<thead>"),") (which is the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," column heading)."),(0,i.kt)("p",null,"We then use another pseudo-class to find all ",(0,i.kt)("inlineCode",{parentName:"p"},"<td>")," elements within the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," column by looking for the 4th ",(0,i.kt)("inlineCode",{parentName:"p"},"<td>")," of each row in the table body. Once we have them we grab each of their text values, clean them up (",(0,i.kt)("inlineCode",{parentName:"p"},".delete($)"),"), convert them to a number (",(0,i.kt)("inlineCode",{parentName:"p"},".to_f"),"), and store them all in a collection called ",(0,i.kt)("inlineCode",{parentName:"p"},"due_values"),". We then compare this collection to a sorted version of itself to see if they match. If they do, then the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," column was sorted in ascending order and the test will pass."),(0,i.kt)("p",null,"If we wanted to test for descending order, we would need to click the ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," heading twice after loading the page. Other than that the code is identical except for the assertion which is checking the same thing but reversing the sort order."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# ...\n\nrun do\n  @driver.get 'http://the-internet.herokuapp.com/tables'\n\n  @driver.find_element(css: '#table1 thead tr th:nth-of-type(4)').click\n  @driver.find_element(css: '#table1 thead tr th:nth-of-type(4)').click\n\n  dues = @driver.find_elements(css: '#table1 tbody tr td:nth-of-type(4)')\n  due_values = dues.map { |due| due.text.delete('$').to_f }\n\n  expect(due_values).to eql due_values.sort.reverse\nend\n")),(0,i.kt)("p",null,"We can easily use this approach to test a different column (e.g., one that doesn't deal with numbers) and see that it gets sorted correctly too. Here's a test that exercises the ",(0,i.kt)("inlineCode",{parentName:"p"},"Email")," column."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# ...\n\nrun do\n  @driver.get 'http://the-internet.herokuapp.com/tables'\n\n  @driver.find_element(css: '#table1 thead tr th:nth-of-type(3)').click\n\n  emails = @driver.find_elements(css: '#table1 tbody tr td:nth-of-type(3)')\n  email_values = emails.map { |email| email.text }\n\n  expect(email_values).to eql email_values.sort\nend\n")),(0,i.kt)("p",null,"The mechanism for this is the same except that we don't need to clean the text up or convert it before performing our assertion."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("p",null,"But what about older browsers?"),(0,i.kt)("p",null,"If we run these against an older browser (e.g., Internet Explorer 8, etc.) it will throw an exception stating ",(0,i.kt)("inlineCode",{parentName:"p"},"Unable to find element"),". This is because older browsers don't support CSS Pseudo-classes."),(0,i.kt)("p",null,"You've come a long way, so it's best to get value out of what you've just written. To do that you can run these tests on ",(0,i.kt)("strong",{parentName:"p"},"current browsers")," and submit a request to your front-end developers to update the table markup with some semantic ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," attributes. Later, when these new locators have been implemented on the page, you can revisit these tests and update them accordingly."),(0,i.kt)("p",null,"Here is markup of what our original table would look like with some helpful attributes added in. It's also the markup from the second example of ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/tables"},"our application under test"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"<table id=\"table2\" class=\"tablesorter\">\n    <thead>\n      <tr>\n        <th><span class='last-name'>Last Name</span></th>\n        <th><span class='first-name'>First Name</span></th>\n        <th><span class='email'>Email</span></th>\n        <th><span class='dues'>Due</span></th>\n        <th><span class='web-site'>Web Site</span></th>\n        <th><span class='action'>Action</span></th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td class='last-name'>Smith</td>\n        <td class='first-name'>John</td>\n        <td class='email'>jsmith@gmail.com</td>\n        <td class='dues'>$50.00</td>\n        <td class='web-site'>http://www.jsmith.com</td>\n        <td class='action'>\n          <a href='#edit'>edit</a>\n          <a href='#delete'>delete</a>\n        </td>\n      </tr>\n")),(0,i.kt)("p",null,"With these selectors our sorting tests become a lot simpler and more expressive. Let's take our previous ",(0,i.kt)("inlineCode",{parentName:"p"},"Due")," ascending test and update it to demonstrate."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# ...\nrun do\n  @driver.get 'http://the-internet.herokuapp.com/tables'\n\n  @driver.find_element(css: '#table2 thead .dues').click\n\n  dues = @driver.find_elements(css: '#table2 tbody .dues')\n  due_values = dues.map { |due| due.text.delete('$').to_f }\n\n  expect(due_values).to eql due_values.sort\nend\n")),(0,i.kt)("p",null,"Not only will these selectors work in current ",(0,i.kt)("em",{parentName:"p"},"and")," older browsers, but they are also more resilient to changes in the table layout since they are not using hard-coded numbers that rely on the column order."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby table_sort.rb")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Click the column heading"),(0,i.kt)("li",{parentName:"ul"},"Grab the values for that column"),(0,i.kt)("li",{parentName:"ul"},"Assert that the columns are sorted in the correct order (ascending or descending)"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"CSS Pseudo-classes are a great resource and unlock a lot of potential for your tests; enabling a bit of CSS gymnastics assuming you've come up with a test strategy that rules out older browsers. If you don't have a test strategy or are curious to see how yours compares, check out ",(0,i.kt)("a",{parentName:"p",href:"/docs/what-to-test/18-what-to-test"},"tip 18"),"."),(0,i.kt)("p",null,"For more info on CSS Pseudo-classes see ",(0,i.kt)("a",{parentName:"p",href:"https://saucelabs.com/resources/selenium/css-selectors"},"this write-up by Sauce Labs"),", and maybe ",(0,i.kt)("a",{parentName:"p",href:"http://www.w3.org/TR/css3-selectors/#structural-pseudos"},"the W3C spec CSS3")," if you're feeling adventurous. And for a more in-depth walk-through on HTML Table design check out Treehouse's write-up ",(0,i.kt)("a",{parentName:"p",href:"http://blog.teamtreehouse.com/how-to-code-sortable-tabular-data-with-jquery"},"here"),"."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},92646:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"cloud/csharp",id:"cloud/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/26-cloud/csharp.md",sourceDirName:"26-cloud",slug:"/cloud/csharp",permalink:"/docs/cloud/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/26-cloud/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},78525:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"cloud/java",id:"cloud/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/26-cloud/java.md",sourceDirName:"26-cloud",slug:"/cloud/java",permalink:"/docs/cloud/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/26-cloud/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},48335:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"cloud/javascript",id:"cloud/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/26-cloud/javascript.md",sourceDirName:"26-cloud",slug:"/cloud/javascript",permalink:"/docs/cloud/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/26-cloud/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},32425:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"cloud/python",id:"cloud/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/26-cloud/python.md",sourceDirName:"26-cloud",slug:"/cloud/python",permalink:"/docs/cloud/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/26-cloud/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},55830:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:1,hide_sidebar:!0,publish_date:new Date("2015-09-15T00:00:00.000Z"),last_update:{date:new Date("2023-02-27T00:00:00.000Z")}},o=void 0,l={unversionedId:"cloud/ruby",id:"cloud/ruby",title:"ruby",description:"A Solution",source:"@site/docs/26-cloud/ruby.md",sourceDirName:"26-cloud",slug:"/cloud/ruby",permalink:"/docs/cloud/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/26-cloud/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677456e3,formattedLastUpdatedAt:"Feb 27, 2023",frontMatter:{language:"ruby",level:1,hide_sidebar:!0,publish_date:"2015-09-15T00:00:00.000Z",last_update:{date:"2023-02-27T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Another Browser",id:"another-browser",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Rather than take on the overhead of a test infrastructure, you can easily outsource things to a third-party cloud provider\n(a.k.a. Someone Elses Grid). There are a handful of players in this space, but there's one that stands out --\n",(0,i.kt)("a",{parentName:"p",href:"https://saucelabs.com/"},"Sauce Labs"),"."),(0,i.kt)("p",null,"At the heart of Selenium at scale is the use of Selenium Grid. Selenium Grid lets you distribute test execution across\nseveral machines and you connect to it with ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/webdriver/"},"Selenium WebDriver"),".\nWith Selenium WebDriver you specify the browser type, browser version, and operating system."),(0,i.kt)("p",null,"This is fundamentally how Sauce Labs works. Behind the curtain they are ultimately running Selenium Grid, and they\nreceive and execute your tests through Selenium WebDriver."),(0,i.kt)("p",null,"Here is an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE"),": You'll need an account to use Sauce Labs. You can sign up for a\n",(0,i.kt)("a",{parentName:"p",href:"https://saucelabs.com/sign-up"},"free trial account (no credit-card required)"),"."),(0,i.kt)("p",null,"First we'll include our dependent libraries (to drive the browser and do assertions), and wire up some simple\n",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods. We recommend exporting your Sauce Labs ",(0,i.kt)("inlineCode",{parentName:"p"},"SAUCE_USERNAME")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"SAUCE_ACCESS_KEY")," as environment variables."),(0,i.kt)("p",null,"Here are instructions for setting environment variables on each Operating System:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.architectryan.com/2018/08/31/how-to-change-environment-variables-on-windows-10/"},"Windows")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://apple.stackexchange.com/questions/106778/how-do-i-set-environment-variables-on-os-x"},"macOS")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://askubuntu.com/questions/58814/how-do-i-add-environment-variables"},"Linux"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: cloud.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  options = Selenium::WebDriver::Options.chrome\n  options.browser_version = '109'\n  options.platform_name = 'macOS 13'\n  sauce_options = {}\n  sauce_options[:name] = 'Elemental Selenium - Tip 26 - Hello!'\n  options.add_option('sauce:options', sauce_options)\n\n  url = \"https://#{ENV['SAUCE_USERNAME']}:#{ENV['SAUCE_ACCESS_KEY']}@ondemand.us-west-1.saucelabs.com:443/wd/hub\"\n  @driver = Selenium::WebDriver.for(:remote, :url => url, :capabilities => options)\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Our ",(0,i.kt)("inlineCode",{parentName:"p"},"setup")," method is where the magic is happening. We declare the browser options\nfor Chrome and store it in a variable for immediate reuse. We then set the browser version\n(e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"options.browser_version = '109'"),", but you can also use ",(0,i.kt)("inlineCode",{parentName:"p"},"latest")," to use the most recent\nversion), specify the operating system we would like to use (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"options.platform_name = 'macOS 13'"),"),\nand set the test name (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"sauce_options[:name] = 'Elemental Selenium - Tip 26 - Hello!'"),")."),(0,i.kt)("p",null,"We then connect to Sauce Labs with Selenium WebDriver and feed in our browser options object."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE"),": The URL contains the URI for the Sauce Labs cl service as well as our Sauce user and\naccess credentials. In this case, they are specified through environment variables. But you can\njust as easily hard-code your info here. We recommend exporting your Sauce Labs ",(0,i.kt)("inlineCode",{parentName:"p"},"SAUCE_USERNAME")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"SAUCE_ACCESS_KEY")," as environment variables."),(0,i.kt)("p",null,"Here are instructions for setting environment variables on each Operating System:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.architectryan.com/2018/08/31/how-to-change-environment-variables-on-windows-10/"},"Windows")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://apple.stackexchange.com/questions/106778/how-do-i-set-environment-variables-on-os-x"},"macOS")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://askubuntu.com/questions/58814/how-do-i-add-environment-variables"},"Linux"))),(0,i.kt)("p",null,"Now we're ready to add a test to run in Sauce Labs."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com'\n  expect(@driver.title.include?('The Internet')).to eql true\nend\n")),(0,i.kt)("p",null,"If we save this and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby cloud.rb")," from the command-line) it will execute the test on\nan Chrome 109 browser instance running on macOS 13 (Ventura) in Sauce Labs."),(0,i.kt)("h2",{id:"another-browser"},"Another Browser"),(0,i.kt)("p",null,"If you want to change up the browser, you would just need to alter the options:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"  # For Chrome 110\n  options = Selenium::WebDriver::Options.chrome\n  options.browser_version = '110'\n")),(0,i.kt)("p",null,"Or..."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"  # For Safari 16\n  options = Selenium::WebDriver::Options.safari\n  options.browser_version = '16'\n")),(0,i.kt)("p",null,"Or..."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"  # For Edge 109\n  options = Selenium::WebDriver::Options.edge\n  options.browser_version = '109'\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE"),": You can find a full list of configuration options along with example code for all of Sauce supported\nlanguages at their ",(0,i.kt)("a",{parentName:"p",href:"https://saucelabs.com/products/platform-configurator#/"},"Platform Configurator"),"."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open a specified browser in Sauce Labs"),(0,i.kt)("li",{parentName:"ul"},"Test runs"),(0,i.kt)("li",{parentName:"ul"},"Browser closes"),(0,i.kt)("li",{parentName:"ul"},"Test results (along with a video recording, screenshots, and other debugging information) are available on the\n",(0,i.kt)("a",{parentName:"li",href:"https://docs.saucelabs.com/test-results/viewing-test-results/"},"test results dashboard"),".")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip has helped you get your tests up and running against numerous browsers."),(0,i.kt)("p",null,"There are some other things to consider when using Sauce Labs (e.g., testing your secure apps through\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.saucelabs.com/secure-connections/sauce-connect/"},"Sauce Connect"),", setting the pass/fail status\nfor your tests, and dynamically setting the test name). You can find more information about these things\nin ",(0,i.kt)("a",{parentName:"p",href:"https://docs.saucelabs.com/"},"the Sauce Labs docs"),"."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by\nthousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect\nfor writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool,\nManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at\nnumerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},70161:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:2,hide_sidebar:!0,publish_date:new Date("2016-06-13T00:00:00.000Z"),last_update:{date:new Date("2023-03-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"chrome-driver/csharp",id:"chrome-driver/csharp",title:"csharp",description:"A Solution",source:"@site/docs/29-chrome-driver/csharp.md",sourceDirName:"29-chrome-driver",slug:"/chrome-driver/csharp",permalink:"/docs/chrome-driver/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/29-chrome-driver/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680134400,formattedLastUpdatedAt:"Mar 30, 2023",frontMatter:{language:"csharp",level:2,hide_sidebar:!0,publish_date:"2016-06-13T00:00:00.000Z",last_update:{date:"2023-03-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/webdriver/"},"WebDriver")," works with each of the major browsers through a browser driver which is (ideally) maintained by the browser manufacturer. It is an executable file (consider it a thin layer or a shim) that acts as a bridge between Selenium and the browser."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://chromedriver.chromium.org/downloads"},"ChromeDriver")," is Google Chrome's browser driver. In this specific use case is of using WebDriver with Chrome in testing locally."),(0,i.kt)("p",null,"Let's step through an example using ChromeDriver (",(0,i.kt)("a",{parentName:"p",href:"https://chromedriver.chromium.org/downloads"},"download here"),")."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Before starting, we'll need to download the latest ChromeDriver binary executable from ",(0,i.kt)("a",{parentName:"p",href:"http://chromedriver.storage.googleapis.com/index.html"},"here"),". Once we have it we'll need to tell Selenium where it is. Two ways we can do this are to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Add it to the System PATH"),(0,i.kt)("li",{parentName:"ul"},"Specify it in the Selenium setup")),(0,i.kt)("p",null,"Let's start by including our requisite classes for our test framework (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"using NUnit.Framework"),"), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"using OpenQA.Selenium"),", etc.), accessing C# methods to work with the local file system (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"using System.IO"),"), and start our class with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: Chrome.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\nusing System.IO;\n\npublic class Chrome\n{\n    IWebDriver Driver;\n    string VendorDirectory = Directory.GetParent(\n        Path.GetDirectoryName(typeof(Chrome).Assembly.Location)).\n            Parent.FullName + @"\\Vendor";\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new ChromeDriver(VendorDirectory);\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n')),(0,i.kt)("p",null,"Notice the field variable declaration for ",(0,i.kt)("inlineCode",{parentName:"p"},"VendorDirectory"),". With it we are effectively grabbing the full path of the project directory and appending the ",(0,i.kt)("inlineCode",{parentName:"p"},"Vendor")," directory to it. This is then put to use when creating an instance of Chrome (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"Driver = new ChromeDriver(VendorDirectory);"),")."),(0,i.kt)("p",null,"Now we're ready to add a test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: Chrome.cs\n// ...\n    [Test]\n    public void PageLoads()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com");\n        Assert.That(Driver.Title.Equals("The Internet"));\n    }\n}\n')),(0,i.kt)("p",null,"If we save this file and run the project (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\Chrome.sln"),") it will launch an instance of Chrome, visit the homepage of ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/"},"the-internet"),", and assert that the page title loaded."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run the project (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\Chrome.sln")," from the command-line) here is what will happen."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ChromeDriver starts"),(0,i.kt)("li",{parentName:"ul"},"Chrome opens"),(0,i.kt)("li",{parentName:"ul"},"Test runs"),(0,i.kt)("li",{parentName:"ul"},"Chrome closes"),(0,i.kt)("li",{parentName:"ul"},"ChromeDriver stops")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip has helped you get a better handle on how WebDriver works with various browsers and saved you some time in your configuration setup. But keep in mind that no two browser drivers are alike, so be sure to check out the documentation for the browser you care about to find out it's specific requirements. For more about specific driver requirements, visit the official ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/webdriver/getting_started/install_drivers/#quick-reference"},"Selenium Quick Reference page for Installing Browser Drivers"),"."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},33115:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:2,hide_sidebar:!0,publish_date:new Date("2015-11-11T00:00:00.000Z"),last_update:{date:new Date("2023-04-03T00:00:00.000Z")}},o=void 0,l={unversionedId:"chrome-driver/java",id:"chrome-driver/java",title:"java",description:"A Solution",source:"@site/docs/29-chrome-driver/java.md",sourceDirName:"29-chrome-driver",slug:"/chrome-driver/java",permalink:"/docs/chrome-driver/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/29-chrome-driver/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:168048e4,formattedLastUpdatedAt:"Apr 3, 2023",frontMatter:{language:"java",level:2,hide_sidebar:!0,publish_date:"2015-11-11T00:00:00.000Z",last_update:{date:"2023-04-03T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/webdriver/"},"WebDriver")," works with each of the major browsers through a browser driver which is (ideally) maintained by the browser manufacturer. It is an executable file (consider it a thin layer or a shim) that acts as a bridge between Selenium and the browser."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://chromedriver.chromium.org/downloads"},"ChromeDriver")," is Google Chrome's browser driver. In this specific use case is of using WebDriver with Chrome in testing locally."),(0,i.kt)("p",null,"Let's step through an example using ChromeDriver (",(0,i.kt)("a",{parentName:"p",href:"https://chromedriver.chromium.org/downloads"},"download here"),")."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Before starting, we'll need to download the latest ChromeDriver binary executable from ",(0,i.kt)("a",{parentName:"p",href:"http://chromedriver.storage.googleapis.com/index.html"},"here"),". Once we have it we'll need to tell Selenium where it is. Two ways we can do this are to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Add it to the System PATH"),(0,i.kt)("li",{parentName:"ul"},"Specify it in the Selenium setup")),(0,i.kt)("p",null,"We'll start by importing our requisite classes (for annotations (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.junit.After"),", etc.), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.openqa.selenium.WebDriver"),", etc.), and matchers for our assertions (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.hamcrest.CoreMatchers"),", etc.)) and start our class with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: ChromeDriverExample.java\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.assertThat;\n\npublic class ChromeDriverExample {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        System.setProperty("web-driver.chrome.driver",\n                System.getProperty("user.dir") + "/../../vendor/chrome-driver-2.15/chromedriver_mac32");\n        driver = new ChromeDriver();\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n// ...\n')),(0,i.kt)("p",null,"Notice that in ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," we are telling Selenium where the ChromeDriver exectuable is with ",(0,i.kt)("inlineCode",{parentName:"p"},'setProperty("webdriver.chrome.driver"')," before creating an instance of the browser. And by using ",(0,i.kt)("inlineCode",{parentName:"p"},'System.getProperty("user.dir")')," we are able to reference the ChromeDriver binary within our project."),(0,i.kt)("p",null,"Now we're ready to add a test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: ChromeDriverExample.java\n// ...\n    @Test\n    public void chromeDriverTest() {\n        driver.get("http://the-internet.herokuapp.com/");\n        assertThat(driver.getTitle(), is(equalTo("The Internet")));\n    }\n\n}\n')),(0,i.kt)("p",null,"If we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn clean test"),") it will launch an instance of Chrome, visit the homepage of ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/"},"the-internet"),", and assert that the page title loaded."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn clean test")," from the command-line) here is what will happen."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ChromeDriver starts"),(0,i.kt)("li",{parentName:"ul"},"Chrome opens"),(0,i.kt)("li",{parentName:"ul"},"Test runs"),(0,i.kt)("li",{parentName:"ul"},"Chrome closes"),(0,i.kt)("li",{parentName:"ul"},"ChromeDriver stops")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip has helped you get a better handle on how WebDriver works with various browsers and saved you some time in your configuration setup. But keep in mind that no two browser drivers are alike, so be sure to check out the documentation for the browser you care about to find out it's specific requirements. For more about specific driver requirements, visit the official ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/webdriver/getting_started/install_drivers/#quick-reference"},"Selenium Quick Reference page for Installing Browser Drivers"),"."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},15761:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"chrome-driver/javascript",id:"chrome-driver/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/29-chrome-driver/javascript.md",sourceDirName:"29-chrome-driver",slug:"/chrome-driver/javascript",permalink:"/docs/chrome-driver/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/29-chrome-driver/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},97035:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:2,hide_sidebar:!0,publish_date:new Date("2016-11-26T00:00:00.000Z"),last_update:{date:new Date("2023-03-09T00:00:00.000Z")}},o=void 0,l={unversionedId:"chrome-driver/python",id:"chrome-driver/python",title:"python",description:"A Solution",source:"@site/docs/29-chrome-driver/python.md",sourceDirName:"29-chrome-driver",slug:"/chrome-driver/python",permalink:"/docs/chrome-driver/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/29-chrome-driver/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:167832e4,formattedLastUpdatedAt:"Mar 9, 2023",frontMatter:{language:"python",level:2,hide_sidebar:!0,publish_date:"2016-11-26T00:00:00.000Z",last_update:{date:"2023-03-09T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/webdriver/"},"WebDriver")," works with each of the major browsers through a browser driver which is (ideally) maintained by the browser manufacturer. It is an executable file (consider it a thin layer or a shim) that acts as a bridge between Selenium and the browser."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://chromedriver.chromium.org/downloads"},"ChromeDriver")," is Google Chrome's browser driver. In this specific use case is of using WebDriver with Chrome in testing locally."),(0,i.kt)("p",null,"Let's step through an example using ChromeDriver (",(0,i.kt)("a",{parentName:"p",href:"https://chromedriver.chromium.org/downloads"},"download here"),")."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Before starting, we'll need to download the latest ChromeDriver binary executable from ",(0,i.kt)("a",{parentName:"p",href:"http://chromedriver.storage.googleapis.com/index.html"},"here"),". Once we have it we'll need to tell Selenium where it is. Two ways we can do this are to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Add it to the System PATH"),(0,i.kt)("li",{parentName:"ul"},"Specify it in the Selenium setup")),(0,i.kt)("p",null,"We'll start by pulling in our requisite libraries for interacting with the operating system (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"import os"),"), our testing framework (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"import unittest"),"), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"from selenium import webdriver"),"), declare our test class, and wire up some test ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: chrome.py\nimport os\nimport unittest\nfrom selenium import webdriver\n\n\nclass Chrome(unittest.TestCase):\n\n    def setUp(self):\n        chromedriver_path = os.getcwd() + '/vendor/chromedriver'\n        self.driver = webdriver.Chrome(chromedriver_path)\n\n    def tearDown(self):\n        self.driver.quit()\n# ...\n")),(0,i.kt)("p",null,"Notice that in ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," we are telling Selenium where the ChromeDriver exectuable is with ",(0,i.kt)("inlineCode",{parentName:"p"},"chromedriver_path")," before creating an instance of the browser and passing it in as an argument."),(0,i.kt)("p",null,"Now we're ready to add a simple test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: chrome.rb\n# ...\n    def test_example_1(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/upload')\n        assert driver.title == 'The Internet'\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"python chrome.py"),") it will launch an instance of Chrome, visit the homepage of ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/"},"the-internet"),", and assert that the page title loaded."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"python chrome.py")," from the command-line) here is what will happen."),(0,i.kt)("u",null,"Example"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ChromeDriver starts"),(0,i.kt)("li",{parentName:"ul"},"Chrome opens"),(0,i.kt)("li",{parentName:"ul"},"Test runs"),(0,i.kt)("li",{parentName:"ul"},"Chrome closes"),(0,i.kt)("li",{parentName:"ul"},"ChromeDriver stops")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip has helped you get a better handle on how WebDriver works with various browsers and saved you some time in your configuration setup. But keep in mind that no two browser drivers are alike, so be sure to check out the documentation for the browser you care about to find out it's specific requirements. For more about specific driver requirements, visit the official ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/webdriver/getting_started/install_drivers/#quick-reference"},"Selenium Quick Reference page for Installing Browser Drivers"),"."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},62944:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:2,hide_sidebar:!0,publish_date:new Date("2015-08-25T00:00:00.000Z"),last_update:{date:new Date("2023-03-15T00:00:00.000Z")}},o=void 0,l={unversionedId:"chrome-driver/ruby",id:"chrome-driver/ruby",title:"ruby",description:"A Solution",source:"@site/docs/29-chrome-driver/ruby.md",sourceDirName:"29-chrome-driver",slug:"/chrome-driver/ruby",permalink:"/docs/chrome-driver/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/29-chrome-driver/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1678838400,formattedLastUpdatedAt:"Mar 15, 2023",frontMatter:{language:"ruby",level:2,hide_sidebar:!0,publish_date:"2015-08-25T00:00:00.000Z",last_update:{date:"2023-03-15T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/webdriver/"},"WebDriver")," works with each of the major browsers through a browser driver which is (ideally) maintained by the browser manufacturer. It is an executable file (consider it a thin layer or a shim) that acts as a bridge between Selenium and the browser."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://chromedriver.chromium.org/downloads"},"ChromeDriver")," is Google Chrome's browser driver. In this specific use case is of using WebDriver with Chrome in testing locally."),(0,i.kt)("p",null,"Let's step through an example using ChromeDriver (",(0,i.kt)("a",{parentName:"p",href:"https://chromedriver.chromium.org/downloads"},"download here"),")."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Before starting, we'll need to download the latest ChromeDriver binary executable from ",(0,i.kt)("a",{parentName:"p",href:"http://chromedriver.storage.googleapis.com/index.html"},"here"),". Once we have it we'll need to tell Selenium where it is. Two ways we can do this are to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Add it to the System PATH"),(0,i.kt)("li",{parentName:"ul"},"Specify it in the Selenium setup")),(0,i.kt)("p",null,"We'll start by pulling in our requisite libraries (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to driver the browser and ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers")," to perform an assertion) and wiring up some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: chrome.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  Selenium::WebDriver::Chrome::Service.driver_path = \"C:\\\\tmp\\\\chromedriver.exe\"\n  @driver = Selenium::WebDriver.for :chrome\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Notice that in ",(0,i.kt)("inlineCode",{parentName:"p"},"setup")," we are telling Selenium where the ChromeDriver exectuable is with ",(0,i.kt)("inlineCode",{parentName:"p"},"driver_path")," before creating an instance of the browser."),(0,i.kt)("p",null,"Now we're ready to add a simple test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: chrome.rb\n# ...\n\nrun do\n  @driver.get 'http://the-internet.herokuapp.com/'\n  expect(@driver.title).to eql 'The Internet'\nend\n")),(0,i.kt)("p",null,"If we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby chrome.rb"),") it will launch an instance of Chrome, visit the homepage of ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/"},"the-internet"),", and assert that the page title loaded."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby chrome.rb")," from the command-line) here is what will happen."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ChromeDriver starts"),(0,i.kt)("li",{parentName:"ul"},"Chrome opens"),(0,i.kt)("li",{parentName:"ul"},"Test runs"),(0,i.kt)("li",{parentName:"ul"},"Chrome closes"),(0,i.kt)("li",{parentName:"ul"},"ChromeDriver stops")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip has helped you get a better handle on how WebDriver works with various browsers and saved you some time in your configuration setup. But keep in mind that no two browser drivers are alike, so be sure to check out the documentation for the browser you care about to find out it's specific requirements. For more about specific driver requirements, visit the official ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/webdriver/getting_started/install_drivers/#quick-reference"},"Selenium Quick Reference page for Installing Browser Drivers"),"."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},93535:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:1,hide_sidebar:!0,publish_date:new Date("2016-06-12T00:00:00.000Z"),last_update:{date:new Date("2023-03-29T00:00:00.000Z")}},o=void 0,l={unversionedId:"work-with-frames/csharp",id:"work-with-frames/csharp",title:"csharp",description:"A Solution",source:"@site/docs/3-work-with-frames/csharp.md",sourceDirName:"3-work-with-frames",slug:"/work-with-frames/csharp",permalink:"/docs/work-with-frames/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/3-work-with-frames/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680048e3,formattedLastUpdatedAt:"Mar 29, 2023",frontMatter:{language:"csharp",level:1,hide_sidebar:!0,publish_date:"2016-06-12T00:00:00.000Z",last_update:{date:"2023-03-29T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Rather than getting frustrated when authoring your tests, you can work with the elements in a frame by telling Selenium to switch to that frame first. Then the rest of your test should be more straightforward."),(0,i.kt)("p",null,"Let's explore further with some examples."),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"First we'll need to include our requisite classes for our test framework (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"NUnit.Framework"),"), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenQA.Selenium"),", etc.), and start our class off with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: Frames.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\n\npublic class Frames\n{\n    IWebDriver Driver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now onto our test. In it we'll step through ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/nested_frames"},"an example of nested frames")," from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: Frames.cs\n// ...\n    [Test]\n    public void NestedFrames()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/nested_frames");\n        Driver.SwitchTo().Frame("frame-top");\n        Driver.SwitchTo().Frame("frame-middle");\n        Assert.That(Driver.FindElement(By.Id("content")).Text.Equals("MIDDLE"));\n    }\n// ...\n')),(0,i.kt)("p",null,"With Selenium's ",(0,i.kt)("a",{parentName:"p",href:"http://seleniumhq.github.io/selenium/docs/api/dotnet/html/M_OpenQA_Selenium_IWebDriver_SwitchTo.htm"},(0,i.kt)("inlineCode",{parentName:"a"},".SwitchTo()"))," method we can easily switch to the frame we want. When using it for frames (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"Driver.SwitchTo().Frame();"),") it accepts either an ID or name attribute. But in order to get the text of the middle frame (e.g., a frame nested within another frame), we need to switch to the parent frame (e.g., the top frame) first ",(0,i.kt)("em",{parentName:"p"},"and then")," switch to the child frame (e.g., the middle frame)."),(0,i.kt)("p",null,"Once we've done that we're able to find the element we need, grab its text, and assert that it's what we expect."),(0,i.kt)("p",null,"While this example helps illustrate the point of frame switching, it's not very practical."),(0,i.kt)("p",null,"Here is a more likely example you'll run into -- working with a WYSIWYG Editor like ",(0,i.kt)("a",{parentName:"p",href:"http://www.tinymce.com/"},"TinyMCE"),". You can see the page we're testing ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/tinymce"},"here"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: Frames.cs\n// ...\n    [Test]\n    public void Iframes()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/tinymce");\n        Driver.SwitchTo().Frame("mce_0_ifr");\n        IWebElement Editor = Driver.FindElement(By.Id("tinymce"));\n        string StartText = Editor.Text;\n        Editor.Clear();\n        Editor.SendKeys("Hello World!");\n        string EndText = Editor.Text;\n        Assert.AreNotEqual(EndText, StartText);\n// ...\n')),(0,i.kt)("p",null,"Once the page loads we switch into the frame that contains TinyMCE and..."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"grab the original text and store it"),(0,i.kt)("li",{parentName:"ul"},"clear and input new text"),(0,i.kt)("li",{parentName:"ul"},"grab the new text value"),(0,i.kt)("li",{parentName:"ul"},"assert that the original and new texts are not the same")),(0,i.kt)("p",null,"Keep in mind that if we need to access a part of the page outside of the frame we're currently in we'll need to switch to it. Thankfully Selenium has a method that enables us to quickly jump back to the top level of the page -- ",(0,i.kt)("a",{parentName:"p",href:"http://seleniumhq.github.io/selenium/docs/api/dotnet/html/M_OpenQA_Selenium_ITargetLocator_DefaultContent.htm"},(0,i.kt)("inlineCode",{parentName:"a"},".DefaultContent();")),"."),(0,i.kt)("p",null,"Here is what that looks like in practice."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: Frames.cs\n// ...\n        Driver.SwitchTo().DefaultContent();\n        string HeaderText = Driver.FindElement(By.CssSelector("h3")).Text;\n        Assert.That(HeaderText.Equals("An iFrame containing the TinyMCE WYSIWYG Editor"));\n    }\n}\n')),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\Frames.sln")," from the command-line) here is what will happen:"),(0,i.kt)("u",null,"Example 1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Switch to the nested frame"),(0,i.kt)("li",{parentName:"ul"},"Grab the text from the frame and assert that Selenium is in the correct place"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("u",null,"Example 2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Switch to the frame that contains the TinyMCE editor"),(0,i.kt)("li",{parentName:"ul"},"Find and store the text in the editor"),(0,i.kt)("li",{parentName:"ul"},"Clear the text in the editor"),(0,i.kt)("li",{parentName:"ul"},"Input new text in the editor"),(0,i.kt)("li",{parentName:"ul"},"Find and store the new text in the editor"),(0,i.kt)("li",{parentName:"ul"},"Assert that the original and new text entries don't match"),(0,i.kt)("li",{parentName:"ul"},"Switch to the top level of the page"),(0,i.kt)("li",{parentName:"ul"},"Grab the text from the top of the page and assert it's what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Now you're ready to handily defeat frames when they cross your path."),(0,i.kt)("p",null,"Thanks to Jonathan Taylor for contributing the initial C# code for this tip!"),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},34108:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:0,hide_sidebar:!0,publish_date:new Date("2015-11-09T00:00:00.000Z"),last_update:{date:new Date("2023-04-02T00:00:00.000Z")}},o=void 0,l={unversionedId:"work-with-frames/java",id:"work-with-frames/java",title:"java",description:"A Solution",source:"@site/docs/3-work-with-frames/java.md",sourceDirName:"3-work-with-frames",slug:"/work-with-frames/java",permalink:"/docs/work-with-frames/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/3-work-with-frames/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680393600,formattedLastUpdatedAt:"Apr 2, 2023",frontMatter:{language:"java",level:0,hide_sidebar:!0,publish_date:"2015-11-09T00:00:00.000Z",last_update:{date:"2023-04-02T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Rather than getting frustrated when authoring your tests, you can work with the elements in a frame by telling Selenium to switch to that frame first. Then the rest of your test should be more straightforward."),(0,i.kt)("p",null,"Let's explore further with some examples."),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"First we'll need to import our requisite classes (for annotations (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.junit.After"),", etc.), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.openqa.selenium.WebDriver"),", etc.), and matchers for our assertions (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.hamcrest.CoreMatchers"),", etc.)) and start our class with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// filename: Frames.java\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.assertThat;\n\npublic class Frames {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now onto our test. In it we'll step through ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/nested_frames"},"an example of nested frames")," from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: Frames.java\n// ...\n    @Test\n    public void nestedFrames() throws Exception {\n        driver.get("http://the-internet.herokuapp.com/nested_frames");\n        driver.switchTo().frame("frame-top");\n        driver.switchTo().frame("frame-middle");\n        assertThat(driver.findElement(By.id("content")).getText(), is(equalTo("MIDDLE")));\n    }\n// ...\n')),(0,i.kt)("p",null,"With Selenium's ",(0,i.kt)("a",{parentName:"p",href:"https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/WebDriver.html#switchTo--"},(0,i.kt)("inlineCode",{parentName:"a"},".switchTo()"))," method we can easily switch to the frame we want. When using it for frames (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"driver.switchTo().frame();"),") it accepts either an ID or name attribute. But in order to get the text of the middle frame (e.g., a frame nested within another frame), we need to switch to the parent frame (e.g., the top frame) first ",(0,i.kt)("em",{parentName:"p"},"and then")," switch to the child frame (e.g., the middle frame)."),(0,i.kt)("p",null,"Once we've done that we're able to find the element we need, grab it's text, and assert that it's what we expect."),(0,i.kt)("p",null,"While this example helps illustrate the point of frame switching, it's not very practical."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("p",null,"Here is a more likely example you'll run into -- working with a WYSIWYG Editor like ",(0,i.kt)("a",{parentName:"p",href:"http://www.tinymce.com/"},"TinyMCE"),". You can see the page we're testing ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/tinymce"},"here"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: Frames.java\n// ...\n    @Test\n    public void iFrames() throws Exception {\n        driver.get("http://the-internet.herokuapp.com/tinymce");\n        driver.switchTo().frame("mce_0_ifr");\n        WebElement editor = driver.findElement(By.id("tinymce"));\n        String beforeText = editor.getText();\n        editor.clear();\n        editor.sendKeys("Hello World!");\n        String afterText = editor.getText();\n        assertThat(afterText, not(equalTo((beforeText))));\n// ...\n')),(0,i.kt)("p",null,"Once the page loads we switch into the frame that contains TinyMCE and..."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"grab the original text and store it"),(0,i.kt)("li",{parentName:"ul"},"clear and input new text"),(0,i.kt)("li",{parentName:"ul"},"grab the new text value"),(0,i.kt)("li",{parentName:"ul"},"assert that the original and new texts are not the same")),(0,i.kt)("p",null,"Keep in mind that if we need to access a part of the page outside of the frame we're currently in we'll need to switch to it. Thankfully Selenium has a method that enables us to quickly jump back to the top level of the page -- ",(0,i.kt)("a",{parentName:"p",href:"https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/WebDriver.TargetLocator.html#defaultContent--"},(0,i.kt)("inlineCode",{parentName:"a"},"driver.switchTo().defaultContent();")),"."),(0,i.kt)("p",null,"Here is what that looks like in practice."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: Frames.java\n// ...\n        driver.switchTo().defaultContent();\n        assertThat(driver.findElement(By.cssSelector("h3")).getText(),\n                is("An iFrame containing the TinyMCE WYSIWYG Editor"));\n    }\n\n}\n')),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn clean test")," from the command-line) here is what will happen:"),(0,i.kt)("u",null,"Example 1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Switch to the nested frame"),(0,i.kt)("li",{parentName:"ul"},"Grab the text from the frame and assert that Selenium is in the correct place"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("u",null,"Example 2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Switch to the frame that contains the TinyMCE editor"),(0,i.kt)("li",{parentName:"ul"},"Find and store the text in the editor"),(0,i.kt)("li",{parentName:"ul"},"Clear the text in the editor"),(0,i.kt)("li",{parentName:"ul"},"Input new text in the editor"),(0,i.kt)("li",{parentName:"ul"},"Find and store the new text in the editor"),(0,i.kt)("li",{parentName:"ul"},"Assert that the original and new text entries don't match"),(0,i.kt)("li",{parentName:"ul"},"Switch to the top level of the page"),(0,i.kt)("li",{parentName:"ul"},"Grab the text from the top of the page and assert it's what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Now you're ready to handily defeat frames when they cross your path."),(0,i.kt)("p",null,"Thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/RomanIsko"},"Roman Isko")," for contributing the initial Java code for this tip."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},54948:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:1,hide_sidebar:!0,publish_date:new Date("2015-08-25T00:00:00.000Z"),last_update:{date:new Date("2023-03-06T00:00:00.000Z")}},o=void 0,l={unversionedId:"work-with-frames/javascript",id:"work-with-frames/javascript",title:"javascript",description:"A Solution",source:"@site/docs/3-work-with-frames/javascript.md",sourceDirName:"3-work-with-frames",slug:"/work-with-frames/javascript",permalink:"/docs/work-with-frames/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/3-work-with-frames/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1678060800,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{language:"javascript",level:1,hide_sidebar:!0,publish_date:"2015-08-25T00:00:00.000Z",last_update:{date:"2023-03-06T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About the Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Rather than getting frustrated when authoring your tests, you can work with the elements in a frame by telling Selenium to switch to that frame first. Then the rest of your test should be more straightforward."),(0,i.kt)("p",null,"Let's explore further with some examples."),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"We'll first need to pull in our requisite libraries, declare our test class, and wire up some setup and teardown methods for our tests."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/frames.spec.js\nconst assert = require("assert");\nconst { Builder, By } = require("selenium-webdriver");\n\ndescribe("Frame Test", function() {\n  let driver;\n\n  beforeEach(async function() {\n    this.timeout(60000)\n    driver = await new Builder().forBrowser("firefox").build();\n  });\n\n  afterEach(async function() {\n    await driver.quit();\n  });\n// ...\n')),(0,i.kt)("p",null,"Now onto our test. In it we'll step through ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/nested_frames"},"an example of nested frames")," which can be found on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/frames.spec.js\n  it("nested_frames", async function() {\n    await driver.get("http://the-internet.herokuapp.com/nested_frames");\n    await driver\n      .switchTo()\n      .frame(await driver.findElement(By.name("frame-top")));\n    await driver\n      .switchTo()\n      .frame(await driver.findElement(By.name("frame-middle")));\n    let content = await driver.findElement(By.id("content")).getText();\n    assert.equal(content, "MIDDLE");\n  });\n// ...\n')),(0,i.kt)("p",null,"With Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},".switchTo().frame")," method we can easily switch to the frame we want. It accepts either a numbered index or WebElement (e.g., the result of a ",(0,i.kt)("inlineCode",{parentName:"p"},"findElement"),")."),(0,i.kt)("p",null,"In order to get the text of the middle frame (e.g., a frame nested within another frame), we first need to switch to the parent frame (e.g., the top frame) ",(0,i.kt)("em",{parentName:"p"},"and then")," switch to the child frame (e.g., the middle frame). Once we've done that we're able to find the element we need, grab its text, and assert that it's what we expect."),(0,i.kt)("p",null,"While this example helps illustrate the point of frame switching, it's not very practical."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("p",null,"Here is a more likely example you'll run into -- working with a WYSIWYG (What You See Is What You Get) Editor like ",(0,i.kt)("a",{parentName:"p",href:"http://www.tinymce.com/"},"TinyMCE"),". You can see the page we're testing ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/tinymce"},"here"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/frames.spec.js\n// ...\n  it("iframes", async function() {\n    await driver.get("http://the-internet.herokuapp.com/tinymce");\n    await driver.switchTo().frame(await driver.findElement(By.id("mce_0_ifr")));\n    const editor = await driver.findElement(By.id("tinymce"));\n    let beforeText = await editor.getText();\n    await editor.clear();\n    await editor.sendKeys("Hello World!");\n    let afterText = await editor.getText();\n    assert.notEqual(afterText, beforeText);\n  });\n});\n')),(0,i.kt)("p",null,"Once the page loads we switch into the frame that contains TinyMCE and..."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"grab the original text and store it"),(0,i.kt)("li",{parentName:"ul"},"clear and input new text"),(0,i.kt)("li",{parentName:"ul"},"grab the new text value"),(0,i.kt)("li",{parentName:"ul"},"assert that the original and new texts are not the same")),(0,i.kt)("p",null,"Keep in mind that if we need to access a part of the page outside of the frame we are currently in we'll need to switch to it. Thankfully Selenium has method that enables us to quickly jump back to the top level of the page -- ",(0,i.kt)("inlineCode",{parentName:"p"},"switchTo.defaultContent()"),"."),(0,i.kt)("p",null,"Here is what that looks like in practice."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/frames.spec.js\n  it("iframes", async function() {\n    await driver.get("http://the-internet.herokuapp.com/tinymce");\n    await driver.switchTo().defaultContent();\n    let txt = await driver.findElement(By.css("h3")).getText();\n    assert.equal(txt, "An iFrame containing the TinyMCE WYSIWYG Editor");\n  });\n});\n')),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If we save the file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mocha")," from the command-line) here is what will happen:"),(0,i.kt)("u",null,"Example 1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Switch to the nested frame"),(0,i.kt)("li",{parentName:"ul"},"Grab the text from the frame and assert that Selenium is in the correct place"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("u",null,"Example 2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Switch to the frame that contains the TinyMCE editor"),(0,i.kt)("li",{parentName:"ul"},"Grab and clear the text in the editor"),(0,i.kt)("li",{parentName:"ul"},"Input and grab new text in the edtitor"),(0,i.kt)("li",{parentName:"ul"},"Assert that the original and new text entries don't match"),(0,i.kt)("li",{parentName:"ul"},"Switch to the top level of the page"),(0,i.kt)("li",{parentName:"ul"},"Grab the text from the top of the page and assert that it's not empty"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Now you can readily defeat frames when they cross your path."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About the Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},27497:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:1,hide_sidebar:!0,publish_date:new Date("2016-11-14T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"work-with-frames/python",id:"work-with-frames/python",title:"python",description:"A Solution",source:"@site/docs/3-work-with-frames/python.md",sourceDirName:"3-work-with-frames",slug:"/work-with-frames/python",permalink:"/docs/work-with-frames/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/3-work-with-frames/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"python",level:1,hide_sidebar:!0,publish_date:"2016-11-14T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About the Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Rather than getting frustrated when authoring your tests, you can work with the elements in a frame by telling Selenium to switch to that frame first. Then the rest of your test should be more straightforward."),(0,i.kt)("p",null,"Let's explore further with some examples."),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"We'll first need to pull in our requisite libraries, declare our test class, and wire up some setup and teardown methods for our tests."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: frames.py\n\nimport unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\nclass Frames(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n\n    def tearDown(self):\n        self.driver.quit()\n\n# ...\n")),(0,i.kt)("p",null,"Now onto our test. In it we'll step through ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/nested_frames"},"an example of nested frames")," which can be found on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: frames.py\n# ...\n    def test_example_1(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/nested_frames')\n        driver.switch_to.frame('frame-top')\n        driver.switch_to.frame('frame-middle')\n        assert driver.find_element(By.ID,'content').text == \"MIDDLE\", \"content should be MIDDLE\"\n\n# ...\n")),(0,i.kt)("p",null,"With Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},".switch_to.frame")," method we can easily switch to the frame we want. It accepts either an ID or name attribute. But in order to get the text of the middle frame (e.g., a frame nested within another frame), we need to switch to the parent frame (e.g., the top frame) ",(0,i.kt)("em",{parentName:"p"},"and then")," switch to the child frame (e.g., the middle frame)."),(0,i.kt)("p",null,"Once we've done that we're able to find the element we need, grab its text, and assert that it's what we expect."),(0,i.kt)("p",null,"While this example helps illustrate the point of frame switching, it's not very practical."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("p",null,"Here is a more likely example you'll run into -- working with a WYSIWYG Editor like ",(0,i.kt)("a",{parentName:"p",href:"http://www.tinymce.com/"},"TinyMCE"),". You can see the page we're testing ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/tinymce"},"here"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: frames.py\n# ...\n    def test_example_2(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/tinymce')\n        driver.switch_to.frame('mce_0_ifr')\n        editor = driver.find_element(By.ID,'tinymce')\n        before_text = editor.text\n        editor.clear()\n        editor.send_keys('Hello World!')\n        after_text = editor.text\n        assert after_text != before_text, \"%s equals %s\" % (before_text, after_text)\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n  assert driver.find_element(By.CSS_SELECTOR, 'h3').text != \"\", \"element should not be empty\"\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If we save the file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"python frames.py")," from the command-line) here is what will happen:"),(0,i.kt)("u",null,"Example 1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Switch to the nested frame"),(0,i.kt)("li",{parentName:"ul"},"Grab the text from the frame and assert that Selenium is in the correct place"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("u",null,"Example 2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Switch to the frame that contains the TinyMCE editor"),(0,i.kt)("li",{parentName:"ul"},"Grab and clear the text in the editor"),(0,i.kt)("li",{parentName:"ul"},"Input and grab new text in the edtitor"),(0,i.kt)("li",{parentName:"ul"},"Assert that the original and new text entries don't match"),(0,i.kt)("li",{parentName:"ul"},"Switch to the top level of the page"),(0,i.kt)("li",{parentName:"ul"},"Grab the text from the top of the page and assert that it's not empty"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Now you're ready to handily defeat frames when they cross your path."),(0,i.kt)("p",null,"Thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/trabulmonkee"},"Mike Millgate")," for contributing the Python code for this tip, and to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Dude-X"},"Isaul Vargas")," & ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bittner"},"Peter Bittner")," for code reviewing!"),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About the Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},17377:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:1,hide_sidebar:!0,publish_date:new Date("2015-08-25T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"work-with-frames/ruby",id:"work-with-frames/ruby",title:"ruby",description:"A Solution",source:"@site/docs/3-work-with-frames/ruby.md",sourceDirName:"3-work-with-frames",slug:"/work-with-frames/ruby",permalink:"/docs/work-with-frames/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/3-work-with-frames/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"ruby",level:1,hide_sidebar:!0,publish_date:"2015-08-25T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Rather than getting frustrated when authoring your tests, you can work with the elements in a frame by telling Selenium to switch to that frame first. Then the rest of your test should be more straightforward."),(0,i.kt)("p",null,"Let's explore further with some examples."),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"We'll first need to pull in our requisite libraries (",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to drive the browser, and ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expecations")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers")," to perform our assertions) and wire up some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: frames.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Now onto our test. In it, we'll step through ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/nested_frames"},"an example of nested frames")," which can be found on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/nested_frames'\n  @driver.switch_to.frame('frame-top')\n  @driver.switch_to.frame('frame-middle')\n  expect(@driver.find_element(id: 'content').text).to eql 'MIDDLE'\nend\n")),(0,i.kt)("p",null,"With Selenium's ",(0,i.kt)("a",{parentName:"p",href:"https://seleniumhq.github.io/selenium/docs/api/rb/Selenium/WebDriver/TargetLocator.html#frame-instance_method"},(0,i.kt)("inlineCode",{parentName:"a"},".switch_to.frame"))," method we can simply switch to the frame we want. It accepts either an ID or name attribute, but in order to get the text of the middle frame (e.g., a frame nested within another frame), we need to switch to the parent frame (e.g., the top frame) and then switch to the child frame (e.g., the middle frame)."),(0,i.kt)("p",null,"Once we've done that we're able to find the element we need, grab it's text, and assert that it's what we expect."),(0,i.kt)("p",null,"While this example helps illustrate the point of frame switching, it's not very practical."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("p",null,"Here is a more likely example you'll run into -- working with a WYSIWYG (What You See Is What You Get) Editor like ",(0,i.kt)("a",{parentName:"p",href:"http://www.tinymce.com/"},"TinyMCE"),". You can see the page we're testing ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/tinymce"},"here"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: frames.rb\n\nrun do\n  @driver.get 'http://the-internet.herokuapp.com/tinymce'\n  @driver.switch_to.frame('mce_0_ifr')\n  editor = @driver.find_element(id: 'tinymce')\n  before_text = editor.text\n  editor.clear\n  editor.send_keys 'Hello World!'\n  after_text = editor.text\n  expect(after_text).not_to eql before_text\nend\n")),(0,i.kt)("p",null,"Once the page loads we switch into the frame that contains TinyMCE and..."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"grab the original text and store it"),(0,i.kt)("li",{parentName:"ul"},"clear and input new text"),(0,i.kt)("li",{parentName:"ul"},"grab the new text value"),(0,i.kt)("li",{parentName:"ul"},"assert that the original and new texts are not the same")),(0,i.kt)("p",null,"Keep in mind that if we need to access a part of the page outside of the frame we are currently in we'll need to switch to it. Thankfully Selenium has a method that enables us to quickly jump back to the top level of the page -- ",(0,i.kt)("a",{parentName:"p",href:"https://seleniumhq.github.io/selenium/docs/api/rb/Selenium/WebDriver/TargetLocator.html#default_content-instance_method"},(0,i.kt)("inlineCode",{parentName:"a"},"switch_to.default_content")),"."),(0,i.kt)("p",null,"Here is what that looks like in practice"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"  @driver.switch_to.default_content\n  expect(@driver.find_element(css: 'h3').text).not_to be_empty\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If we save the file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby frames.rb")," from the command-line) here is what will happen:"),(0,i.kt)("u",null,"Example 1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Switch to the nested frame"),(0,i.kt)("li",{parentName:"ul"},"Grab the text from the frame and assert that Selenium is in the correct place"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("u",null,"Example 2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Switch to the frame that contains the TinyMCE editor"),(0,i.kt)("li",{parentName:"ul"},"Grab and clear the text in the editor"),(0,i.kt)("li",{parentName:"ul"},"Input and grab new text in the edtitor"),(0,i.kt)("li",{parentName:"ul"},"Assert that the original and new text entries don't match"),(0,i.kt)("li",{parentName:"ul"},"Switch to the top level of the page"),(0,i.kt)("li",{parentName:"ul"},"Grab the text from the top of the page and assert that it's not empty"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Now you can readily defeat frames when they cross your path."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},4661:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"archives/csharp",id:"archives/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/31-archives/csharp.md",sourceDirName:"31-archives",slug:"/archives/csharp",permalink:"/docs/archives/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/31-archives/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},55998:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"archives/java",id:"archives/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/31-archives/java.md",sourceDirName:"31-archives",slug:"/archives/java",permalink:"/docs/archives/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/31-archives/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},38039:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"archives/javascript",id:"archives/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/31-archives/javascript.md",sourceDirName:"31-archives",slug:"/archives/javascript",permalink:"/docs/archives/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/31-archives/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},91900:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"archives/python",id:"archives/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/31-archives/python.md",sourceDirName:"31-archives",slug:"/archives/python",permalink:"/docs/archives/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/31-archives/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},46948:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:1,hide_sidebar:!0,publish_date:new Date("2014-12-23T00:00:00.000Z"),last_update:{date:new Date("2023-02-27T00:00:00.000Z")}},o=void 0,l={unversionedId:"archives/ruby",id:"archives/ruby",title:"ruby",description:"A Solution",source:"@site/docs/31-archives/ruby.md",sourceDirName:"31-archives",slug:"/archives/ruby",permalink:"/docs/archives/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/31-archives/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677456e3,formattedLastUpdatedAt:"Feb 27, 2023",frontMatter:{language:"ruby",level:1,hide_sidebar:!0,publish_date:"2014-12-23T00:00:00.000Z",last_update:{date:"2023-02-27T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Check out ",(0,i.kt)("a",{parentName:"p",href:"/docs"},"the Elemental Selenium Tip Archives"),"! Each tip is available there, and it's simple to traverse."),(0,i.kt)("p",null,"All of the tips are tagged, categorized, and marked by level of difficulty. Each marking is clickable (both\nwithin the tip and when viewing all tips on the archive page), and will return a filtered result."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"If you are viewing ",(0,i.kt)("a",{parentName:"p",href:"/docs"},"Tip 7")," and click on the category (e.g. 'Patterns')."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"tip 7",src:a(89073).Z,width:"825",height:"455"})),(0,i.kt)("p",null,"Then it will return a list of all tips with the same category."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"category list",src:a(94183).Z,width:"699",height:"586"})),(0,i.kt)("p",null,"Alternatively, you could have clicked on one of the tags (e.g. '#page_object') and it would have returned a\nlist of tips that were tagged similarly."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"tag list",src:a(40512).Z,width:"596",height:"426"})),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"View the tip archive (or an individual tip)"),(0,i.kt)("li",{parentName:"ul"},"Click a filtering option"),(0,i.kt)("li",{parentName:"ul"},"See a filtered list of tips"),(0,i.kt)("li",{parentName:"ul"},"View and enjoy another relevant tip")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this has helped turn you onto the bounty of freely available Selenium tips that were right at your fingertips this whole time."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by\nthousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect\nfor writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool,\nManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at\nnumerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},18483:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"available-resources/csharp",id:"available-resources/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/36-available-resources/csharp.md",sourceDirName:"36-available-resources",slug:"/available-resources/csharp",permalink:"/docs/available-resources/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/36-available-resources/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},67592:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"available-resources/java",id:"available-resources/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/36-available-resources/java.md",sourceDirName:"36-available-resources",slug:"/available-resources/java",permalink:"/docs/available-resources/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/36-available-resources/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},47094:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"available-resources/javascript",id:"available-resources/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/36-available-resources/javascript.md",sourceDirName:"36-available-resources",slug:"/available-resources/javascript",permalink:"/docs/available-resources/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/36-available-resources/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},96362:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"available-resources/python",id:"available-resources/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/36-available-resources/python.md",sourceDirName:"36-available-resources",slug:"/available-resources/python",permalink:"/docs/available-resources/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/36-available-resources/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},77190:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:1,hide_sidebar:!0,publish_date:new Date("2015-10-13T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"available-resources/ruby",id:"available-resources/ruby",title:"ruby",description:"A Solution",source:"@site/docs/36-available-resources/ruby.md",sourceDirName:"36-available-resources",slug:"/available-resources/ruby",permalink:"/docs/available-resources/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/36-available-resources/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"ruby",level:1,hide_sidebar:!0,publish_date:"2015-10-13T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Available Resources",id:"available-resources",level:2},{value:"Documentation &amp; Tips",id:"documentation--tips",level:3},{value:"Books",id:"books",level:3},{value:"Meetups",id:"meetups",level:3},{value:"Conferences",id:"conferences",level:3},{value:"Videos",id:"videos",level:3},{value:"Mailing Lists",id:"mailing-lists",level:3},{value:"Forums",id:"forums",level:3},{value:"Issues",id:"issues",level:3},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Here is a comprehensive list showing many of the Selenium resources available and what they are useful for."),(0,i.kt)("h2",{id:"available-resources"},"Available Resources"),(0,i.kt)("h3",{id:"documentation--tips"},"Documentation & Tips"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.selenium.dev/documentation/"},"Selenium Documentation"))),(0,i.kt)("p",null,"This is the official Selenium documentation site. There is a lot of helpful information here. Use the sidebar menu on the left to navigate. Each documentation article is dated at the bottom to show when it was last modified, and the site seems to be kept fairly updated."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/seleniumhq/selenium/wiki"},"The Selenium Wiki"))),(0,i.kt)("p",null,"There is a lot of great stuff in this wiki -- mainly, documentation about the various language bindings and browser drivers. If you're not already familiar with it, take a look. It is kept very up-to-date by volunteer contributors who have donated thousands of hours in upkeep and code development."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/bonigarcia/selenium-webdriver-java"},"Hands-On Selenium WebDriver with Java - The Repo"))),(0,i.kt)("p",null,"This is an open-source project created and maintained by ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/boni_gg"},"Boni Garcia"),". It contains a comprehensive collection of examples about Selenium 4 using Java as language binding. These examples are explained in Boni's book mentioned below in the Books section."),(0,i.kt)("h3",{id:"books"},"Books"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.oreilly.com/library/view/hands-on-selenium-webdriver/9781098109998/"},"Hands-On Selenium WebDriver with Java - The Book"))),(0,i.kt)("p",null,"This book is by ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/boni_gg"},"Boni Garcia")," and it is a thorough resource. It outlines how to use Selenium, top-to-bottom, using Java, and is a great resource to keep handy."),(0,i.kt)("h3",{id:"meetups"},"Meetups"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.meetup.com/find/?keywords=selenium&source=EVENTS"},"All Selenium Meetups listed on Meetup.com"))),(0,i.kt)("p",null,"A listing of all in-person Selenium Meetups are available on Meetup.com. If you're near a major city, odds are there's one waiting for you."),(0,i.kt)("h3",{id:"conferences"},"Conferences"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://seleniumconf.com/"},"Selenium Conf"))),(0,i.kt)("p",null,"This is the annual conference where practitioners and Selenium Core Committers gather and share knowledge. All of the talks are top notch, as is the hallway track. If I were to attend just one conference a year, it would be this one."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://seleniumcamp.com/"},"Selenium Camp"))),(0,i.kt)("p",null,"This is a self-organized Selenium conference that's held annually in Kiev, Ukraine. It's a well organized event with some great talks. It's the most advanced test automation conference I've attended. Definitely worth the trip."),(0,i.kt)("h3",{id:"videos"},"Videos"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://www.youtube.com/user/seleniumconf/videos"},"Selenium Conference Talks"))),(0,i.kt)("p",null,"Every year talks from The Selenium Conference are recorded and made freely available online. This is one of the best resources around."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://youtube.com/playlist?list=PL67l1VPxOnT4BwuKRmt_INeMd0_jtUhDt"},"Selenium Meetup Talks"))),(0,i.kt)("p",null,"Some Selenium Meetups take it upon themselves to record their talks and publish them afterwards. Here are some of them. They are a great way to see what other pockets of the community are up to (outside of the annual Selenium Conf)."),(0,i.kt)("h3",{id:"mailing-lists"},"Mailing Lists"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://groups.google.com/forum/?fromgroups#!forum/selenium-users"},"Selenium Users Google Group")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.linkedin.com/groups/961927/"},"Selenium LinkedIn Users Group"))),(0,i.kt)("p",null,"These groups are fairly large, and it can be challenging at times to find what you're looking for. Even so, you can occasionally find some unique insights and answers to your questions."),(0,i.kt)("h3",{id:"forums"},"Forums"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://www.quora.com/Selenium-testing-framework"},"Quora")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.reddit.com/r/selenium/"},"Reddit")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://stackoverflow.com/questions/tagged/selenium"},"Stack Overflow"))),(0,i.kt)("p",null,"These are amazing community forums where you can go look for answers to questions you have regarding Selenium. The forums are populated by community members who volunteer their time and expertise to answer questions and help troubleshoot towards solutions."),(0,i.kt)("h3",{id:"issues"},"Issues"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/seleniumhq/selenium/issues"},"Selenium Issue Tracker"))),(0,i.kt)("p",null,"If you're running into a specific and repeatable issue that just doesn't make sense, you may have found a bug in Selenium. You'll want to check the Selenium Issue Tracker to see if it has already been reported. If not, then create a new issue. But be sure to read ",(0,i.kt)("a",{parentName:"p",href:"http://jimevansmusic.blogspot.com/2012/12/not-providing-html-page-is-bogus.html"},"this post")," before you do (so you can be sure that you've provided enough information for the Core Committers to work on it)."),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"As you can see there's a lot out there. But hopefully this list has helped guide you to the best resources for your context."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."))}h.isMDXComponent=!0},22100:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"drag-and-drop/csharp",id:"drag-and-drop/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/39-drag-and-drop/csharp.md",sourceDirName:"39-drag-and-drop",slug:"/drag-and-drop/csharp",permalink:"/docs/drag-and-drop/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/39-drag-and-drop/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},2654:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"drag-and-drop/java",id:"drag-and-drop/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/39-drag-and-drop/java.md",sourceDirName:"39-drag-and-drop",slug:"/drag-and-drop/java",permalink:"/docs/drag-and-drop/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/39-drag-and-drop/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},96427:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"drag-and-drop/javascript",id:"drag-and-drop/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/39-drag-and-drop/javascript.md",sourceDirName:"39-drag-and-drop",slug:"/drag-and-drop/javascript",permalink:"/docs/drag-and-drop/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/39-drag-and-drop/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},1057:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"drag-and-drop/python",id:"drag-and-drop/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/39-drag-and-drop/python.md",sourceDirName:"39-drag-and-drop",slug:"/drag-and-drop/python",permalink:"/docs/drag-and-drop/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/39-drag-and-drop/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},83674:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:2,hide_sidebar:!0,publish_date:new Date("2014-02-25T00:00:00.000Z"),last_update:{date:new Date("2023-03-02T00:00:00.000Z")}},o=void 0,l={unversionedId:"drag-and-drop/ruby",id:"drag-and-drop/ruby",title:"ruby",description:"A Solution",source:"@site/docs/39-drag-and-drop/ruby.md",sourceDirName:"39-drag-and-drop",slug:"/drag-and-drop/ruby",permalink:"/docs/drag-and-drop/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/39-drag-and-drop/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677715200,formattedLastUpdatedAt:"Mar 2, 2023",frontMatter:{language:"ruby",level:2,hide_sidebar:!0,publish_date:"2014-02-25T00:00:00.000Z",last_update:{date:"2023-03-02T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"As a workaround, we can simulate dragging and dropping by executing JavaScript with Selenium. Let's continue with an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"You can see a simple HTML5 drag and drop example ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/drag_and_drop"},"here on the-internet"),"."),(0,i.kt)("p",null,"First, let's borrow ",(0,i.kt)("a",{parentName:"p",href:"https://gist.github.com/rcorreia/2362544"},"the JavaScript made available by rcorreia on GitHub")," for this workaround and store it in a local file (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"dnd.js"),")."),(0,i.kt)("p",null,"Now we can create a Selenium script to consume the JavaScript file, visit the page, execute the JavaScript, and perform an assertion."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"After including our dependent libraries, we wire up our ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," actions. Now we're ready to write our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get \"http://the-internet.herokuapp.com/drag_and_drop\"\n\n  dnd_javascript = File.read(Dir.pwd + '/dnd.js')\n  @driver.execute_script(dnd_javascript+\"$('#column-a').simulateDragDrop({ dropTarget: '#column-b'});\")\n\n  expect(@driver.find_element(id: 'column-a').text).to eql('B')\n  expect(@driver.find_element(id: 'column-b').text).to eql('A')\n\nend\n")),(0,i.kt)("p",null,"After loading the page we read in the ",(0,i.kt)("inlineCode",{parentName:"p"},"dnd.js")," file and store it in a local variable. We then use Selenium to execute ",(0,i.kt)("inlineCode",{parentName:"p"},"dnd_javascript")," along with the function calls and elements we want to work with. After that, it's just a simple matter of grabbing text from the page and making an assertion against it."),(0,i.kt)("p",null,"Since there are only two elements to drag and drop on the page, they should have switched places. So, ",(0,i.kt)("inlineCode",{parentName:"p"},"column-a")," should now contain the text 'B', and ",(0,i.kt)("inlineCode",{parentName:"p"},"column-b")," should contain the text 'A'."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you run the ruby file, here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Text in Column A and Column B will switches places"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip has helped you figure out how to wrangle HTML5 dragging and dropping while there is a known bug for it in Selenium."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},53065:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:2,hide_sidebar:!0,publish_date:new Date("2016-06-13T00:00:00.000Z"),last_update:{date:new Date("2023-03-29T00:00:00.000Z")}},o=void 0,l={unversionedId:"work-with-multiple-windows/csharp",id:"work-with-multiple-windows/csharp",title:"csharp",description:"Example 1",source:"@site/docs/4-work-with-multiple-windows/csharp.md",sourceDirName:"4-work-with-multiple-windows",slug:"/work-with-multiple-windows/csharp",permalink:"/docs/work-with-multiple-windows/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/4-work-with-multiple-windows/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680048e3,formattedLastUpdatedAt:"Mar 29, 2023",frontMatter:{language:"csharp",level:2,hide_sidebar:!0,publish_date:"2016-06-13T00:00:00.000Z",last_update:{date:"2023-03-29T00:00:00.000Z"}}},s={},u=[{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"First let's include our requisite classes for our test framework (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"NUnit.Framework"),"), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenQA.Selenium"),", etc.), access to C# collections (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Collections.Generic"),"), and start our class off with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: MultipleWindows.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\nusing System.Collections.Generic;\n\npublic class MultipleWindows\n{\n    IWebDriver Driver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now let's write a test that exercises new window functionality from an application. In this case, we'll be using ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/windows"},"the new window example")," from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: MultipleWindows.cs\n// ...\n    [Test]\n    public void MultipleWindowsExample1()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/windows");\n        Driver.FindElement(By.CssSelector(".example a")).Click();\n        var Windows = Driver.WindowHandles;\n\n        Driver.SwitchTo().Window(Windows[0]);\n        Assert.That(Driver.Title != "New Window");\n\n        Driver.SwitchTo().Window(Windows[1]);\n        Assert.That(Driver.Title.Equals("New Window"));\n    }\n// ...\n')),(0,i.kt)("p",null,"After loading the page we click the link which spawns a new window. We then grab the window handles (a.k.a. unique identifier strings which represent each open browser window) and switch between them based on their order (assuming that the first one is the originating window, and that the second one is the new window). We round this test out by performing a simple check against the title of the page to make sure Selenium is focused on the correct window."),(0,i.kt)("p",null,"While this may seem like a good approach it can present problems later because the order of the window handles is not consistent across all browsers. Some return it in the order opened, others ",(0,i.kt)("em",{parentName:"p"},"alphabetically"),"."),(0,i.kt)("p",null,"Here's a more resilient approach. One that will work across all browsers."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: MultipleWindows.cs\n// ...\n    [Test]\n    public void MultipleWindowsExample2()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/windows");\n        string FirstWindow = Driver.CurrentWindowHandle;\n        string SecondWindow = "";\n\n        Driver.FindElement(By.CssSelector(".example a")).Click();\n\n        var Windows = Driver.WindowHandles;\n        foreach(var Window in Windows)\n        {\n            if (Window != FirstWindow)\n                SecondWindow = Window;\n        }\n\n        Driver.SwitchTo().Window(FirstWindow);\n        Assert.That(Driver.Title != "New Window");\n\n        Driver.SwitchTo().Window(SecondWindow);\n        Assert.That(Driver.Title.Equals("New Window"));\n    }\n}\n')),(0,i.kt)("p",null,"After loading the page we store the window handle in a variable (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"FirstWindow"),") and then proceed with clicking the new window link."),(0,i.kt)("p",null,"Now that we have two windows open we grab all of the window handles and search through them to find the new window handle (e.g., the handle that doesn't match the one we've already stored). We store the new window result in another variable (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"SecondWindow"),") and then switch between the windows, checking the page title each time to make sure the correct window is in focus."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\MultipleWindows.sln")," from the command-line) here is what will happen for either example."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Click to open a new window"),(0,i.kt)("li",{parentName:"ul"},"Switch between the windows"),(0,i.kt)("li",{parentName:"ul"},"Check the page title to make sure the correct window is in focus"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"I hope this was a helpful guide on how to work with and switch between multiple windows using Selenium."),(0,i.kt)("p",null,"Thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/jimevansmusic"},"Jim Evans")," for providing the info for this tip."),(0,i.kt)("p",null,"For more information about switching windows (and tabs) visit the official Selenium HQ ","[documentation page]"," (",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/webdriver/interactions/windows/"},"https://www.selenium.dev/documentation/webdriver/interactions/windows/"),")."),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},65943:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:2,hide_sidebar:!0,publish_date:new Date("2015-11-09T00:00:00.000Z"),last_update:{date:new Date("2023-04-03T00:00:00.000Z")}},o=void 0,l={unversionedId:"work-with-multiple-windows/java",id:"work-with-multiple-windows/java",title:"java",description:"Example 1",source:"@site/docs/4-work-with-multiple-windows/java.md",sourceDirName:"4-work-with-multiple-windows",slug:"/work-with-multiple-windows/java",permalink:"/docs/work-with-multiple-windows/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/4-work-with-multiple-windows/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:168048e4,formattedLastUpdatedAt:"Apr 3, 2023",frontMatter:{language:"java",level:2,hide_sidebar:!0,publish_date:"2015-11-09T00:00:00.000Z",last_update:{date:"2023-04-03T00:00:00.000Z"}}},s={},u=[{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"First let's import our requisite classes (for annotations (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.junit.After"),", etc.), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.openqa.selenium.WebDriver"),", etc.), and matchers for our assertions (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.hamcrest.CoreMatchers"),", etc.)) and start our class with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// filename: MultipleWindows.java\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport java.util.Set;\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.CoreMatchers.*;\n\npublic class MultipleWindows {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now let's write a test that exercises new window functionality from an application. In this case, we'll be using ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/windows"},"the new window example")," from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: MultipleWindows.java\n// ...\n    @Test\n    public void multipleWindows() {\n        driver.get("http://the-internet.herokuapp.com/windows");\n        driver.findElement(By.cssSelector(".example a")).click();\n        Object[] allWindows = driver.getWindowHandles().toArray();\n        driver.switchTo().window(allWindows[0].toString());\n        assertThat(driver.getTitle(), is(not("New Window")));\n        driver.switchTo().window(allWindows[1].toString());\n\n        Thread.sleep(2000);\n        assertThat(driver.getTitle(), is("New Window"));\n        Thread.sleep(2000);\n    }\n// ...\n')),(0,i.kt)("p",null,"After loading the page we click the link which spawns a new window. We then grab the window handles (a.k.a. unique identifier strings which represent each open browser window) and switch between them based on their order (assuming that the first one is the originating window, and that the second one is the new window). We round this test out by performing a simple check against the title of the page to make sure Selenium is focused on the correct window."),(0,i.kt)("p",null,"While this may seem like a good approach, it can present problems later. That's because the order of the window handles is not consistent across all browsers. Some return it in the order opened, others ",(0,i.kt)("em",{parentName:"p"},"alphabetically"),"."),(0,i.kt)("p",null,"Here's a more resilient approach. One that will work across all browsers."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: MultipleWindows.java\n// ...\n    @Test\n    public void multipleWindowsRedux() {\n        driver.get("http://the-internet.herokuapp.com/windows");\n        String firstWindow = driver.getWindowHandle();\n        String newWindow = "";\n        driver.findElement(By.cssSelector(".example a")).click();\n        Set<String> allWindows = driver.getWindowHandles();\n\n        for (String window : allWindows) {\n            if (!window.equals(firstWindow)) {\n                newWindow = window;\n            }\n        }\n\n        driver.switchTo().window(firstWindow);\n        assertThat(driver.getTitle(), is(not(equalTo("New Window"))));\n\n        driver.switchTo().window(newWindow);\n\n        Thread.sleep(2000);\n        assertThat(driver.getTitle(), is(equalTo("New Window")));\n        Thread.sleep(2000);\n    }\n\n}\n')),(0,i.kt)("p",null,"After loading the page we store the window handle in a variable (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"firstWindow"),") and then proceed with clicking the new window link."),(0,i.kt)("p",null,"Now that we have two windows open we grab all of the window handles and search through them to find the new window handle (e.g., the handle that doesn't match the one we've already stored). We store the new window result in another variable (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"newWindow"),") and then switch between the windows, checking page title each time to make sure the correct window is in focus."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn clean test")," from the command-line) here is what will happen for either example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Click to open a new window"),(0,i.kt)("li",{parentName:"ul"},"Switch between the windows"),(0,i.kt)("li",{parentName:"ul"},"Check the page title to make sure the correct window is in focus"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"I hope this was a helpful guide on how to work with and switch between multiple windows using Selenium."),(0,i.kt)("p",null,"Thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/jimevansmusic"},"Jim Evans")," for providing the info for this tip, and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/RomanIsko"},"Roman Isko")," for the initial code contribution."),(0,i.kt)("p",null,"For more information about switching windows (and tabs) visit the official Selenium HQ ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/webdriver/interactions/windows/"},"documentation page"),"."),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},13420:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:2,hide_sidebar:!0,publish_date:new Date("2019-08-09T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"work-with-multiple-windows/javascript",id:"work-with-multiple-windows/javascript",title:"javascript",description:"Example 1",source:"@site/docs/4-work-with-multiple-windows/javascript.md",sourceDirName:"4-work-with-multiple-windows",slug:"/work-with-multiple-windows/javascript",permalink:"/docs/work-with-multiple-windows/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/4-work-with-multiple-windows/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"javascript",level:2,hide_sidebar:!0,publish_date:"2019-08-09T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"First we'll need to pull in our requisite libraries, declare our test class, and wire up some test setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/multiple-windows.spec.js\nconst assert = require("assert");\nconst { Builder, By, Key } = require("selenium-webdriver");\n\ndescribe("Multiple Windows", function() {\n  let driver;\n\n  beforeEach(async function() {\n    this.timeout(60000)\n    driver = await new Builder().forBrowser("chrome").build();\n  });\n\n  afterEach(async function() {\n    await driver.quit();\n  });\n// ...\n')),(0,i.kt)("p",null,"Now let's write a test that exercises new window functionality from an application. In this case, we'll be using ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/windows"},"the new window example")," found on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/multiple-windows.spec.js\n// ...\n  it("non-deterministic switching", async function() {\n    await driver.get("http://the-internet.herokuapp.com/windows");\n    await driver.findElement(By.css(".example a")).click();\n    const windowHandles = await driver.getAllWindowHandles();\n    await driver.switchTo().window(windowHandles[0]);\n    assert((await driver.getTitle()) !== "New Window");\n    await driver.switchTo().window(windowHandles[windowHandles.length - 1]);\n    assert((await driver.getTitle()) === "New Window");\n  });\n// ...\n')),(0,i.kt)("p",null,"After loading the page we click the link which spawns a new window. We then grab the window handles (a.k.a. unique identifier strings which represent each open browser window) and switch between them based on their order (assuming that the first one is the originating window, and that the last one is the new window). We round this test out by performing a simple check against the title of the page to make sure Selenium is focused on the correct window."),(0,i.kt)("p",null,"While this may seem like a good approach, it can present problems later. That's because the order of the window handles is not consistent across all browsers. Some return in the order opened, others alphabetically."),(0,i.kt)("p",null,"Here's a more resilient approach that will work across all browsers."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/multiple-windows.spec.js\n// ...\n  it("browser agnostic switching", async function() {\n    await driver.get("http://the-internet.herokuapp.com/windows");\n    const windowHandlesBefore = await driver.getAllWindowHandles();\n    await driver.findElement(By.css(".example a")).click();\n    const windowHandlesAfter = await driver.getAllWindowHandles();\n    const newWindow = windowHandlesAfter.find(\n      handle => !windowHandlesBefore.includes(handle)\n    );\n    await driver.switchTo().window(windowHandlesBefore[0]);\n    assert((await driver.getTitle()) !== "New Window");\n    await driver.switchTo().window(newWindow);\n    assert((await driver.getTitle()) === "New Window");\n  });\n});\n')),(0,i.kt)("p",null,"After loading the page we store the window handles in a variable (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"windowHandlesBefore"),") and then proceed with clicking the new window link."),(0,i.kt)("p",null,"Now that we have two windows open we grab all of the window handles again (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"windowHandlesAfter"),") and search through them to find the new window handle (e.g., the handle that's in the new window handle collection but not the initial one). We store the result in another variable (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"newWindow"),") and then switch between the windows each time checking the page title to make sure the correct window is in focus."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mocha")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Find the window handle for the current window"),(0,i.kt)("li",{parentName:"ul"},"Click a link that opens a new window"),(0,i.kt)("li",{parentName:"ul"},"Find the window handle out of all available window handles"),(0,i.kt)("li",{parentName:"ul"},"Switch between the windows"),(0,i.kt)("li",{parentName:"ul"},"Assert that the correct window is in focus"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"I hope this was a helpful guide on how to work with and switch between multiple windows using Selenium."),(0,i.kt)("p",null,"Thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/jimevansmusic"},"Jim Evans")," for providing the info for this tip."),(0,i.kt)("p",null,"For more information about switching windows (and tabs) visit the official Selenium HQ ","[documentation page]"," (",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/webdriver/interactions/windows/"},"https://www.selenium.dev/documentation/webdriver/interactions/windows/"),")."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},20390:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:2,hide_sidebar:!0,publish_date:new Date("2016-11-14T00:00:00.000Z"),last_update:{date:new Date("2023-03-14T00:00:00.000Z")}},o=void 0,l={unversionedId:"work-with-multiple-windows/python",id:"work-with-multiple-windows/python",title:"python",description:"Example 1",source:"@site/docs/4-work-with-multiple-windows/python.md",sourceDirName:"4-work-with-multiple-windows",slug:"/work-with-multiple-windows/python",permalink:"/docs/work-with-multiple-windows/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/4-work-with-multiple-windows/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1678752e3,formattedLastUpdatedAt:"Mar 14, 2023",frontMatter:{language:"python",level:2,hide_sidebar:!0,publish_date:"2016-11-14T00:00:00.000Z",last_update:{date:"2023-03-14T00:00:00.000Z"}}},s={},u=[{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"First we'll need to pull in our requisite libraries (",(0,i.kt)("inlineCode",{parentName:"p"},"import unittest")," for our test framework and ",(0,i.kt)("inlineCode",{parentName:"p"},"from selenium import webdriver")," to drive the browser), declare our test class, and wire up some test ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: new_window.py\nimport unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\n\nclass Windows(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n\n    def tearDown(self):\n        self.driver.quit()\n# ...\n")),(0,i.kt)("p",null,"Now let's write a test that exercises new window functionality from an application. In this case, we'll be using ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/windows"},"the new window example")," found on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# filename: new_window.py\n# ...\n    def test_example_1(self):\n        driver = self.driver\n        driver.get(\'http://the-internet.herokuapp.com/windows\')\n        driver.find_element(By.CSS_SELECTOR,\'.example a\').click()\n        driver.switch_to.window(driver.window_handles[0])\n        assert driver.title != "New Window", "title should not be New Window"\n        driver.switch_to.window(driver.window_handles[-1])\n        assert driver.title == "New Window", "title should be New Window"\n\n# ...\n')),(0,i.kt)("p",null,"After loading the page we click the link which spawns a new window. We then grab the window handles (a.k.a. unique identifier strings which represent each open browser window) and switch between them based on their order (assuming that the first one is the originating window, and that the last one is the new window). We round this test out by performing a simple check against the title of the page to make sure Selenium is focused on the correct window."),(0,i.kt)("p",null,"While this may seem like a good approach, it can present problems later. That's because the order of the window handles is not consistent across all browsers. Some return in the order opened, others ",(0,i.kt)("em",{parentName:"p"},"alphabetically"),"."),(0,i.kt)("p",null,"Here's a more resilient approach. One that will work across all browsers."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# filename: new_window.py\n# ...\n    def test_example_2(self):\n        driver = self.driver\n        driver.get(\'http://the-internet.herokuapp.com/windows\')\n\n        first_window = driver.window_handles[0]\n        driver.find_element(By.CSS_SELECTOR,\'.example a\').click()\n        all_windows = driver.window_handles\n        for window in all_windows:\n            if window != first_window:\n                new_window = window\n        driver.switch_to.window(first_window)\n        assert driver.title != "New Window", "title should not be New Window"\n        driver.switch_to.window(new_window)\n        assert driver.title == "New Window", "title should be New Window"\n\nif __name__ == "__main__":\n    unittest.main()\n')),(0,i.kt)("p",null,"After loading the page we store the window handle in a variable (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"first_window"),") and then proceed with clicking the new window link."),(0,i.kt)("p",null,"Now that we have two windows open we grab all of the window handles and search through them to find the new window handle (e.g., the handle that doesn't match the first one we've already stored). We store the result in another variable (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"new_window"),") and then switch between the windows. Each time checking the page title to make sure the correct window is in focus."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Find the window handle for the current window"),(0,i.kt)("li",{parentName:"ul"},"Click a link that opens a new window"),(0,i.kt)("li",{parentName:"ul"},"Find the window handle out of all available window handles"),(0,i.kt)("li",{parentName:"ul"},"Switch between the windows"),(0,i.kt)("li",{parentName:"ul"},"Assert that the correct window is in focus"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/jimevansmusic"},"Jim Evans")," for providing the info for this tip, ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/trabulmonkee"},"Mike Millgate")," for contributing the Python code for this tip, and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Dude-X"},"Isaul Vargas")," & ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bittner"},"Peter Bittner")," for code reviewing!"),(0,i.kt)("p",null,"For more information about switching windows (and tabs) visit the official Selenium HQ ","[documentation page]"," (",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/webdriver/interactions/windows/"},"https://www.selenium.dev/documentation/webdriver/interactions/windows/"),")."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},68339:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:2,hide_sidebar:!0,publish_date:new Date("2015-08-21T00:00:00.000Z"),last_update:{date:new Date("2023-02-27T00:00:00.000Z")}},o=void 0,l={unversionedId:"work-with-multiple-windows/ruby",id:"work-with-multiple-windows/ruby",title:"ruby",description:"Example 1",source:"@site/docs/4-work-with-multiple-windows/ruby.md",sourceDirName:"4-work-with-multiple-windows",slug:"/work-with-multiple-windows/ruby",permalink:"/docs/work-with-multiple-windows/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/4-work-with-multiple-windows/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677456e3,formattedLastUpdatedAt:"Feb 27, 2023",frontMatter:{language:"ruby",level:2,hide_sidebar:!0,publish_date:"2015-08-21T00:00:00.000Z",last_update:{date:"2023-02-27T00:00:00.000Z"}}},s={},u=[{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"First, let's pull in our requisite libraries (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to control the browser and ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers")," for our assertions) and add some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: new_window.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Now let's write a test that exercises new window functionality from an application. In this case, we'll be using ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/windows"},"the new window example")," found on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: new_window.rb\n\n# ...\n\nrun do\n  @driver.get 'http://the-internet.herokuapp.com/windows'\n  @driver.find_element(css: '.example a').click\n  @driver.switch_to.window(@driver.window_handles.first)\n  expect(@driver.title).not_to eql 'New Window'\n  @driver.switch_to.window(@driver.window_handles.last)\n  expect(@driver.title).to eql 'New Window'\nend\n")),(0,i.kt)("p",null,"After loading the page we click the link which spawns a new window. We then grab the window handles (a.k.a. unique identifier strings which represent each open browser window) and switch between them based on their order (assuming that the first one is the originating window, and that the last one is the new window). We round this test out by performing a simple check against the title of the page to make sure Selenium is focused on the correct window."),(0,i.kt)("p",null,"While this may seem like a good approach, it can present problems later. That's because the order of the window handles is not consistent across all browsers. Some return in the order opened, others alphabetically."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("p",null,"Here's a more resilient approach. One that will work across all browsers."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: new_window.rb\n\nrun do\n  @driver.get 'http://the-internet.herokuapp.com/windows'\n\n  first_window = @driver.window_handle\n  @driver.find_element(css: '.example a').click\n  all_windows = @driver.window_handles\n  new_window = all_windows.select { |this_window| this_window != first_window }\n\n  @driver.switch_to.window(first_window)\n  expect(@driver.title).not_to eql 'New Window'\n\n  @driver.switch_to.window(new_window)\n  expect(@driver.title).to eql 'New Window'\nend\n")),(0,i.kt)("p",null,"After loading the page we store the window handle in a variable (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"first_window"),") and then proceed with clicking the new window link."),(0,i.kt)("p",null,"Now that we have two windows open we grab all of the window handles and search through them to find the new window handle (e.g., the handle that doesn't match the first one we've already stored). We store the result in another variable (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"second_window"),") and then switch between the windows. Each time checking the page title to make sure the correct window is in focus."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Find the window handle for the current window"),(0,i.kt)("li",{parentName:"ul"},"Click a link that opens a new window"),(0,i.kt)("li",{parentName:"ul"},"Find the window handle out of all available window handles"),(0,i.kt)("li",{parentName:"ul"},"Switch between the windows"),(0,i.kt)("li",{parentName:"ul"},"Assert that the correct window is in focus"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"I hope this was a helpful guide on how to work with and switch between multiple windows using Selenium."),(0,i.kt)("p",null,"Thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/jimevansmusic"},"Jim Evans")," for providing the info for this tip."),(0,i.kt)("p",null,"For more information about switching windows (and tabs) visit the official Selenium HQ ","[documentation page]"," (",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/webdriver/interactions/windows/"},"https://www.selenium.dev/documentation/webdriver/interactions/windows/"),")."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},41514:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:2,hide_sidebar:!0,publish_date:new Date("2016-06-13T00:00:00.000Z"),last_update:{date:new Date("2023-03-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"disabled-element/csharp",id:"disabled-element/csharp",title:"csharp",description:"A Solution",source:"@site/docs/40-disabled-element/csharp.md",sourceDirName:"40-disabled-element",slug:"/disabled-element/csharp",permalink:"/docs/disabled-element/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/40-disabled-element/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680134400,formattedLastUpdatedAt:"Mar 30, 2023",frontMatter:{language:"csharp",level:2,hide_sidebar:!0,publish_date:"2016-06-13T00:00:00.000Z",last_update:{date:"2023-03-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"If we look at ",(0,i.kt)("a",{parentName:"p",href:"http://seleniumhq.github.io/selenium/docs/api/dotnet/html/T_OpenQA_Selenium_IWebElement.htm"},"the API documentation for Selenium's IWebElement Interface")," we can see there is an available method called ",(0,i.kt)("inlineCode",{parentName:"p"},"Enabled")," that can help us accomplish what we want."),(0,i.kt)("p",null,"Let's take a look at how to use it."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"For this example we will use ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the dropdown list")," from ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/dropdown"},"the-internet"),". In this list there a few options to select, one which should be disabled. Let's find this element and assert that it is in fact disabled."),(0,i.kt)("p",null,"Let's start by including our requisite classes for our test framework (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"NUnit.Framework"),"), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenQA.Selenium"),", etc.), and start our class off with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: DisabledElements.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\nusing OpenQA.Selenium.Support.UI;\n\npublic class DisabledElements\n{\n    IWebDriver Driver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now to wire up our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: DisabledElements.cs\n// ...\n    [Test]\n    public void ElementDisabled()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/dropdown");\n        var Dropdown = new SelectElement(Driver.FindElement(By.Id("dropdown")));\n        // The SelectedOption we want is selected by default on page load\n        Assert.False(Dropdown.SelectedOption.Enabled);\n    }\n}\n')),(0,i.kt)("p",null,"After visiting the page we find the dropdown list with the ",(0,i.kt)("inlineCode",{parentName:"p"},"SelectElement")," function and store it in a variable. We then use in our assertion, focusing on the currently selected option which is the first one by default on page load (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"Dropdown.SelectedOption"),") and check that it is enabled (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},".Enabled"),"). This will return a boolean result. If the element is disabled (e.g., not selectable) then Selenium will return ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),". So that's what we use in our assertion (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"Assert.False"),")."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\DisabledElements.sln")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open a browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Grab the dropdown list"),(0,i.kt)("li",{parentName:"ul"},"Assert that the target element is not enabled"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip has helped make the task of seeing whether or not an element is enabled or disabled more approachable."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},456:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:2,hide_sidebar:!0,publish_date:new Date("2015-11-11T00:00:00.000Z"),last_update:{date:new Date("2023-04-03T00:00:00.000Z")}},o=void 0,l={unversionedId:"disabled-element/java",id:"disabled-element/java",title:"java",description:"A Solution",source:"@site/docs/40-disabled-element/java.md",sourceDirName:"40-disabled-element",slug:"/disabled-element/java",permalink:"/docs/disabled-element/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/40-disabled-element/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:168048e4,formattedLastUpdatedAt:"Apr 3, 2023",frontMatter:{language:"java",level:2,hide_sidebar:!0,publish_date:"2015-11-11T00:00:00.000Z",last_update:{date:"2023-04-03T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"If we look at ",(0,i.kt)("a",{parentName:"p",href:"https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/WebElement.html"},"the API documentation for Selenium's IWebElement Interface")," we can see there is an available method called ",(0,i.kt)("inlineCode",{parentName:"p"},"isEnabled")," that can help us accomplish what we want."),(0,i.kt)("p",null,"Let's take a look at how to use it."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"For this example we will use ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the dropdown list")," from ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/dropdown"},"the-internet"),". In this list there a few options to select, one which should be disabled. Let's find this element and assert that it is disabled."),(0,i.kt)("p",null,"Let's start by importing our requisite classes (for annotations (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.junit.After"),", etc.), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.openqa.selenium.WebDriver"),", etc.), and matchers for our assertions (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.hamcrest.CoreMatchers"),", etc.)) and start our class with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// filename: DisabledElements.java\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.support.ui.Select;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.hamcrest.MatcherAssert.assertThat;\n\npublic class DisabledElements {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now to wire up our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: DisabledElements.java\n// ...\n    @Test\n    public void test() {\n        driver.get("http://the-internet.herokuapp.com/dropdown");\n        Select dropdown = new Select(driver.findElement(By.id("dropdown")));\n        assertThat(dropdown.getOptions().get(0).isEnabled(), is(false));\n    }\n\n}\n')),(0,i.kt)("p",null,"After visiting the page we find the dropdown list with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Select")," function and store it in a variable. We then put it to use in our assertion, scoping to the first value (",(0,i.kt)("inlineCode",{parentName:"p"},"dropdown.getOptions().get(0)"),") to check if it's enabled (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},".isEnabled()"),"). This will return a boolean result. If the element is disabled (e.g., not selectable) then Selenium will return ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),". So that's what we use in our assertion (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"is(false)"),")."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn clean test")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open a browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Grab the dropdown list"),(0,i.kt)("li",{parentName:"ul"},"Assert that the target element is not enabled"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip has helped make the simple task of seeing if an element is enabled or disabled more approachable."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},25699:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:2,hide_sidebar:!0,publish_date:new Date("2019-08-09T00:00:00.000Z"),last_update:{date:new Date("2023-03-27T00:00:00.000Z")}},o=void 0,l={unversionedId:"disabled-element/javascript",id:"disabled-element/javascript",title:"javascript",description:"A Solution",source:"@site/docs/40-disabled-element/javascript.md",sourceDirName:"40-disabled-element",slug:"/disabled-element/javascript",permalink:"/docs/disabled-element/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/40-disabled-element/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1679875200,formattedLastUpdatedAt:"Mar 27, 2023",frontMatter:{language:"javascript",level:2,hide_sidebar:!0,publish_date:"2019-08-09T00:00:00.000Z",last_update:{date:"2023-03-27T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"If we look at ",(0,i.kt)("a",{parentName:"p",href:"https://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/lib/webdriver_exports_WebElement.html#isEnabled"},"the API documentation for Selenium's Element class")," we can see there is an available method called ",(0,i.kt)("inlineCode",{parentName:"p"},"isEnabled")," that can help us accomplish what we want."),(0,i.kt)("p",null,"Let's take a look at how to use it."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"For this example we will use ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/dropdown"},"a dropdown list")," from ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the-internet"),". In this list there a few options to select, one which should be disabled. Let's find this element and assert that it is disabled."),(0,i.kt)("p",null,"First we'll require our dependent libraries, declare our test class, and wire up some setup and teardown methods for our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/disabledElement.spec.js\nconst assert = require("assert");\nconst { Builder, By } = require("selenium-webdriver");\n\ndescribe("Disabled Element", function() {\n  let driver;\n\n  beforeEach(async function() {\n    this.timeout(60000);\n    driver = await new Builder().forBrowser("chrome").build();\n  });\n\n  afterEach(async function() {\n    await driver.quit();\n  });\n// ...\n')),(0,i.kt)("p",null,"Now let's wire up our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/disabledElement.spec.js\n// ...\n  it("dropdown list should contain disabled and enabled elements", async function() {\n    driver.get("http://the-internet.herokuapp.com/dropdown");\n    const dropdownList = await driver.findElements(By.css("option"));\n    assert((await dropdownList[0].isEnabled()) === false);\n  });\n});\n')),(0,i.kt)("p",null,"After loading the page, we find all of the elements that have an option tag (which are all of the items in the dropdown list). This returns a list of elements, so we use the first one (which is the one with the text of ",(0,i.kt)("inlineCode",{parentName:"p"},"'Please select an option'"),")."),(0,i.kt)("p",null,"Once we have the element we want we see if it's enabled (with ",(0,i.kt)("inlineCode",{parentName:"p"},".isEnabled"),") and assert based on the response."),(0,i.kt)("p",null,"Also, since we grabbed all of the dropdown list options, we can easily test the opposite case by checking the second or third option in the list."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/disabledElement.spec.js\n// ...\n  it("dropdown list should contain disabled and enabled elements", async function() {\n        // ...\n    assert(await dropdownList[1].isEnabled());\n  });\n});\n')),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mocha")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open a browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Grab all dropdown list elements"),(0,i.kt)("li",{parentName:"ul"},"Assert that the first element in the list is not enabled"),(0,i.kt)("li",{parentName:"ul"},"Assert that the second element in the list is enabled"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip has helped make the task of seeing whether or not an element is enabled or disabled more approachable."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},62207:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={level:2,language:"python",hide_sidebar:!0,publish_date:new Date("2016-11-18T00:00:00.000Z"),last_update:{date:new Date("2023-04-06T00:00:00.000Z")}},o=void 0,l={unversionedId:"disabled-element/python",id:"disabled-element/python",title:"python",description:"A Solution",source:"@site/docs/40-disabled-element/python.md",sourceDirName:"40-disabled-element",slug:"/disabled-element/python",permalink:"/docs/disabled-element/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/40-disabled-element/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680739200,formattedLastUpdatedAt:"Apr 6, 2023",frontMatter:{level:2,language:"python",hide_sidebar:!0,publish_date:"2016-11-18T00:00:00.000Z",last_update:{date:"2023-04-06T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"If we look at ",(0,i.kt)("a",{parentName:"p",href:"http://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webelement.html"},"the API documentation for Selenium's Element class")," we can see there is an available method called ",(0,i.kt)("inlineCode",{parentName:"p"},"Enabled")," that can help us accomplish what we want."),(0,i.kt)("p",null,"Let's take a look at how to use it."),(0,i.kt)("p",null,"For this example we will use ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/dropdown"},"a dropdown list")," from ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the-internet"),". In this list there a few options to select, one which should be disabled. Let's find this element and assert that it is disabled.\nFirst let's require our dependent libraries (",(0,i.kt)("inlineCode",{parentName:"p"},"import unittest")," for our test framework and ",(0,i.kt)("inlineCode",{parentName:"p"},"from selenium import webdriver")," to drive the browser), declare our test class, and wire up some test ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: disabled_elements.py\nfrom time import sleep\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport unittest\n\n\nclass DisabledElements(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n\n    def tearDown(self):\n        self.driver.quit()\n# ...\n")),(0,i.kt)("p",null,"Now let's wire up our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: disabled_elements.py\n# ...\n    def test_dropdown(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/dropdown')\n        wait = WebDriverWait(driver, 10)\n        dropdown_list = wait.until(\n            EC.presence_of_all_elements_located((By.ID, 'dropdown')))\n        assert not dropdown_list[0].is_enabled() is False\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n\n")),(0,i.kt)("p",null,"After loading the page, we find all of the elements that have an option tag (which are all of the items in the dropdown list). This returns a list of elements, so we use the first one (which is the one with the text of ",(0,i.kt)("inlineCode",{parentName:"p"},"'Please select an option'"),")."),(0,i.kt)("p",null,"Once we have the element we want we see if it's enabled (with ",(0,i.kt)("inlineCode",{parentName:"p"},".is_enabled"),") and assert based on the response."),(0,i.kt)("p",null,"And since we grabbed all of the dropdown list options, we can easily test the opposite case by checking the second or third option in the list."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"        assert dropdown_list[1].is_enabled() is True\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"python disabled_elements.py")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open a browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Grab all dropdown list elements"),(0,i.kt)("li",{parentName:"ul"},"Assert that the first element in the list is not enabled"),(0,i.kt)("li",{parentName:"ul"},"Assert that the second element in the list is enabled"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip has helped make the task of seeing whether or not an element is enabled or disabled more approachable."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},44926:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:2,hide_sidebar:!0,publish_date:new Date("2015-07-06T00:00:00.000Z"),last_update:{date:new Date("2023-03-02T00:00:00.000Z")}},o=void 0,l={unversionedId:"disabled-element/ruby",id:"disabled-element/ruby",title:"ruby",description:"A Solution",source:"@site/docs/40-disabled-element/ruby.md",sourceDirName:"40-disabled-element",slug:"/disabled-element/ruby",permalink:"/docs/disabled-element/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/40-disabled-element/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677715200,formattedLastUpdatedAt:"Mar 2, 2023",frontMatter:{language:"ruby",level:2,hide_sidebar:!0,publish_date:"2015-07-06T00:00:00.000Z",last_update:{date:"2023-03-02T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"If we look at ",(0,i.kt)("a",{parentName:"p",href:"https://seleniumhq.github.io/selenium/docs/api/rb/Selenium/WebDriver/Element.html"},"the API documentation for Selenium's Element class")," we can see there is an available method called ",(0,i.kt)("inlineCode",{parentName:"p"},"enabled?")," that can help us accomplish what we want."),(0,i.kt)("p",null,"Let's take a look at how to use it."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"For this example we will use ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"a dropdown list")," from ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/dropdown"},"the-internet"),". In this list there a few options to select, one which should be disabled. Let's find this element and assert that it is disabled."),(0,i.kt)("p",null,"First let's require our dependent libraries (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to control the browser and ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers")," for our assertion) and wire up some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: dropdown_disabled.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\n\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Now let's wire up our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/dropdown'\n  dropdowns = @driver.find_elements(tag_name: 'option')\n  item_of_interest = dropdowns.find { |dropdown| dropdown.text == 'Please select an option' }\n  expect(item_of_interest.enabled?).to eql false\nend\n")),(0,i.kt)("p",null,"After loading the page, we find all of the elements that have an option tag (which are all of the items in the dropdown list). This will return an array, so we iterate over the collection and find the item we want based on a text comparison."),(0,i.kt)("p",null,"Once we have the element we want we see if it's enabled (with ",(0,i.kt)("inlineCode",{parentName:"p"},".enabled?"),") and assert based on the response."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby dropdown_disabled.rb")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open a browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Grab all dropdown list elements and find the one we want by its text"),(0,i.kt)("li",{parentName:"ul"},"Assert that the element is not enabled"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip has helped make the task of seeing whether or not an element is enabled or disabled more approachable."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},87083:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"exception-handling/csharp",id:"exception-handling/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/44-exception-handling/csharp.md",sourceDirName:"44-exception-handling",slug:"/exception-handling/csharp",permalink:"/docs/exception-handling/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/44-exception-handling/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},26606:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"exception-handling/java",id:"exception-handling/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/44-exception-handling/java.md",sourceDirName:"44-exception-handling",slug:"/exception-handling/java",permalink:"/docs/exception-handling/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/44-exception-handling/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},79915:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"exception-handling/javascript",id:"exception-handling/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/44-exception-handling/javascript.md",sourceDirName:"44-exception-handling",slug:"/exception-handling/javascript",permalink:"/docs/exception-handling/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/44-exception-handling/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},48098:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"exception-handling/python",id:"exception-handling/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/44-exception-handling/python.md",sourceDirName:"44-exception-handling",slug:"/exception-handling/python",permalink:"/docs/exception-handling/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/44-exception-handling/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},41276:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:2,hide_sidebar:!0,publish_date:new Date("2015-07-01T00:00:00.000Z"),last_update:{date:new Date("2023-03-15T00:00:00.000Z")}},o=void 0,l={unversionedId:"exception-handling/ruby",id:"exception-handling/ruby",title:"ruby",description:"A Solution",source:"@site/docs/44-exception-handling/ruby.md",sourceDirName:"44-exception-handling",slug:"/exception-handling/ruby",permalink:"/docs/exception-handling/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/44-exception-handling/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1678838400,formattedLastUpdatedAt:"Mar 15, 2023",frontMatter:{language:"ruby",level:2,hide_sidebar:!0,publish_date:"2015-07-01T00:00:00.000Z",last_update:{date:"2023-03-15T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By adding some simple exception handling we can catch Selenium's errors and make our tests more resilient."),(0,i.kt)("p",null,"Let's take a look at an example."),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"For this example we'll use ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/login"},"a login example")," from ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the-internet"),"."),(0,i.kt)("p",null,"First let's require our necessary libraries (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to control the browser and ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers")," for our assertions) and wire up some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: exception_handling.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef wait_for(seconds)\n  Selenium::WebDriver::Wait.new(timeout: seconds).until { yield }\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"To demonstrate the problem, let's write a basic test to exercise the login page. After logging in, we'll check to see that the login form is no longer displayed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/login'\n  @driver.find_element(id: 'username').send_keys('tomsmith')\n  @driver.find_element(id: 'password').send_keys('SuperSecretPassword!')\n  @driver.find_element(id: 'login').submit\n  wait_for(10) { @driver.find_element(css: '.icon-2x').displayed? }\n  expect(@driver.find_element(id: 'login').displayed?).to eql false\nend\n")),(0,i.kt)("p",null,"When we run this (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby exception_handling.rb")," from the command-line) our test will not pass. It will log in just fine, but it will error when performing the assertion -- returning the following exception:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'Unable to locate element: {"method":"id","selector":"login"} (Selenium::WebDriver::Error::NoSuchElementError)\n')),(0,i.kt)("p",null,"In the Python Selenium bindings they have a section of actions called ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html"},"expected conditions"),". One of them is designed specifically for this use case (called ",(0,i.kt)("inlineCode",{parentName:"p"},"visibility_of_element_located"),"). It checks to see if an element is displayed and returns ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," if it's not (rather than throwing an exception)."),(0,i.kt)("p",null,"Unfortunately the Ruby Selenium bindings do not come with this functionality built-in, and there are no plans to add it. So let's go through how to do it ourselves. For that we'll need a basic understanding of exceptions and how to rescue them (",(0,i.kt)("a",{parentName:"p",href:"https://skorks.com/2009/09/ruby-exceptions-and-exception-handling/"},"here's a quick primer"),") and the name of the exception we want to rescue. You can find a full list of the Selenium exceptions for Ruby ",(0,i.kt)("a",{parentName:"p",href:"https://seleniumhq.github.io/selenium/docs/api/rb/Selenium/WebDriver/Error.html"},"here"),". But we shouldn't need all of them since our previous test run told us the name of the exception."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Selenium::WebDriver::Error::NoSuchElementError")," is the one we want. Let's put it to use by wrapping the last display check in our test with a ",(0,i.kt)("inlineCode",{parentName:"p"},"rescue")," block, making it return ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," if it's triggered."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/login'\n  @driver.find_element(id: 'username').send_keys('tomsmith')\n  @driver.find_element(id: 'password').send_keys('SuperSecretPassword!')\n  @driver.find_element(id: 'login').submit\n  begin\n    expect(@driver.find_element(id: 'login').displayed?).to eql false\n  rescue Selenium::WebDriver::Error::NoSuchElementError\n    false\n  rescue Selenium::WebDriver::Error::StaleElementReferenceError\n    false\n  end\nend\n")),(0,i.kt)("p",null,"Now if we run the test (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby exception_handling.rb")," from the command-line) it will pass. But this is far from a clean implementation. Let's clean things up a bit."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"def rescue_exceptions\n  begin\n    yield\n  rescue Selenium::WebDriver::Error::NoSuchElementError\n    false\n  rescue Selenium::WebDriver::Error::StaleElementReferenceError\n    false\n  end\nend\n\ndef is_displayed?(locator = {})\n  rescue_exceptions { @driver.find_element(locator).displayed? }\nend\n\nrun do\n  @driver.get 'http://the-internet.herokuapp.com/login'\n  @driver.find_element(id: 'username').send_keys('tomsmith')\n  @driver.find_element(id: 'password').send_keys('SuperSecretPassword!')\n  @driver.find_element(id: 'login').submit\n  expect(is_displayed?(id: 'login')).to eql false\nend\n")),(0,i.kt)("p",null,"By breaking apart our rescue block (into a ",(0,i.kt)("inlineCode",{parentName:"p"},"rescue_exceptions")," method) and our ",(0,i.kt)("inlineCode",{parentName:"p"},"displayed?")," check (into an ",(0,i.kt)("inlineCode",{parentName:"p"},"is_displayed?")," method) we're left with a cleaner (and reusable) implementation in our test code. And if you wanted to add another Selenium exception to the mix, then you would simply add a new ",(0,i.kt)("inlineCode",{parentName:"p"},"rescue")," statement along with the result you want in ",(0,i.kt)("inlineCode",{parentName:"p"},"rescue_exceptions"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"def rescue_exceptions\n  begin\n    yield\n  rescue Selenium::WebDriver::Error::NoSuchElementError\n    false\n  rescue Selenium::WebDriver::Error::StaleElementReferenceError\n    false\n  end\nend\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: ",(0,i.kt)("inlineCode",{parentName:"strong"},"NoSuchElementError")," and ",(0,i.kt)("inlineCode",{parentName:"strong"},"StaleElementReferenceError")," are the two most common errors you'll run into when using Selenium.")),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("p",null,"If your test is still failing, it might not have enough time to find the ",(0,i.kt)("inlineCode",{parentName:"p"},"login")," element. In this case, you will have to add a ",(0,i.kt)("inlineCode",{parentName:"p"},"wait")," to your test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# exception-with-wait.rb\n\ndef wait_for(seconds)\n  Selenium::WebDriver::Wait.new(timeout: seconds).until { yield }\nend\n")),(0,i.kt)("p",null,"Also add this line to your run code, just before the ",(0,i.kt)("inlineCode",{parentName:"p"},"expect")," line:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# exception-with-wait.rb\n\nwait_for(10) { @driver.find_element(css: '.icon-2x').displayed? }\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"The full script with ",(0,i.kt)("inlineCode",{parentName:"strong"},"wait")," added will be as follows:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# exception-with-wait.rb\n\n# filename: exception_handling.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n\ndef rescue_exceptions\n  begin\n    yield\n  rescue Selenium::WebDriver::Error::NoSuchElementError\n    false\n  rescue Selenium::WebDriver::Error::StaleElementReferenceError\n    false\n  end\nend\n\ndef is_displayed?(locator = {})\n  rescue_exceptions { @driver.find_element(locator).displayed? }\nend\n\ndef wait_for(seconds)\n  Selenium::WebDriver::Wait.new(timeout: seconds).until { yield }\nend\n\n\nrun do\n  @driver.get 'http://the-internet.herokuapp.com/login'\n  @driver.find_element(id: 'username').send_keys('tomsmith')\n  @driver.find_element(id: 'password').send_keys('SuperSecretPassword!')\n  @driver.find_element(id: 'login').submit\n  wait_for(10) { @driver.find_element(css: '.icon-2x').displayed? }\n  expect(is_displayed?(id: 'login')).to eql false\nend\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If you save the file and run it (e.g, ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby exception_handling.rb")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Log in"),(0,i.kt)("li",{parentName:"ul"},"Check to see that the login form is NOT displayed"),(0,i.kt)("li",{parentName:"ul"},"Catch the exception from Selenium and return ",(0,i.kt)("inlineCode",{parentName:"li"},"false")," instead"),(0,i.kt)("li",{parentName:"ul"},"Complete the assertion using the boolean response (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),")"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip has helped you learn how to work effectively with exceptions in Selenium."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},6212:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:1,hide_sidebar:!0,publish_date:new Date("2016-06-12T00:00:00.000Z"),last_update:{date:new Date("2023-03-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-test-checkboxes/csharp",id:"how-to-test-checkboxes/csharp",title:"csharp",description:"A Solution",source:"@site/docs/45-how-to-test-checkboxes/csharp.md",sourceDirName:"45-how-to-test-checkboxes",slug:"/how-to-test-checkboxes/csharp",permalink:"/docs/how-to-test-checkboxes/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/45-how-to-test-checkboxes/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680134400,formattedLastUpdatedAt:"Mar 30, 2023",frontMatter:{language:"csharp",level:1,hide_sidebar:!0,publish_date:"2016-06-12T00:00:00.000Z",last_update:{date:"2023-03-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"There are two ways to approach this issue -- by seeing if an element has a ",(0,i.kt)("inlineCode",{parentName:"p"},"checked")," attribute (a.k.a. performing an attribute lookup), or by asking an element if it has been ",(0,i.kt)("em",{parentName:"p"},"selected"),"."),(0,i.kt)("p",null,"We're going to go through each of these approaches to see their pros and cons."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"For reference, here is the markup from ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/checkboxes"},"the page we'll be testing against")," (from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<form>\n  <input type="checkbox" /> unchecked<br />\n  <input type="checkbox" checked="" /> checked\n</form>\n')),(0,i.kt)("p",null,"First let's include our requisite classes for our test framework (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"NUnit.Framework"),"), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenQA.Selenium"),", etc.), access to common C# functions (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"System"),", etc.) and start our class off with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: Checkboxes.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\nusing System;\nusing System.Collections.Generic;\n\npublic class Checkboxes\n{\n    IWebDriver Driver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Before we write any tests let's walk through both checkbox approaches to see what Selenium gives us."),(0,i.kt)("p",null,"To do that we'll want to grab all of the checkboxes on the page and iterate through them. Once using an attribute lookup, and again asking if the element is selected. Each time outputting the return value we get from Selenium."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: Checkboxes.cs\n// ...\n[Test]\n    public void CheckboxDiscovery()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/checkboxes");\n        IReadOnlyCollection<IWebElement> Checkboxes = Driver.FindElements(By.CssSelector("input[type=\\"checkbox\\"]"));\n\n        Console.Write("With .attribute(\'checked\')");\n        foreach(IWebElement Checkbox in Checkboxes)\n        {\n            Console.WriteLine(Checkbox.GetAttribute("checked"));\n        }\n\n        Console.WriteLine("With .selected?");\n        foreach(IWebElement Checkbox in Checkboxes)\n        {\n            Console.WriteLine(Checkbox.Selected);\n        }\n    }\n// ...\n')),(0,i.kt)("p",null,"When we save our file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\Checkboxes.sln")," from the command-line), here is the output we'll see:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"With .attribute('checked')\ntrue\nWith .selected?\nFalse\nTrue\n")),(0,i.kt)("p",null,"With the attribute lookup, depending on the state of the checkbox, we receive either a nothing or a string with the value ",(0,i.kt)("inlineCode",{parentName:"p"},'"true"'),". Whereas with ",(0,i.kt)("inlineCode",{parentName:"p"},".selected?")," we get a boolean (",(0,i.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") response."),(0,i.kt)("p",null,"Let's see what these approaches look like when put to use in a test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: Checkboxes.cs\n// ...\n    [Test]\n    public void GetCheckBoxStatusByAttribute()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/checkboxes");\n        IWebElement Checkbox = Driver.FindElement(By.CssSelector("form input:nth-of-type(2)"));\n        Assert.That(Checkbox.GetAttribute("checked").Equals("true"));\n    }\n// ...\n')),(0,i.kt)("p",null,"With an attribute lookup we check against the return value (which is a string). In this case we're seeing if the return value is ",(0,i.kt)("inlineCode",{parentName:"p"},'"true"'),". Let's see what the other approach looks like."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: Checkboxes.cs\n// ...\n    [Test]\n    public void GetCheckBoxesStatusByQuery()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/checkboxes");\n        IWebElement Checkbox = Driver.FindElement(By.CssSelector("form input:nth-of-type(2)"));\n        Assert.That(Checkbox.Selected);\n    }\n}\n')),(0,i.kt)("p",null,"In this case, when referencing the return value it's a simple matter of checking against a boolean value."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save and run the test file (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\Checkboxes.sln")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Find all of the checkboxes on the page"),(0,i.kt)("li",{parentName:"ul"},"Assert that the second checkbox (the one that is supposed to be checked on initial page load) is checked"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Attribute lookups are meant for pulling information out of the page for review. While they work in this circumstance you're better off using a selected lookup. But the approach you choose will depend on how the checkboxes you're testing are constructed."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},20099:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:1,hide_sidebar:!0,publish_date:new Date("2015-11-11T00:00:00.000Z"),last_update:{date:new Date("2023-03-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-test-checkboxes/java",id:"how-to-test-checkboxes/java",title:"java",description:"A Solution",source:"@site/docs/45-how-to-test-checkboxes/java.md",sourceDirName:"45-how-to-test-checkboxes",slug:"/how-to-test-checkboxes/java",permalink:"/docs/how-to-test-checkboxes/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/45-how-to-test-checkboxes/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680134400,formattedLastUpdatedAt:"Mar 30, 2023",frontMatter:{language:"java",level:1,hide_sidebar:!0,publish_date:"2015-11-11T00:00:00.000Z",last_update:{date:"2023-03-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"There are two ways to approach this issue -- by seeing if an element has a ",(0,i.kt)("inlineCode",{parentName:"p"},"checked")," attribute (a.k.a. performing an attribute lookup), or by asking an element if it has been ",(0,i.kt)("em",{parentName:"p"},"selected"),"."),(0,i.kt)("p",null,"We're going to go through each of these approaches to see their pros and cons."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"For reference, here is the markup from ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/checkboxes"},"the page we'll be testing against")," (from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<form>\n  <input type="checkbox"> unchecked<br>\n  <input type="checkbox" checked=""> checked\n</form>\n')),(0,i.kt)("p",null,"First let's import our requisite classes (for annotations (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.junit.After"),", etc.), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.openqa.selenium.WebDriver"),", etc.), and matchers for our assertions (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.hamcrest.CoreMatchers"),", etc.)) and start our class with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// filename: Checkboxes.java\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport java.util.List;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.hamcrest.MatcherAssert.assertThat;\n\npublic class Checkboxes {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Before we write any tests, let's walk through both checkbox approaches to see what Selenium gives us."),(0,i.kt)("p",null,"To do that we'll want to grab all of the checkboxes on the page, and iterate through them. Once using an attribute lookup, and again asking if the element is selected. Each time outputting the return value we get from Selenium."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'    @Test\n    public void checkboxDiscoveryTest() {\n        driver.get("http://the-internet.herokuapp.com/checkboxes");\n        List<WebElement> checkboxes = driver.findElements(By.cssSelector("input[type=\'checkbox\']"));\n\n        System.out.println("With .attribute(\'checked\')");\n        for (WebElement checkbox : checkboxes) {\n            System.out.println(String.valueOf(checkbox.getAttribute("checked")));\n        }\n\n        System.out.println("\\nWith .selected?");\n        for (WebElement checkbox : checkboxes) {\n            System.out.println(checkbox.isSelected());\n        }\n    }\n// ...\n')),(0,i.kt)("p",null,"When we save our file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn clean test")," from the command-line), here is the output we'll see:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"With .attribute('checked')\nnull\n\"true\"\n\nWith .selected?\nfalse\ntrue\n")),(0,i.kt)("p",null,"With the attribute lookup, depending on the state of the checkbox, we receive either a ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," or a string with the value ",(0,i.kt)("inlineCode",{parentName:"p"},'"true"'),". Whereas with ",(0,i.kt)("inlineCode",{parentName:"p"},".selected?")," we get a boolean (",(0,i.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") response."),(0,i.kt)("p",null,"Let's see what these approaches look like when put to use in a test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: Checkboxes.java\n// ...\n    @Test\n    public void checkboxOption1Test() throws Exception {\n        driver.get("http://the-internet.herokuapp.com/checkboxes");\n        WebElement checkbox = driver.findElement(By.cssSelector("form input:nth-of-type(2)"));\n        assertThat(checkbox.getAttribute("checked"), is(not("null")));\n        assertThat(checkbox.getAttribute("checked"), is("true"));\n    }\n// ...\n')),(0,i.kt)("p",null,"With an attribute lookup we check against the return value (which is a String). In this case we're seeing if the return value is not ",(0,i.kt)("inlineCode",{parentName:"p"},'"null"')," and is ",(0,i.kt)("inlineCode",{parentName:"p"},'"true"'),". Let's see what the other approach looks like."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: Checkboxes.java\n// ...\n    @Test\n    public void checkboxOption2Test() throws Exception {\n        driver.get("http://the-internet.herokuapp.com/checkboxes");\n        WebElement checkbox = driver.findElement(By.cssSelector("form input:nth-of-type(2)"));\n        assertThat(checkbox.isSelected(), is(true));\n    }\n\n}\n')),(0,i.kt)("p",null,"In this case, when referencing the return value it's a simple matter of checking against a boolean."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save and run the file (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn clean test")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Find all of the checkboxes on the page"),(0,i.kt)("li",{parentName:"ul"},"Assert that the second checkbox (the one that is supposed to be checked on initial page load) is checked"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Attribute lookups are meant for pulling information out of the page for review. While they work in this circumstance, you're better off using a selected lookup. But the approach you choose will depend on how the checkboxes you're testing are constructed."),(0,i.kt)("p",null,"Thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/RomanIsko"},"Roman Isko")," for contributing the initial Java code for this tip."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},26089:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:1,hide_sidebar:!0,publish_date:new Date("2019-08-09T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-test-checkboxes/javascript",id:"how-to-test-checkboxes/javascript",title:"javascript",description:"A Solution",source:"@site/docs/45-how-to-test-checkboxes/javascript.md",sourceDirName:"45-how-to-test-checkboxes",slug:"/how-to-test-checkboxes/javascript",permalink:"/docs/how-to-test-checkboxes/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/45-how-to-test-checkboxes/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"javascript",level:1,hide_sidebar:!0,publish_date:"2019-08-09T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About the Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"There are two ways to approach this issue -- by seeing if an element has a ",(0,i.kt)("inlineCode",{parentName:"p"},"checked")," attribute (a.k.a. performing an attribute lookup), or by asking an element if it has been ",(0,i.kt)("em",{parentName:"p"},"selected"),"."),(0,i.kt)("p",null,"We're going to go through each of these approaches to see their pros and cons."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"For reference, here is the markup from ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/checkboxes"},"the page we will be testing against")," (an example from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<form>\n  <input type="checkbox"> unchecked<br>\n  <input type="checkbox" checked=""> checked\n</form>\n')),(0,i.kt)("p",null,"Let's start by requiring our dependent libraries, declare our test class, and write up some test setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/checkboxes.spec.js\nconst assert = require("assert");\nconst { Builder, By } = require("selenium-webdriver");\n\ndescribe("Checkboxes", function() {\n  let driver;\n\n  beforeEach(async function() {\n    driver = await new Builder().forBrowser("chrome").build();\n  });\n\n  afterEach(async function() {\n    await driver.quit();\n  });\n// ...\n')),(0,i.kt)("p",null,"Before we begin writing a test to verify the state of the page, let's walk through both checkbox approaches to see what Selenium gives us."),(0,i.kt)("p",null,"To do that we'll want to grab all of the checkboxes on the page and iterate through them once using an attribute lookup and again asking if the element is selected. For each we'll output the return values we get from Selenium."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/checkboxes.spec.js\n// ...\n  it("should list values for different approaches", async function() {\n    await driver.get("http://the-internet.herokuapp.com/checkboxes");\n    const checkboxes = await driver.findElements(\n      By.css(\'input[type="checkbox"]\')\n    );\n\n    console.log("With .getAttribute(\'checked\')");\n    for (let checkbox in checkboxes)\n      console.log(await checkboxes[checkbox].getAttribute("checked"));\n\n    console.log("\\nWith .is_selected");\n    for (let checkbox in checkboxes)\n      console.log(await checkboxes[checkbox].isSelected());\n  });\n});\n// ...\n')),(0,i.kt)("p",null,"When we save our file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mocha")," from the command-line), here is the output we'll see."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"With .attribute('checked')\nnull\ntrue\n\nWith .is_selected\nfalse\ntrue\n")),(0,i.kt)("p",null,"With the attribute lookup, depending on the state of the checkbox, we receive either a ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," or a ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," boolean value whereas with ",(0,i.kt)("inlineCode",{parentName:"p"},".isSelected")," we get a boolean value either way."),(0,i.kt)("p",null,"Let's see what these approaches look like when put to use in our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/checkboxes.spec.js\n// ...\n  it("should list values for different approaches", async function() {\n    // ...\n    assert(checkboxes[checkboxes.length - 1].getAttribute("checked"));\n    assert(checkboxes[checkboxes.length - 1].isSelected());\n    assert(checkboxes[0].getAttribute("checked"));\n    assert(checkboxes[0].isSelected());\n  });\n});\n// ...\n')),(0,i.kt)("p",null,"With either approach we can simply assert on the return value (even if it's a value of ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," -- since in JavaScript ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," evaluates to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") and have things work as expected."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save and run the file (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mocha")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Find all of the checkboxes on the page"),(0,i.kt)("li",{parentName:"ul"},"Assert that the last checkbox (the one that is supposed to be checked on initial page load) is checked"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Attribute lookups are generally meant for pulling information out of the page for review however in this case they lend themselves to seeing if a checkbox is checked. There is a method which was built for this use case that is more readable and has a predictable set of return values. ",(0,i.kt)("inlineCode",{parentName:"p"},"isSelected")," should be the thing you reach for, knowing that an attribute lookup is there as a solid backup if you find you need it."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About the Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},74656:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:1,hide_sidebar:!0,publish_date:new Date("2016-11-18T00:00:00.000Z"),last_update:{date:new Date("2023-03-03T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-test-checkboxes/python",id:"how-to-test-checkboxes/python",title:"python",description:"A Solution",source:"@site/docs/45-how-to-test-checkboxes/python.md",sourceDirName:"45-how-to-test-checkboxes",slug:"/how-to-test-checkboxes/python",permalink:"/docs/how-to-test-checkboxes/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/45-how-to-test-checkboxes/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677801600,formattedLastUpdatedAt:"Mar 3, 2023",frontMatter:{language:"python",level:1,hide_sidebar:!0,publish_date:"2016-11-18T00:00:00.000Z",last_update:{date:"2023-03-03T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About the Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"There are two ways to approach this issue -- by seeing if an element has a ",(0,i.kt)("inlineCode",{parentName:"p"},"checked")," attribute (a.k.a. performing an attribute lookup), or by asking an element if it has been ",(0,i.kt)("em",{parentName:"p"},"selected"),"."),(0,i.kt)("p",null,"We're going to go through each of these approaches to see their pros and cons."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"For reference, here is the markup from ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/checkboxes"},"the page we will be testing against")," (an example from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<form>\n  <input type="checkbox"> unchecked<br>\n  <input type="checkbox" checked=""> checked\n</form>\n')),(0,i.kt)("p",null,"Let's kick things off by requiring our dependent libraries (",(0,i.kt)("inlineCode",{parentName:"p"},"import unittest")," for our test framework and ",(0,i.kt)("inlineCode",{parentName:"p"},"from selenium import webdriver")," to drive the browser), declare our test class, and wire up some test ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: checkboxes.py\nimport unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\n\nclass Checkboxes(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n\n    def tearDown(self):\n        self.driver.quit()\n\n# ...\n")),(0,i.kt)("p",null,"Before we dig into writing a test to verify the state of the page, let's walk through both checkbox approaches to see what Selenium gives us."),(0,i.kt)("p",null,"To do that we'll want to grab all of the checkboxes on the page and iterate through them. Once using an attribute lookup and again asking if the element is selected. For each we'll output the return values we get from Selenium."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: checkboxes.py\n# ...\n    def test_list_values_for_different_approaches(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/checkboxes')\n        checkboxes = driver.find_elements(By.CSS_SELECTOR, 'input[type=\"checkbox\"]')\n\n        print(\"With .get_attribute('checked')\")\n        for checkbox in checkboxes:\n            print(checkbox.get_attribute('checked'))\n\n        print(\"\\nWith .is_selected\")\n        for checkbox in checkboxes:\n            print(checkbox.is_selected())\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,i.kt)("p",null,"When we save our file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"python checkboxes.py")," from the command-line), here is the output we'll see."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"With .attribute('checked')\nNone\ntrue\n\nWith .is_selected\nFalse\nTrue\n")),(0,i.kt)("p",null,"With the attribute lookup, depending on the state of the checkbox, we receive either a ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," string value or a ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," boolean value. Whereas with ",(0,i.kt)("inlineCode",{parentName:"p"},".is_selected")," we get a boolean value either way."),(0,i.kt)("p",null,"Let's see what these approaches look like when put to use in our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: checkboxes.py\n# ...\n    def test_list_values_for_different_approaches(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/checkboxes')\n        checkboxes = driver.find_elements(By.CSS_SELECTOR, 'input[type=\"checkbox\"]')\n\n        assert checkboxes[-1].get_attribute('checked')\n        # or\n        assert checkboxes[-1].is_selected()\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,i.kt)("p",null,"With either approach we can simply assert on the return value (even if it's a string value of ",(0,i.kt)("inlineCode",{parentName:"p"},"'None"),"') and have things work as expected. We can confirm this by asserting on the checkbox which is not selected."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: checkboxes.py\n# ...\n    def test_list_values_for_different_approaches(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/checkboxes')\n        checkboxes = driver.find_elements(By.CSS_SELECTOR, 'input[type=\"checkbox\"]')\n\n        assert checkboxes[0].get_attribute('checked')\n        # or\n        assert checkboxes[0].is_selected()\n")),(0,i.kt)("p",null,"An ",(0,i.kt)("inlineCode",{parentName:"p"},"AssertionError")," will be raised for either assertion."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"======================================================================\nFAIL: test_list_values_for_different_approaches (__main__.Checkboxes)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"45-checkboxes/python/checkboxes.py\", line 31, in test_list_values_for_different_approaches\n    assert checkboxes[0].get_attribute('checked')\nAssertionError\n\n----------------------------------------------------------------------\nRan 1 test in 3.356s\n\nFAILED (failures=1)\n\nshell returned 1\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save and run the file (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"python checkboxes.py")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Find all of the checkboxes on the page"),(0,i.kt)("li",{parentName:"ul"},"Assert that the last checkbox (the one that is supposed to be checked on initial page load) is checked"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Attribute lookups are generally meant for pulling information out of the page for review however in this case they lend themselves to seeing if a checkbox is checked. There is a method which was built for this use case that is more readable and has a predictable set of return values. ",(0,i.kt)("inlineCode",{parentName:"p"},"isSelected")," should be the thing you reach for, knowing that an attribute lookup is there as a solid backup if you find you need it."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About the Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing;\nincluding The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},8878:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:1,hide_sidebar:!0,publish_date:new Date("2015-10-13T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-test-checkboxes/ruby",id:"how-to-test-checkboxes/ruby",title:"ruby",description:"A Solution",source:"@site/docs/45-how-to-test-checkboxes/ruby.md",sourceDirName:"45-how-to-test-checkboxes",slug:"/how-to-test-checkboxes/ruby",permalink:"/docs/how-to-test-checkboxes/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/45-how-to-test-checkboxes/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"ruby",level:1,hide_sidebar:!0,publish_date:"2015-10-13T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"There are two ways to approach this issue -- by seeing if an element has a ",(0,i.kt)("inlineCode",{parentName:"p"},"checked")," attribute (a.k.a. performing an attribute lookup), or by asking an element if it has been ",(0,i.kt)("em",{parentName:"p"},"selected"),"."),(0,i.kt)("p",null,"We're going to go through each of these approaches to see their pros and cons."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"For reference, here is the markup from ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/checkboxes"},"the page we will be testing against")," (an example from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<form>\n  <input type="checkbox"> unchecked<br>\n  <input type="checkbox" checked=""> checked\n</form>\n')),(0,i.kt)("p",null,"We kick things off by requiring our dependent libraries (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to drive the browser, and ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers")," to handle our assertions) and wire up some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods to abstract our test configuration."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: checkboxes.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Before we write any tests, let's walk through both checkbox approaches to see what Selenium gives us."),(0,i.kt)("p",null,"To do that we'll want to grab all of the checkboxes on the page, and iterate through them. Once using an attribute lookup, and again asking if the element is selected -- each time outputting the return value we get from Selenium."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/checkboxes'\n  checkboxes = @driver.find_elements(css: 'input[type=\"checkbox\"]')\n\n  puts \"With .attribute('checked')\"\n  checkboxes.each { |checkbox| puts checkbox.attribute('checked').inspect }\n\n  puts \"\\nWith .selected?\"\n  checkboxes.each { |checkbox| puts checkbox.selected?.inspect }\nend\n")),(0,i.kt)("p",null,"When we save our file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby checkboxes.rb")," from the command-line), here is the output we'll see."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"With .attribute('checked')\nnil\n\"true\"\n\nWith .selected?\nfalse\ntrue\n")),(0,i.kt)("p",null,"With the attribute lookup, depending on the state of the checkbox, we receive either a ",(0,i.kt)("inlineCode",{parentName:"p"},"nil")," or a string with the value ",(0,i.kt)("inlineCode",{parentName:"p"},'"true"'),". Whereas with ",(0,i.kt)("inlineCode",{parentName:"p"},".selected?")," we get a boolean (",(0,i.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") response."),(0,i.kt)("p",null,"Let's see what these approaches look like when put to use in a test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/checkboxes'\n  checkboxes = @driver.find_elements(css: 'input[type=\"checkbox\"]')\n  expect(checkboxes.last.attribute('checked')).not_to be_nil\n  # alternatively\n  expect(checkboxes.last.attribute('checked')).to eql(\"true\")\nend\n")),(0,i.kt)("p",null,"With an attribute lookup, the simplest thing to do is to assert that the return value is not ",(0,i.kt)("inlineCode",{parentName:"p"},"nil"),". Alternatively we could have checked for the value ",(0,i.kt)("inlineCode",{parentName:"p"},'"true"'),". Let's see what the other approach looks like."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/checkboxes'\n  checkboxes = @driver.find_elements(css: 'input[type=\"checkbox\"]')\n  expect(checkboxes.last.selected?).to eql true\nend\n")),(0,i.kt)("p",null,"When checking to see if a checkbox has been selected, it's a straightforward matter of checking for a boolean value."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save and run the file (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby checkboxes.rb")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Find all of the checkboxes on the page"),(0,i.kt)("li",{parentName:"ul"},"Assert that the last checkbox (the one that is supposed to be checked on initial page load) is checked"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Attribute lookups are generally meant for pulling information out of the page for review, however, in this case they lend themselves to seeing if a checkbox is checked. There is a method which was built for this use case that is more readable and has a predictable set of return values. ",(0,i.kt)("inlineCode",{parentName:"p"},"isSelected")," should be the thing you reach for, knowing that an attribute lookup is there as a solid backup if you find you need it."),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},25015:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"waiting/csharp",id:"waiting/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/47-waiting/csharp.md",sourceDirName:"47-waiting",slug:"/waiting/csharp",permalink:"/docs/waiting/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/47-waiting/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},61678:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"waiting/java",id:"waiting/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/47-waiting/java.md",sourceDirName:"47-waiting",slug:"/waiting/java",permalink:"/docs/waiting/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/47-waiting/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},11073:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"waiting/javascript",id:"waiting/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/47-waiting/javascript.md",sourceDirName:"47-waiting",slug:"/waiting/javascript",permalink:"/docs/waiting/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/47-waiting/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},76451:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"waiting/python",id:"waiting/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/47-waiting/python.md",sourceDirName:"47-waiting",slug:"/waiting/python",permalink:"/docs/waiting/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/47-waiting/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},39108:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:2,hide_sidebar:!0,publish_date:new Date("2015-10-13T00:00:00.000Z"),last_update:{date:new Date("2023-03-15T00:00:00.000Z")}},o=void 0,l={unversionedId:"waiting/ruby",id:"waiting/ruby",title:"ruby",description:"A Solution",source:"@site/docs/47-waiting/ruby.md",sourceDirName:"47-waiting",slug:"/waiting/ruby",permalink:"/docs/waiting/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/47-waiting/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1678838400,formattedLastUpdatedAt:"Mar 15, 2023",frontMatter:{language:"ruby",level:2,hide_sidebar:!0,publish_date:"2015-10-13T00:00:00.000Z",last_update:{date:"2023-03-15T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"The short answer? Use explicit waits."),(0,i.kt)("p",null,"Adding an implicit wait to your Selenium tests is simple enough and may seem intuitive. But there are cases where it simply doesn't help you like you think it will. And while you can combine explicit and implicit waits together (e.g., override an implicit wait with an explicit wait to make a Selenium action wait longer) -- you shouldn't. I'll discuss more on that later."),(0,i.kt)("p",null,"Let's continue with some examples."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Let's step through some examples that deal with ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/dynamic_loading"},"dynamically loaded content")," available on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet"),". There are two examples, each is constructed slightly differently, but they have the same behavior (e.g., when you click the button on the page a loading bar appears for 5 seconds then disappears and displays some text)."),(0,i.kt)("p",null,"First let's pull in our dependent libraries (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to drive the browser, and ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers")," for our assertions) and wire up some simple methods (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run"),") to handle our test configuration."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: waiting.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\n  @driver.manage.timeouts.implicit_wait = 3\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Notice that in ",(0,i.kt)("inlineCode",{parentName:"p"},"setup")," we are specifying an implicit wait of ",(0,i.kt)("inlineCode",{parentName:"p"},"3")," seconds. This tells Selenium to retry each ",(0,i.kt)("inlineCode",{parentName:"p"},"find_element")," action for up to 3 seconds. If it can complete the action in that amount of time, it will proceed onto the next command. Otherwise it will raise a timeout exception."),(0,i.kt)("p",null,"Now let's add our first test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/dynamic_loading/1'\n  @driver.find_element(css: '#start button').click\n  @driver.find_element(id: 'finish').displayed?\n  expect(@driver.find_element(id: 'finish').text).to eql('Hello World!')\nend\n")),(0,i.kt)("p",null,"In this example the element we're interested in is already on the page, just hidden. When we execute this (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby waiting.rb")," from the command-line) the ",(0,i.kt)("inlineCode",{parentName:"p"},".displayed?")," step runs but it doesn't trigger the implicit wait. Instead, the test proceeds directly to the assertion looking for text that's not there and failing."),(0,i.kt)("p",null,"Let's run the same test against the other dynamic loading example."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/dynamic_loading/2'\n  @driver.find_element(css: '#start button').click\n  @driver.find_element(id: 'finish').displayed?\n  expect(@driver.find_element(id: 'finish').text).to eql('Hello World!')\nend\n")),(0,i.kt)("p",null,"In this example the element we're interested in gets rendered ",(0,i.kt)("em",{parentName:"p"},"after")," the loading bar. When we run this (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby waiting.rb")," from the command-line) the ",(0,i.kt)("inlineCode",{parentName:"p"},".displayed?")," step will wait as we intend, but the assertion will still fail. That's because the implicit wait is not long enough (because the loading bar takes 5 seconds to complete, but the implicit wait is set at ",(0,i.kt)("inlineCode",{parentName:"p"},"3")," seconds)."),(0,i.kt)("p",null,"Now we're at a cross-roads. Do we increase the implicit wait to account for this? That would be a simple enough fix for this example. But that's a bad option since it would impact ",(0,i.kt)("em",{parentName:"p"},"all")," of the tests that use this setup. Instead, we can use an explicit wait."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"def wait_for(seconds)\n  Selenium::WebDriver::Wait.new(timeout: seconds).until { yield }\nend\n\nrun do\n  @driver.get 'http://the-internet.herokuapp.com/dynamic_loading/2'\n  @driver.find_element(css: '#start button').click\n  wait_for(10) { @driver.find_element(id: 'finish').displayed? }\n  expect(@driver.find_element(id: 'finish').text).to eql('Hello World!')\nend\n")),(0,i.kt)("p",null,"If we wrap our ",(0,i.kt)("inlineCode",{parentName:"p"},".displayed?")," action in an explicit wait we are able to override the implicit wait and wait for up 10 seconds. Now when we run our test, our test will pass. And if we revisit our first example and do the same, then it will pass too."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/dynamic_loading/1'\n  @driver.find_element(css: '#start button').click\n  wait_for(10) { @driver.find_element(id: 'finish').displayed? }\n  expect(@driver.find_element(id: 'finish').text).to eql('Hello World!')\nend\n")),(0,i.kt)("blockquote",null,(0,i.kt)("h3",{parentName:"blockquote",id:"on-not-mixing-explicit-and-implicit-waits"},"On Not Mixing Explicit and Implicit Waits"),(0,i.kt)("p",{parentName:"blockquote"},"If your test suite uses both explicit and implicit waits, then you're in for some pain (e.g., transient failures as you scale your test suite). For more details about this, check out ",(0,i.kt)("a",{parentName:"p",href:"http://stackoverflow.com/questions/15164742/combining-implicit-wait-and-explicit-wait-together-results-in-unexpected-wait-ti#answer-15174978"},"this StackOverflow answer")," from ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/jimevansmusic"},"Jim Evans")," (a member of the Selenium core team)."),(0,i.kt)("p",{parentName:"blockquote"},"The best thing is to only use explicit waits. We already have them in place, so we can go ahead and simply remove the implicit wait from our ",(0,i.kt)("inlineCode",{parentName:"p"},"setup")," method."),(0,i.kt)("pre",{parentName:"blockquote"},(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"def setup\n @driver = Selenium::WebDriver.for :firefox\nend\n")),(0,i.kt)("p",{parentName:"blockquote"},"And there you go!"),(0,i.kt)("h2",{parentName:"blockquote",id:"expected-behavior"},"Expected Behavior")),(0,i.kt)("p",null,"If we save the file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby waiting.rb")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Click the Start button"),(0,i.kt)("li",{parentName:"ul"},"Wait for the progress bar to disappear and finish text to appear"),(0,i.kt)("li",{parentName:"ul"},"Assert that the finish text appears on the page"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"While an implicit wait can be useful, providing you an initial blanket of cover, it's not ideal for every circumstance. Instead explicit waits are a better tool for the job since they provide more resilient and predictable results (even if they make your test code more verbose)."),(0,i.kt)("p",null,"Regardless of the approach you choose, be sure never to mix implicit and explicit waits together."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},31536:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"load-testing/csharp",id:"load-testing/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/48-load-testing/csharp.md",sourceDirName:"48-load-testing",slug:"/load-testing/csharp",permalink:"/docs/load-testing/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/48-load-testing/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},98112:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"load-testing/java",id:"load-testing/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/48-load-testing/java.md",sourceDirName:"48-load-testing",slug:"/load-testing/java",permalink:"/docs/load-testing/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/48-load-testing/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},63699:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"load-testing/javascript",id:"load-testing/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/48-load-testing/javascript.md",sourceDirName:"48-load-testing",slug:"/load-testing/javascript",permalink:"/docs/load-testing/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/48-load-testing/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},66581:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"load-testing/python",id:"load-testing/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/48-load-testing/python.md",sourceDirName:"48-load-testing",slug:"/load-testing/python",permalink:"/docs/load-testing/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/48-load-testing/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},91422:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:3,hide_sidebar:!0,publish_date:new Date("2014-04-30T00:00:00.000Z"),last_update:{date:new Date("2023-04-06T00:00:00.000Z")}},o=void 0,l={unversionedId:"load-testing/ruby",id:"load-testing/ruby",title:"ruby",description:"A Solution",source:"@site/docs/48-load-testing/ruby.md",sourceDirName:"48-load-testing",slug:"/load-testing/ruby",permalink:"/docs/load-testing/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/48-load-testing/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680739200,formattedLastUpdatedAt:"Apr 6, 2023",frontMatter:{language:"ruby",level:3,hide_sidebar:!0,publish_date:"2014-04-30T00:00:00.000Z",last_update:{date:"2023-04-06T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Rather than invest time, money, and frustration into JMeter, a Selenium infrastructure, or a third-party provider, we can generate a good amount of load by leveraging an existing Selenium script, a proxy server, and an HTTP client library along with some parallel threads."),(0,i.kt)("p",null,"With a proxy server we can capture the HTTP requests generated by Selenium and replay them with an HTTP client library in parallel -- effectively replicating the same actions hitting the web server simultaneously, in large numbers."),(0,i.kt)("p",null,"Let's continue with an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Before we get started we'll need to ",(0,i.kt)("a",{parentName:"p",href:"http://bmp.lightbody.net/"},"download a copy of BrowserMob Proxy"),". Once we have that, we'll want to include our requisite libraries:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"selenium-webdriver")," to control the browser"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"browsermob/proxy")," to configure/use BrowserMob Proxy"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"typhoeus")," to replay HTTP requests")),(0,i.kt)("p",null,"After that, we can create methods to configure the proxy server (",(0,i.kt)("inlineCode",{parentName:"p"},"configure_proxy"),"), set the browser profile to use the proxy server (",(0,i.kt)("inlineCode",{parentName:"p"},"browser_profile"),"), pull these together so the test will have a working browser that uses the proxy server (",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),"), and tear things down after running the test (",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: load.rb\n\nrequire 'selenium-webdriver'\nrequire 'browsermob/proxy'\nrequire 'typhoeus'\n\ndef configure_proxy\n  proxy_binary = BrowserMob::Proxy::Server.new('./browsermob-proxy/bin/browsermob-proxy')\n  proxy_binary.start\n  proxy_binary.create_proxy\nend\n\ndef browser_profile\n  browser_profile = Selenium::WebDriver::Firefox::Profile.new\n  browser_profile.proxy = @proxy.selenium_proxy\n  browser_profile\nend\n\ndef setup\n  @proxy = configure_proxy\n  @driver = Selenium::WebDriver.for :firefox, profile: browser_profile\nend\n\ndef teardown\n  @driver.quit\n  @proxy.close\nend\n")),(0,i.kt)("p",null,"Next we'll want to tell the proxy server to capture traffic and return a payload (a.k.a. a HTTP Archive, or HAR). For easier debugging later, we will want to add some error handling to output the results from each HTTP request that's replayed (",(0,i.kt)("inlineCode",{parentName:"p"},"error_handling"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'def capture_traffic\n  @proxy.new_har\n  yield\n  @proxy.har\nend\n\ndef error_handling(request)\n  request.on_complete do |response|\n    if response.success?\n      puts "success"\n    elsif response.timed_out?\n      puts "got a time out"\n    elsif response.code == 0\n      # Could not get an http response, something\'s wrong.\n      puts response.return_message\n    else\n      # Received a non-successful http response.\n      puts "HTTP request failed: " + response.code.to_s\n    end\n  end\nend\n')),(0,i.kt)("p",null,"Now for the meat of the issue -- replaying the requests."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'def replay(http_requests, number_of_replays, debug = false)\n  requests = []\n  http_requests.entries.each do |entry|\n    requests << Typhoeus::Request.new(\n      entry.request.url,\n      method: entry.request.method.downcase.to_sym)\n  end\n\n  start_time = Time.now\n  puts "Start time: #{start_time}"\n  threads = []\n  number_of_replays.times do\n    threads << Thread.new do\n      requests.each do |request|\n        error_handling request if debug\n        request.run\n      end\n    end\n  end\n  threads.each {|thread| thread.join }\n  finish_time = Time.now\n  puts "Finish time: #{finish_time}"\n  puts "#{number_of_replays} runs completed in #{finish_time - start_time} seconds"\nend\n')),(0,i.kt)("p",null,"We start by iterating through each of the entries in the HAR payload, creating a new request for Typhoeus to use -- storing them all in an array."),(0,i.kt)("p",null,"After printing the current time to the terminal, we create a new thread and execute all of the Typhoeus HTTP requests within it (outputting the error handling for each request if a debug parameter is passed in). This gets repeated based on the number of times specified when ",(0,i.kt)("inlineCode",{parentName:"p"},"replay")," is called."),(0,i.kt)("p",null,"After the threads run and terminate, we output the current time, and then list the total time run time along with the number of replays attempted."),(0,i.kt)("p",null,"We can now pull all of this together by implementing a simple ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"def run\n  setup\n  http_requests = capture_traffic { yield }\n  teardown\n  replay(http_requests, 100)\nend\n")),(0,i.kt)("p",null,"If we wanted to see the debug output, we would pass in ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," as a third parameter like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"replay(http_requests, 100, true)\n")),(0,i.kt)("p",null,"Now that everything's wired up, we can drop our Selenium actions into a run block."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/dynamic_loading/2'\n  @driver.find_element(css: '#start button').click\n  Selenium::WebDriver::Wait.new(timeout: 8).until do\n    @driver.find_element(css: '#finish')\n  end\nend\n")),(0,i.kt)("p",null,"If we run this script without debugging turned on, then we should see something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"Start time: 2014-04-30 14:22:33 -0400\nFinish time: 2014-04-30 14:23:10 -0400\n100 runs completed in 37.575052 seconds\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Load a browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page and complete the actions specified while capturing the HTTP requests"),(0,i.kt)("li",{parentName:"ul"},"Close the browser and shutdown the proxy server"),(0,i.kt)("li",{parentName:"ul"},"Replay the HTTP requests generated by Selenium 100 times in parallel")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this was helpful in helping you figure out how to do load testing."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},78271:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"performance-testing/csharp",id:"performance-testing/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/49-performance-testing/csharp.md",sourceDirName:"49-performance-testing",slug:"/performance-testing/csharp",permalink:"/docs/performance-testing/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/49-performance-testing/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},12331:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"performance-testing/java",id:"performance-testing/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/49-performance-testing/java.md",sourceDirName:"49-performance-testing",slug:"/performance-testing/java",permalink:"/docs/performance-testing/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/49-performance-testing/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},4668:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"performance-testing/javascript",id:"performance-testing/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/49-performance-testing/javascript.md",sourceDirName:"49-performance-testing",slug:"/performance-testing/javascript",permalink:"/docs/performance-testing/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/49-performance-testing/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},76470:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"performance-testing/python",id:"performance-testing/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/49-performance-testing/python.md",sourceDirName:"49-performance-testing",slug:"/performance-testing/python",permalink:"/docs/performance-testing/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/49-performance-testing/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},97375:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:3,hide_sidebar:!0,publish_date:new Date("2014-05-06T00:00:00.000Z"),last_update:{date:new Date("2023-04-06T00:00:00.000Z")}},o=void 0,l={unversionedId:"performance-testing/ruby",id:"performance-testing/ruby",title:"ruby",description:"A Solution",source:"@site/docs/49-performance-testing/ruby.md",sourceDirName:"49-performance-testing",slug:"/performance-testing/ruby",permalink:"/docs/performance-testing/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/49-performance-testing/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680739200,formattedLastUpdatedAt:"Apr 6, 2023",frontMatter:{language:"ruby",level:3,hide_sidebar:!0,publish_date:"2014-05-06T00:00:00.000Z",last_update:{date:"2023-04-06T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By repurposing a Selenium script, we can run it through a proxy server and capture the HTTP traffic. With this traffic, we can run some simple checks to see if the application's performance has degraded."),(0,i.kt)("p",null,"Let's dig in with an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Before we get started we'll need to ",(0,i.kt)("a",{parentName:"p",href:"http://bmp.lightbody.net/"},"download a copy of BrowserMob Proxy"),". Once we have that, we'll want to include our requisite libraries:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"selenium-webdriver")," to control the browser"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"browsermob/proxy")," to configure/user BrowserMob Proxy"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rspec=expectations")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"RSpec::Matchers")," for assertions"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"json")," to consume JSON data for the performance checks")),(0,i.kt)("p",null,"After that, we can create methods to configure the proxy server (",(0,i.kt)("inlineCode",{parentName:"p"},"configure_proxy"),"), set the browser profile to use the proxy server (",(0,i.kt)("inlineCode",{parentName:"p"},"browser_profile"),"), pull these together so the test will have a working browser that uses the proxy server (",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),"), and tear things down after running the test (",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: performance.rb\n\nrequire 'selenium-webdriver'\nrequire 'browsermob/proxy'\nrequire 'rspec-expectations'\ninclude RSpec::Matchers\nrequire 'json'\n\ndef configure_proxy\n  proxy_binary = BrowserMob::Proxy::Server.new('./browsermob-proxy/bin/browsermob-proxy')\n  proxy_binary.start\n  proxy_binary.create_proxy\nend\n\ndef browser_profile\n  browser_profile = Selenium::WebDriver::Firefox::Profile.new\n  browser_profile.proxy = @proxy.selenium_proxy\n  browser_profile\nend\n\ndef setup\n  @proxy = configure_proxy\n  @driver = Selenium::WebDriver.for :firefox, profile: browser_profile\nend\n\ndef teardown\n  @driver.quit\n  @proxy.close\nend\n")),(0,i.kt)("p",null,"Next we'll want to tell the proxy server to capture traffic and return a payload (a.k.a. a HTTP Archive, or HAR for short)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"def capture_traffic\n  @proxy.new_har\n  yield\n  @proxy.har\nend\n")),(0,i.kt)("p",null,"We then tie this all together with a ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," method. It will call ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", execute test commands while capturing traffic (",(0,i.kt)("inlineCode",{parentName:"p"},"capture_traffic"),"), save the HAR to a uniquely named file (which is named with a time stamp), and tear everything down when it's done (",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'def run\n  setup\n  har = capture_traffic { yield }\n  @har_file = "./selenium_#{Time.now.strftime("%m%d%y_%H%M%S")}.har"\n  har.save_to @har_file\n  teardown\nend\n')),(0,i.kt)("p",null,"Now we can put all of this to use by exercising a feature of our application with some Selenium commands."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/dynamic_loading/2'\n  @driver.find_element(css: '#start button').click\n  Selenium::WebDriver::Wait.new(timeout: 8).until do\n    @driver.find_element(css: '#finish')\n  end\nend\n")),(0,i.kt)("p",null,"If we run this script (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby performance.rb")," from the command-line) then we will see the browser load, complete some actions, and close. After which, a HAR file will appear in the working directory."),(0,i.kt)("p",null,"This outputted file is what we'll use to perform some simple benchmark checks."),(0,i.kt)("p",null,"Rather than identify specific benchmarks to check, let's run through a gamut of them by leveraging a pre-existing benchmarking tool like ",(0,i.kt)("a",{parentName:"p",href:"https://developer.yahoo.com/yslow/"},"YSlow"),". Fortunately, there is ",(0,i.kt)("a",{parentName:"p",href:"http://yslow.org/command-line-har/"},"a command-line YSlow tool")," that can consume a HAR file and provide us with useful output."),(0,i.kt)("p",null,"It's a Node.js app. So first we'll need to ",(0,i.kt)("a",{parentName:"p",href:"http://nodejs.org/"},"install Node.js"),", and then install the app (with ",(0,i.kt)("inlineCode",{parentName:"p"},"npm install yslow -g"),")."),(0,i.kt)("p",null,"After that, we can run it from the command line like so:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"yslow --info basic --format plain example.har")),(0,i.kt)("p",null,"This will consume a HAR file and output some helpful information -- including an overall score."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"size: 476.8K (476888 bytes)\noverall score: A (99)\nurl: http://the-internet.herokuapp.com/dynamic_loading/2\n# of requests: 16\nruleset: ydefault\n")),(0,i.kt)("p",null,"This overall score is what we are interested in. To get at it, we'll need to change the format type from ",(0,i.kt)("inlineCode",{parentName:"p"},"plain")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"json"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"yslow --info basic --format json example.har")),(0,i.kt)("p",null,"This will return a Hash that we can then easily parse through to get the value we want (e.g., the overall score with a key of ",(0,i.kt)("inlineCode",{parentName:"p"},'"o"'),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'{"w":476887,"o":99,"u":"http%3A%2F%2Fthe-internet.herokuapp.com%2Fdynamic_loading%2F2","r":16,"i":"ydefault"}\n')),(0,i.kt)("p",null,"Now we can automate the YSlow command-line execution and perform an assertion by adding the following to the end of our script."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'performance_results = JSON.parse `yslow --info basic --format json #{@har_file}`\nperformance_grade = performance_results["o"]\nperformance_grade.should be > 95\n')),(0,i.kt)("p",null,"Now when we run this if the overall score drops below a 95 out of 100 then the test will fail."),(0,i.kt)("p",null,"From here we can wire this up to a Continuous Integration server and run it headlessly (either with Xvfb or GhostDriver) to perform these checks in an ongoing basis."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Load the browser"),(0,i.kt)("li",{parentName:"ul"},"Capture all requests through the proxy server"),(0,i.kt)("li",{parentName:"ul"},"Save the captured requests to a HTTP Archive (HAR) file on disk"),(0,i.kt)("li",{parentName:"ul"},"Run the HAR file through YSlow to get a numeric grade"),(0,i.kt)("li",{parentName:"ul"},"Assert that the grade is above a certain level")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"You can see the full code example ",(0,i.kt)("a",{parentName:"p",href:"https://gist.github.com/tourdedave/bc4b75fd6cdc1eef7860"},"here"),"."),(0,i.kt)("p",null,"For more insights into what HAR is and the many uses of it, check out ",(0,i.kt)("a",{parentName:"p",href:"http://www.igvita.com/2012/08/28/web-performance-power-tool-http-archive-har/"},"this write-up and video from Ilya Grigorik's blog"),". You can also ",(0,i.kt)("a",{parentName:"p",href:"http://www.softwareishard.com/blog/har-12-spec/"},"check out the HAR spec"),". And there's also ",(0,i.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=qQgDDAan4rM"},"a great presentation from David Burns and David Henderson at GTAC 2009")," on using Selenium to do performance benchmarking."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},36317:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:1,hide_sidebar:!0,publish_date:new Date("2016-06-13T00:00:00.000Z"),last_update:{date:new Date("2023-03-29T00:00:00.000Z")}},o=void 0,l={unversionedId:"select-from-a-dropdown/csharp",id:"select-from-a-dropdown/csharp",title:"csharp",description:"Example 1",source:"@site/docs/5-select-from-a-dropdown/csharp.md",sourceDirName:"5-select-from-a-dropdown",slug:"/select-from-a-dropdown/csharp",permalink:"/docs/select-from-a-dropdown/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/5-select-from-a-dropdown/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680048e3,formattedLastUpdatedAt:"Mar 29, 2023",frontMatter:{language:"csharp",level:1,hide_sidebar:!0,publish_date:"2016-06-13T00:00:00.000Z",last_update:{date:"2023-03-29T00:00:00.000Z"}}},s={},u=[{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"First let's include our requisite classes for our test framework (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"NUnit.Framework"),"), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenQA.Selenium"),", etc.), access to C# collections (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Collections.Generic"),"), and start our class off with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: Dropdown.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\nusing OpenQA.Selenium.Support.UI;\nusing System.Collections.Generic;\n\npublic class Dropdown\n{\n    IWebDriver Driver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now let's wire up our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: Dropdown.cs\n// ...\n    [Test]\n    public void SelectFromDropdownTheHardWay()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/dropdown");\n        IWebElement Dropdown = Driver.FindElement(By.Id("dropdown"));\n        IReadOnlyCollection<IWebElement> DropdownOptions = Dropdown.FindElements(By.TagName("option"));\n        foreach(IWebElement Option in DropdownOptions)\n        {\n            if(Option.Text.Equals("Option 1"))\n                Option.Click();\n        }\n        string SelectedOption = "";\n        foreach (IWebElement Option in DropdownOptions)\n        {\n            if (Option.Selected)\n                SelectedOption = Option.Text;\n        }\n        Assert.That(SelectedOption.Equals("Option 1"));\n    }\n// ...\n')),(0,i.kt)("p",null,"After visiting ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/dropdown"},"the example application")," we find the dropdown list by its ID and store it in a variable. We then find each element in the dropdown list (e.g., each element with an ",(0,i.kt)("inlineCode",{parentName:"p"},"option")," tag) with ",(0,i.kt)("inlineCode",{parentName:"p"},"FindElements")," (note the plural)."),(0,i.kt)("p",null,"Grabbing all of the options with ",(0,i.kt)("inlineCode",{parentName:"p"},"FindElements")," returns a collection that we iterate over. When the text matches what we want (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},'"Option 1"'),") we click on it."),(0,i.kt)("p",null,"We finish the test by performing a check to see that our selection was made correctly. This is done by iterating over the dropdown options collection once more. This time we're getting the text of the item that was selected, storing it in a variable, and making an assertion against it."),(0,i.kt)("p",null,"While this works, there is a simpler, built-in way to do this with Selenium. Let's give that a go."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: Dropdown.cs\n// ...\n    [Test]\n    public void SelectFromDropdownTheEasyWay()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/dropdown");\n        SelectElement Dropdown = new SelectElement(Driver.FindElement(By.Id("dropdown")));\n        Dropdown.SelectByText("Option 1");\n        Assert.That(Dropdown.SelectedOption.Text.Equals("Option 1"));\n    }\n\n}\n')),(0,i.kt)("p",null,"Similar to the first example, we are finding the dropdown list by its ID. But instead of iterating over its option elements and clicking based on a conditional we are leveraging a built-in helper function of Selenium. With ",(0,i.kt)("a",{parentName:"p",href:"http://seleniumhq.github.io/selenium/docs/api/dotnet/html/T_OpenQA_Selenium_Support_UI_SelectElement.htm"},(0,i.kt)("inlineCode",{parentName:"a"},"SelectElement"))," and its ",(0,i.kt)("inlineCode",{parentName:"p"},"SelectBy")," methods (e.g., ",(0,i.kt)("a",{parentName:"p",href:"http://seleniumhq.github.io/selenium/docs/api/dotnet/html/M_OpenQA_Selenium_Support_UI_SelectElement_SelectByText.htm"},(0,i.kt)("inlineCode",{parentName:"a"},"SelectByText")),") we're able to easily choose the item we want."),(0,i.kt)("p",null,"We then perform our assertion against the text of the currently selected option (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},'Dropdown.SelectedOption.Text.Equals("Option 1")'),")."),(0,i.kt)("p",null,"As an aside, in addition to selecting by text you can also select by value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'        Dropdown.SelectByValue("1");\n')),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\Dropdown.sln")," from the command-line) here is what will happen for either example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the example application"),(0,i.kt)("li",{parentName:"ul"},"Find the dropdown list"),(0,i.kt)("li",{parentName:"ul"},"Select the specified item from the dropdown list"),(0,i.kt)("li",{parentName:"ul"},"Assert that the selected option is what you expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip will help you breeze through selecting items from a dropdown list."),(0,i.kt)("p",null,"Thanks to Jonathan Taylor for contributing the initial C# code for this tip!"),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},85893:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:1,hide_sidebar:!0,publish_date:new Date("2015-11-09T00:00:00.000Z"),last_update:{date:new Date("2023-04-03T00:00:00.000Z")}},o=void 0,l={unversionedId:"select-from-a-dropdown/java",id:"select-from-a-dropdown/java",title:"java",description:"Example 1",source:"@site/docs/5-select-from-a-dropdown/java.md",sourceDirName:"5-select-from-a-dropdown",slug:"/select-from-a-dropdown/java",permalink:"/docs/select-from-a-dropdown/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/5-select-from-a-dropdown/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:168048e4,formattedLastUpdatedAt:"Apr 3, 2023",frontMatter:{language:"java",level:1,hide_sidebar:!0,publish_date:"2015-11-09T00:00:00.000Z",last_update:{date:"2023-04-03T00:00:00.000Z"}}},s={},u=[{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"First let's import our requisite classes (for annotations (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.junit.After"),", etc.), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.openqa.selenium.WebDriver"),", etc.), and matchers for our assertions (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.hamcrest.CoreMatchers"),", etc.)) and start our class with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// filename: Dropdown.java\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.WebElement;\nimport java.util.List;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.hamcrest.MatcherAssert.assertThat;\n\npublic class Dropdown {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now let's wire up our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: Dropdown.java\n// ...\n    @Test\n    public void dropdownTest() {\n        driver.get("http://the-internet.herokuapp.com/dropdown");\n        WebElement dropdownList = driver.findElement(By.id("dropdown"));\n        List<WebElement> options = dropdownList.findElements(By.tagName("option"));\n        for (int i = 0; i < options.size(); i++) {\n            if (options.get(i).getText().equals("Option 1")) {\n                options.get(i).click();\n            }\n        }\n        String selectedOption = "";\n        for (int i = 0; i < options.size(); i++) {\n            if (options.get(i).isSelected()) {\n                selectedOption = options.get(i).getText();\n            }\n        }\n        assertThat(selectedOption, is("Option 1"));\n    }\n// ...\n')),(0,i.kt)("p",null,"After visiting ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/dropdown"},"the example application")," we find the dropdown list by it's ID and store it in a variable. We then find each clickable element in the dropdown list (e.g., each ",(0,i.kt)("inlineCode",{parentName:"p"},"option"),") with ",(0,i.kt)("inlineCode",{parentName:"p"},"findElements")," (note the plural)."),(0,i.kt)("p",null,"Grabbing all of the options with ",(0,i.kt)("inlineCode",{parentName:"p"},"findElements")," returns a collection that we iterate over. When the text matches what we want, we click on it."),(0,i.kt)("p",null,"We finish the test by performing a check to see that our selection was made correctly. This is done by iterating over the dropdown options collection one more time. This time we're getting the text of the item that was selected, storing it in a variable, and making an assertion against it."),(0,i.kt)("p",null,"While this works, there is a more accessible way to do this."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: Dropdown.java\n// ...\n    @Test\n    public void dropdownTestRedux() {\n        driver.get("http://the-internet.herokuapp.com/dropdown");\n        Select selectList = new Select(driver.findElement(By.id("dropdown")));\n        selectList.selectByVisibleText("Option 1");\n        assertThat(selectList.getFirstSelectedOption().getText(), is(equalTo("Option 1")));\n    }\n\n}\n')),(0,i.kt)("p",null,"Similar to the first example, we are finding the dropdown list by it's ID. But instead of iterating over its option elements and clicking based on a conditional we are leveraging a built-in helper function of Selenium. With ",(0,i.kt)("a",{parentName:"p",href:"https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/support/ui/Select.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Select"))," and it's ",(0,i.kt)("inlineCode",{parentName:"p"},"selectBy")," methods (e.g., ",(0,i.kt)("a",{parentName:"p",href:"https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/support/ui/Select.html#selectByVisibleText-java.lang.String-"},(0,i.kt)("inlineCode",{parentName:"a"},"selectByVisibleText")),") we're able to easily choose the item we want."),(0,i.kt)("p",null,"We then ask the ",(0,i.kt)("inlineCode",{parentName:"p"},"selectList")," what option was selected by using ",(0,i.kt)("a",{parentName:"p",href:"https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/support/ui/Select.html#getFirstSelectedOption--"},(0,i.kt)("inlineCode",{parentName:"a"},"getFirstSelectedOption"))," and perform our assertion against it's text."),(0,i.kt)("p",null,"As an aside, in addition to selecting by text you can also select by value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'        select.selectByValue("1");\n')),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn clean test")," from the command-line) here is what will happen for either example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the example application"),(0,i.kt)("li",{parentName:"ul"},"Find the dropdown list"),(0,i.kt)("li",{parentName:"ul"},"Select the specified item from the dropdown list"),(0,i.kt)("li",{parentName:"ul"},"Assert that the selected option is what you expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip will help you breeze through selecting items from a dropdown list."),(0,i.kt)("p",null,"Thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/RomanIsko"},"Roman Isko")," for contributing the initial Java code for this tip! Want me to cover more tips in Java or other programming languages? Send me a pull request for an existing tip and I will! All code examples are open source and available ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/elemental-selenium-tips"},"here"),"."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Hopefully this tip will help you breeze through selecting items from a dropdown list."),(0,i.kt)("p",null,"Thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/RomanIsko"},"Roman Isko")," for contributing the initial Java code for this tip."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},4464:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:1,hide_sidebar:!0,publish_date:new Date("2019-08-09T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"select-from-a-dropdown/javascript",id:"select-from-a-dropdown/javascript",title:"javascript",description:"Example 1",source:"@site/docs/5-select-from-a-dropdown/javascript.md",sourceDirName:"5-select-from-a-dropdown",slug:"/select-from-a-dropdown/javascript",permalink:"/docs/select-from-a-dropdown/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/5-select-from-a-dropdown/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"javascript",level:1,hide_sidebar:!0,publish_date:"2019-08-09T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About the Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"First let's pull in our requisite libraries, declare the test class, and wire up some simple setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: spec/dropdown.spec.js\nconst assert = require("assert");\nconst { Builder, By } = require("selenium-webdriver");\n\ndescribe("Dropdown", function() {\n  let driver;\n\n  beforeEach(async function() {\n    driver = await new Builder().forBrowser("chrome").build();\n  });\n\n  afterEach(async function() {\n    await driver.quit();\n  });\n// ...\n')),(0,i.kt)("p",null,"Now lets' wire up our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: spec/dropdown.spec.js\n// ...\n  it("select the hard way", async function() {\n    await driver.get("http://the-internet.herokuapp.com/dropdown");\n    const options = await driver.findElements(By.css("#dropdown option"));\n    let selection;\n    for (const option in options) {\n      if ((await options[option].getText()) === "Option 1") {\n        await options[option].click();\n        break;\n      }\n    }\n    for (const option in options) {\n      if (await options[option].isSelected()) {\n        selection = await options[option].getText();\n        break;\n      }\n    }\n    assert(selection === "Option 1");\n  });\n// ...\n')),(0,i.kt)("p",null,"After visiting ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/dropdown"},"the example application")," we find the dropdown list by its ID and store it in a variable. We then find each clickable element in the dropdown list (e.g., each ",(0,i.kt)("inlineCode",{parentName:"p"},"option"),") with ",(0,i.kt)("inlineCode",{parentName:"p"},"findElements"),"."),(0,i.kt)("p",null,"Grabbing all of the options returns a collection that we iterate over and when the text matches what we want it will click on it."),(0,i.kt)("p",null,"We finish the test by performing a check to see that our selection was made correctly. This is done by looping over the dropdown options collection one more time. This time we're getting the text of the item that was selected, storing it in a variable, and then making an assertion against it."),(0,i.kt)("p",null,"While this works, there is a more accessible way to do this."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: spec/dropdown.spec.js\n// ...\n  it("select the simpler way", async function() {\n    await driver.get("http://the-internet.herokuapp.com/dropdown");\n    await driver\n      .findElement(\n        By.xpath("//*[@id=\'dropdown\']/option[contains(text(),\'Option 1\')]")\n      )\n      .click();\n    const selection = await driver\n      .findElement(By.css(\'#dropdown option[selected="selected"]\'))\n      .getText();\n    assert(selection === "Option 1");\n  });\n});\n')),(0,i.kt)("p",null,"Similar to the first example, we are selecting a dropdown list option by its text. Instead of first finding the dropdown list, we will employ a more robust locator (e.g., XPath) to find an element within the dropdown list that contains our target text -- and click it."),(0,i.kt)("p",null,"We then determine what has been selected in the dropdown list by using one more powerful locator (e.g., a CSS selector). This time, looking to see which option has the ",(0,i.kt)("inlineCode",{parentName:"p"},"selected")," attribute, and grabbing its text. We use this found text to assert that the correct item was chosen."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If you save this file with either of these examples and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mocha")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the example application"),(0,i.kt)("li",{parentName:"ul"},"Find the dropdown list"),(0,i.kt)("li",{parentName:"ul"},"Select the requested item from the dropdown list"),(0,i.kt)("li",{parentName:"ul"},"Assert that the selected option is the one you expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"In this tip, we've gone over using Selenium to select from a drop down using the drop down list, or XPath to find an element within the dropdown list."),(0,i.kt)("p",null,"Hopefully this will help you when selecting items from a dropdown list."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About the Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},32388:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:1,hide_sidebar:!0,publish_date:new Date("2015-07-06T00:00:00.000Z"),last_update:{date:new Date("2023-03-02T00:00:00.000Z")}},o=void 0,l={unversionedId:"select-from-a-dropdown/python",id:"select-from-a-dropdown/python",title:"python",description:"Example 1",source:"@site/docs/5-select-from-a-dropdown/python.md",sourceDirName:"5-select-from-a-dropdown",slug:"/select-from-a-dropdown/python",permalink:"/docs/select-from-a-dropdown/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/5-select-from-a-dropdown/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677715200,formattedLastUpdatedAt:"Mar 2, 2023",frontMatter:{language:"python",level:1,hide_sidebar:!0,publish_date:"2015-07-06T00:00:00.000Z",last_update:{date:"2023-03-02T00:00:00.000Z"}}},s={},u=[{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About the Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"First let's pull in our requisite libraries, declare the test class, and wire up some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: dropdown.py\nimport unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\n\nclass DropDown(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n\n    def tearDown(self):\n        self.driver.quit()\n\n# ...\n")),(0,i.kt)("p",null,"Now lets' wire up our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: dropdown.py\n# ...\n    def test_example_1(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/dropdown')\n        dropdown_list = driver.find_element(By.ID, 'dropdown')\n        options = dropdown_list.find_elements(By.TAG_NAME, 'option')\n        for opt in options:\n            if opt.text == 'Option 1':\n                opt.click()\n                break\n        for opt in options:\n            if opt.is_selected():\n                selected_option = opt.text\n                break\n        assert selected_option == 'Option 1', \"Selected option should be Option 1\"\n\n")),(0,i.kt)("p",null,"After visiting ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/dropdown"},"the example application")," we find the dropdown list by its ID and store it in a variable. We then find each clickable element in the dropdown list (e.g., each ",(0,i.kt)("inlineCode",{parentName:"p"},"option"),") with ",(0,i.kt)("inlineCode",{parentName:"p"},"find_elements_by_tag_name"),"."),(0,i.kt)("p",null,"Grabbing all of the options returns a collection that we iterate over and when the text matches what we want it will click on it."),(0,i.kt)("p",null,"We finish the test by performing a check to see that our selection was made correctly. This is done by reiterating over the dropdown options collection one more time. This time we're getting the text of the item that was selected, storing it in a variable, and making an assertion against it."),(0,i.kt)("p",null,"While this works, there is a simpler, built-in way to do this with Selenium. Let's give that a go."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: dropdown.py\nimport unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.support.select import Select as WebDriverSelect\n# ...\n\n    def test_example_2(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/dropdown')\n        dropdown = driver.find_element(By.ID, 'dropdown')\n        select_list = WebDriverSelect(dropdown)\n        select_list.select_by_visible_text('Option 1')\n        selected_option = select_list.first_selected_option.text\n        assert selected_option == 'Option 1', \"Selected option should be Option 1\"\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,i.kt)("p",null,"Similar to the first example, we are finding the dropdown list by its ID. But instead of iterating over its option elements and clicking based on a conditional check, we are leveraging a built-in helper function of Selenium, ",(0,i.kt)("a",{parentName:"p",href:"http://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.select.html#module-selenium.webdriver.support.select"},(0,i.kt)("inlineCode",{parentName:"a"},"Select")),", and its ",(0,i.kt)("a",{parentName:"p",href:"http://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.select.html#selenium.webdriver.support.select.Select.select_by_visible_text"},(0,i.kt)("inlineCode",{parentName:"a"},"select_by_visibile_text"))," method to choose the item we want."),(0,i.kt)("p",null,"We then ask the ",(0,i.kt)("inlineCode",{parentName:"p"},"select_list")," what option was selected by using the ",(0,i.kt)("a",{parentName:"p",href:"http://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.select.html#selenium.webdriver.support.select.Select.first_selected_option"},(0,i.kt)("inlineCode",{parentName:"a"},"first_selected_option"))," method. This returns a Selenium Element that we grab the text from, storing it in a variable (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"selected_option"),")."),(0,i.kt)("p",null,"Then we perform our assertion against this variable (just like in the previous example)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: In addition to selecting by text, you can also select by value.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"  select_list.select_by_value('1')\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If you save this file with either of these examples and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"python dropdown.py")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the example application"),(0,i.kt)("li",{parentName:"ul"},"Find the dropdown list"),(0,i.kt)("li",{parentName:"ul"},"Select the requested item from the dropdown list"),(0,i.kt)("li",{parentName:"ul"},"Assert that the selected option is the one you expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"In this tip, we've gone over using Selenium to select from a drop down using the drop down list, or XPath to find an element within the dropdown list."),(0,i.kt)("p",null,"Hopefully this will help you when selecting items from a dropdown list."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About the Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},23267:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:1,hide_sidebar:!0,publish_date:new Date("2015-07-06T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"select-from-a-dropdown/ruby",id:"select-from-a-dropdown/ruby",title:"ruby",description:"Example 1",source:"@site/docs/5-select-from-a-dropdown/ruby.md",sourceDirName:"5-select-from-a-dropdown",slug:"/select-from-a-dropdown/ruby",permalink:"/docs/select-from-a-dropdown/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/5-select-from-a-dropdown/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"ruby",level:1,hide_sidebar:!0,publish_date:"2015-07-06T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"First let's pull in our requisite libraries and write some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: dropdown.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Now let's write up our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: dropdown.rb\n...\nrun do\n  @driver.get 'http://the-internet.herokuapp.com/dropdown'\n\n  dropdown_list = @driver.find_element(id: 'dropdown')\n  options = dropdown_list.find_elements(tag_name: 'option')\n  options.each { |option| option.click if option.text == 'Option 1' }\n\n  selected_option = options.map { |option| option.text if option.selected? }.join\n  expect(selected_option).to eql 'Option 1'\nend\n")),(0,i.kt)("p",null,"After visiting ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/dropdown"},"the example application")," we find the dropdown list by its ID and store it in a variable. We then find each clickable element in the dropdown list (e.g., each ",(0,i.kt)("inlineCode",{parentName:"p"},"option"),") with ",(0,i.kt)("inlineCode",{parentName:"p"},"find_elements"),"."),(0,i.kt)("p",null,"Grabbing all of the options returns a collection that we iterate over and when the text matches what we want it will click on it."),(0,i.kt)("p",null,"We finish the test by performing a check to see that our selection was made correctly. This is done by reiterating over the dropdown options collection one more time. This time we're getting the text of the item that was selected, storing it in a variable, and making an assertion against it."),(0,i.kt)("p",null,"While this works, there is a more accessible way to do this."),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: dropdown.rb\n...\nrun do\n  @driver.get 'http://the-internet.herokuapp.com/dropdown'\n\n  dropdown = @driver.find_element(id: 'dropdown')\n  select_list = Selenium::WebDriver::Support::Select.new(dropdown)\n  select_list.select_by(:text, 'Option 1')\n\n  selected_option = select_list.selected_options[0].text\n  expect(selected_option).to eql 'Option 1'\nend\n")),(0,i.kt)("p",null,"Similar to the first example, we are finding the dropdown list by its ID. Instead of iterating over its option elements and clicking based on a conditional check, we are leveraging a built-in helper function of Selenium, ",(0,i.kt)("a",{parentName:"p",href:"https://seleniumhq.github.io/selenium/docs/api/rb/Selenium/WebDriver/Support/Select.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Select")),", and it's ",(0,i.kt)("a",{parentName:"p",href:"https://seleniumhq.github.io/selenium/docs/api/rb/Selenium/WebDriver/Support/Select.html#select_by-instance_method"},(0,i.kt)("inlineCode",{parentName:"a"},"select_by"))," method to choose the item we want."),(0,i.kt)("p",null,"We then ask the ",(0,i.kt)("inlineCode",{parentName:"p"},"select_list")," what option was selected by using the ",(0,i.kt)("a",{parentName:"p",href:"https://seleniumhq.github.io/selenium/docs/api/rb/Selenium/WebDriver/Support/Select.html#selected_options-instance_method"},(0,i.kt)("inlineCode",{parentName:"a"},"selected_options"))," method. This returns an array of Selenium Elements (which in this case is an array of just one element). So we need to reference the first element by it's index (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"[0]"),"), ask for it's text, and store it in a variable (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"selected_option"),")."),(0,i.kt)("p",null,"Then we perform our assertion against this variable (just like in the previous example)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: In addition to selecting by text, you can also select by value using the code below.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"  select_list.select_by(:value, '1')\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If you save this file with either of these examples and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby dropdown.rb")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the example application"),(0,i.kt)("li",{parentName:"ul"},"Find the dropdown list"),(0,i.kt)("li",{parentName:"ul"},"Select the requested item from the dropdown list"),(0,i.kt)("li",{parentName:"ul"},"Assert that the selected option is the one you expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"In this tip, we've gone over using Selenium to select from a drop down using the drop down list, or a built-in helper function of Selenium to find an element within the dropdown list."),(0,i.kt)("p",null,"Hopefully this will help you when selecting items from a dropdown list."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},85906:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:1,hide_sidebar:!0,publish_date:new Date("2016-06-13T00:00:00.000Z"),last_update:{date:new Date("2023-03-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-work-with-hovers/csharp",id:"how-to-work-with-hovers/csharp",title:"csharp",description:"A Solution",source:"@site/docs/50-how-to-work-with-hovers/csharp.md",sourceDirName:"50-how-to-work-with-hovers",slug:"/how-to-work-with-hovers/csharp",permalink:"/docs/how-to-work-with-hovers/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/50-how-to-work-with-hovers/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680134400,formattedLastUpdatedAt:"Mar 30, 2023",frontMatter:{language:"csharp",level:1,hide_sidebar:!0,publish_date:"2016-06-13T00:00:00.000Z",last_update:{date:"2023-03-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"The most popular use case for a hover action is to display additional menu options(submenu.)"),(0,i.kt)("p",null,"By leveraging Selenium's ",(0,i.kt)("a",{parentName:"p",href:"http://seleniumhq.github.io/selenium/docs/api/dotnet/html/T_OpenQA_Selenium_Interactions_Actions.htm"},"Action Builder")," we can handle more complex user interactions like hovers. This is done by telling Selenium which element we want to move the mouse to, and then performing what we need to after."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Our example application is available ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/hovers"},"here")," on ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the-internet"),". It has a few avatars displayed in a grid layout. When you hover over each of them they display additional user information and a link to view a full profile."),(0,i.kt)("p",null,"Let's write a test that will hover over the first avatar and make sure that its additional information appears."),(0,i.kt)("p",null,"First let's include our requisite classes for our test framework (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"NUnit.Framework"),"), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenQA.Selenium"),", etc.), and start our class off with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: Hovers.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\nusing OpenQA.Selenium.Interactions;\n\npublic class Hovers\n{\n    IWebDriver Driver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now let's write our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: Hovers.cs\n    [Test]\n    public void MouseHoverDisplays()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/hovers");\n\n        IWebElement Avatar = Driver.FindElement(By.ClassName("figure"));\n        Actions Builder = new Actions(Driver);\n        Builder.MoveToElement(Avatar).Build().Perform();\n\n        By Hover = By.ClassName("figcaption");\n        Assert.That(Driver.FindElement(Hover).Displayed);\n    }\n}\n')),(0,i.kt)("p",null,"After visiting the page we find the first avatar and store it in a variable (",(0,i.kt)("inlineCode",{parentName:"p"},"Avatar"),"). We then use Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},"MoveToElement")," method and pass the avatar variable to it (which triggers the hover) and check to see if the additional user information displayed."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\Hovers.sln")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Hover over the first avatar"),(0,i.kt)("li",{parentName:"ul"},"Assert that the caption displayed for that avatar"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this will help you handle more complex user interactions like hovers."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},31066:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:1,hide_sidebar:!0,publish_date:new Date("2015-11-11T00:00:00.000Z"),last_update:{date:new Date("2023-04-03T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-work-with-hovers/java",id:"how-to-work-with-hovers/java",title:"java",description:"A Solution",source:"@site/docs/50-how-to-work-with-hovers/java.md",sourceDirName:"50-how-to-work-with-hovers",slug:"/how-to-work-with-hovers/java",permalink:"/docs/how-to-work-with-hovers/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/50-how-to-work-with-hovers/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:168048e4,formattedLastUpdatedAt:"Apr 3, 2023",frontMatter:{language:"java",level:1,hide_sidebar:!0,publish_date:"2015-11-11T00:00:00.000Z",last_update:{date:"2023-04-03T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"The most popular use case for a hover action is to display additional menu options(submenu.)"),(0,i.kt)("p",null,"By leveraging Selenium's ",(0,i.kt)("a",{parentName:"p",href:"https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/interactions/Actions.html"},"Action Builder")," we can handle more complex user interactions like hovers. This is done by telling Selenium which element we want to move the mouse to, and then performing what we need to after."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Our example application is available ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/hovers"},"here")," on ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the-internet"),". It has a few avatars displayed in a grid layout. When you hover over each of them, they display additional user information and a link to view a full profile."),(0,i.kt)("p",null,"Let's write a test that will hover over the first avatar and make sure that this additional information appears."),(0,i.kt)("p",null,"First we'll import our requisite classes (for annotations (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.junit.After"),", etc.), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.openqa.selenium.WebDriver"),", etc.), and matchers for our assertions (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.hamcrest.CoreMatchers"),", etc.)) and start our class with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// filename: Hovers.java\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport java.time.Duration;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.hamcrest.MatcherAssert.assertThat;\n\npublic class Hovers {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now let's write our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// ...\n    @Test\n    public void hoversTest() {\n        driver.get("http://the-internet.herokuapp.com/hovers");\n\n        WebElement avatar = driver.findElement(By.className("figure"));\n        Actions builder = new Actions(driver);\n        builder.moveToElement(avatar).build().perform();\n\n        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.className("figcaption")));\n\n        assertThat(driver.findElement(By.className("figcaption")).isDisplayed(), is(Boolean.TRUE));\n    }\n\n}\n')),(0,i.kt)("p",null,"After visiting the page we find the first avatar and store it in a variable (",(0,i.kt)("inlineCode",{parentName:"p"},"avatar"),"). We then use Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},"action.moveToElement")," method and pass the avatar variable to it (which triggers the hover) and check to see if the additional user information displayed."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn clean test")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Hover over the first avatar"),(0,i.kt)("li",{parentName:"ul"},"Assert that the caption displayed to the user"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this will help you handle more complex user interactions like hovers."),(0,i.kt)("p",null,"Thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/RomanIsko"},"Roman Isko")," for contributing the initial Java code for this tip."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},94918:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:1,hide_sidebar:!0,publish_date:new Date("2019-08-09T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-work-with-hovers/javascript",id:"how-to-work-with-hovers/javascript",title:"javascript",description:"A Solution",source:"@site/docs/50-how-to-work-with-hovers/javascript.md",sourceDirName:"50-how-to-work-with-hovers",slug:"/how-to-work-with-hovers/javascript",permalink:"/docs/how-to-work-with-hovers/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/50-how-to-work-with-hovers/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"javascript",level:1,hide_sidebar:!0,publish_date:"2019-08-09T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About the Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"The most popular use case for a hover action is to display additional menu options(submenu.)"),(0,i.kt)("p",null,"By leveraging Selenium's ",(0,i.kt)("a",{parentName:"p",href:"https://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/lib/input_exports_Actions.html"},"Actions")," we can handle more complex user interactions like hovers. This is done by telling Selenium which element we want to move the mouse to, and then performing what we need to after."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Our example application is available ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/hovers"},"here")," on ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the-internet"),". It has a few avatars displayed in a grid layout. When you hover over each of them, they display additional user information and a link to view a full profile."),(0,i.kt)("p",null,"We're going to write a test that will hover over the first avatar and make sure that this additional information appears."),(0,i.kt)("p",null,"First we'll include our requisite libraries, declare the test class, and wire up some simple setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/hovers.spec.js\nconst assert = require("assert");\nconst { Builder, By, Key } = require("selenium-webdriver");\n\ndescribe("Hovers", function() {\n  let driver;\n\n  beforeEach(async function() {\n    this.timeout(60000)\n    driver = await new Builder().forBrowser("firefox").build();\n  });\n\n  afterEach(async function() {\n    await driver.quit();\n  });\n// ...\n')),(0,i.kt)("p",null,"Now let's write our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/hovers.spec.js\n// ...\n  it("displays caption on hover", async function() {\n    await driver.get("http://the-internet.herokuapp.com/hovers");\n    const avatar = await driver.findElement(By.css(".figure"));\n    await driver\n      .actions({ bridge: true })\n      .move({ origin: avatar })\n      .perform();\n    const caption = await driver.findElement(By.css(".figcaption"));\n    assert(caption.isDisplayed());\n  });\n});\n')),(0,i.kt)("p",null,"After loading the page we find the first avatar and store it in a variable (",(0,i.kt)("inlineCode",{parentName:"p"},"avatar"),"). We then use the ",(0,i.kt)("inlineCode",{parentName:"p"},".move")," function and feed it the avatar variable (which triggers the hover)."),(0,i.kt)("p",null,"We then check to see if the additional user information is displayed with ",(0,i.kt)("inlineCode",{parentName:"p"},".isDisplayed")," in our assertion."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mocha")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Hover over the first avatar"),(0,i.kt)("li",{parentName:"ul"},"Assert that the caption appeared on the page"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this will help you handle more complex user interactions like hovers."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About the Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},61112:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:1,hide_sidebar:!0,publish_date:new Date("2016-11-23T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-work-with-hovers/python",id:"how-to-work-with-hovers/python",title:"python",description:"A Solution",source:"@site/docs/50-how-to-work-with-hovers/python.md",sourceDirName:"50-how-to-work-with-hovers",slug:"/how-to-work-with-hovers/python",permalink:"/docs/how-to-work-with-hovers/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/50-how-to-work-with-hovers/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"python",level:1,hide_sidebar:!0,publish_date:"2016-11-23T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About the Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"The most popular use case for a hover action is to display additional menu options(submenu.)"),(0,i.kt)("p",null,"By leveraging Selenium's ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/selenium/docs/api/py/webdriver/selenium.webdriver.common.action_chains.html"},"Actions")," we can handle more complex user interactions like hovers. This is done by telling Selenium which element we want to move the mouse to, and then performing what we need to after."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Our example application is available ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/hovers"},"here")," on ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the-internet"),". It has a few avatars displayed in a grid layout. When you hover over each of them, they display additional user information and a link to view a full profile."),(0,i.kt)("p",null,"We're going to write a test that will hover over the first avatar and make sure that this additional information appears."),(0,i.kt)("p",null,"First we'll include our requisite libraries, declare the test class, and wire up some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: hovers.py\nimport unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.common.action_chains import ActionChains\nfrom selenium.webdriver.common.by import By\n\n\nclass Hovers(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n\n    def tearDown(self):\n        self.driver.quit()\n\n# ...\n")),(0,i.kt)("p",null,"Now let's write our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: hovers.py\n# ...\n    def test_example_1(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/hovers')\n        avatar = driver.find_element(By.CLASS_NAME, 'figure')\n        ActionChains(driver).move_to_element(avatar).perform()\n        avatar_caption = driver.find_element(By.CLASS_NAME, 'figcaption')\n        assert avatar_caption.is_displayed()\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,i.kt)("p",null,"After loading the page we find the first avatar and store it in a variable (",(0,i.kt)("inlineCode",{parentName:"p"},"avatar"),"). We then use the ",(0,i.kt)("inlineCode",{parentName:"p"},".move_to_element")," method and feed it the avatar variable (which triggers the hover)."),(0,i.kt)("p",null,"We then check to see if the additional user information is displayed with ",(0,i.kt)("inlineCode",{parentName:"p"},".is_displayed")," in our assertion."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"python hover.py")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Hover over the first avatar"),(0,i.kt)("li",{parentName:"ul"},"Assert that the caption appeared on the page"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this will help you handle more complex user interactions like hovers."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About the Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},57812:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:1,hide_sidebar:!0,publish_date:new Date("2015-07-01T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-work-with-hovers/ruby",id:"how-to-work-with-hovers/ruby",title:"ruby",description:"A Solution",source:"@site/docs/50-how-to-work-with-hovers/ruby.md",sourceDirName:"50-how-to-work-with-hovers",slug:"/how-to-work-with-hovers/ruby",permalink:"/docs/how-to-work-with-hovers/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/50-how-to-work-with-hovers/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"ruby",level:1,hide_sidebar:!0,publish_date:"2015-07-01T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"The most popular use case for a hover action is to display additional menu options(submenu.)"),(0,i.kt)("p",null,"By leveraging Selenium's ",(0,i.kt)("a",{parentName:"p",href:"https://seleniumhq.github.io/selenium/docs/api/rb/Selenium/WebDriver/ActionBuilder.html"},"Actions")," we can handle more complex user interactions like hovers. This is done by telling Selenium which element we want to move the mouse to, and then performing what we need to after."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Our example application is available ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/hovers"},"here")," on ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the-internet"),". It has a few avatars displayed in a grid layout. When you hover over each of them, they display additional user information and a link to view a full profile."),(0,i.kt)("p",null,"We're going to write a test that will hover over the first avatar and make sure that this additional information appears."),(0,i.kt)("p",null,"First, we'll want to include our requisite libraries (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to control the browser, and ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers")," for our assertion) and wire up some ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: hover.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Now let's write our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/hovers'\n  an_avatar = @driver.find_element(class: 'figure')\n  @driver.action.move_to(an_avatar).perform\n  expect(@driver.find_element(class: 'figcaption').displayed?).to eql true\nend\n")),(0,i.kt)("p",null,"After loading the page we find the first avatar and store it in a variable (",(0,i.kt)("inlineCode",{parentName:"p"},"an_avatar"),"). We then use Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},"action.move_to")," method and feed the avatar variable to it (which triggers the hover)."),(0,i.kt)("p",null,"We then check to see if the additional user information is displayed with ",(0,i.kt)("inlineCode",{parentName:"p"},".displayed?")," and wrap that in an assertion."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby hover.rb")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Hover over the first avatar"),(0,i.kt)("li",{parentName:"ul"},"Assert that the caption appeared on the page"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this will help you handle more complex user interactions like hovers."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},10690:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:1,hide_sidebar:!0,publish_date:new Date("2016-06-13T00:00:00.000Z"),last_update:{date:new Date("2023-03-30T00:00:00.000Z")}},o="How to Work with JavaScript Alerts",l={unversionedId:"how-to-work-with-javascript-alerts/csharp",id:"how-to-work-with-javascript-alerts/csharp",title:"How to Work with JavaScript Alerts",description:"Intro",source:"@site/docs/51-how-to-work-with-javascript-alerts/csharp.md",sourceDirName:"51-how-to-work-with-javascript-alerts",slug:"/how-to-work-with-javascript-alerts/csharp",permalink:"/docs/how-to-work-with-javascript-alerts/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/51-how-to-work-with-javascript-alerts/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680134400,formattedLastUpdatedAt:"Mar 30, 2023",frontMatter:{language:"csharp",level:1,hide_sidebar:!0,publish_date:"2016-06-13T00:00:00.000Z",last_update:{date:"2023-03-30T00:00:00.000Z"}}},s={},u=[{value:"Intro",id:"intro",level:2},{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"how-to-work-with-javascript-alerts"},"How to Work with JavaScript Alerts"),(0,i.kt)("h2",{id:"intro"},"Intro"),(0,i.kt)("p",null,"Built into Selenium is the ability to switch to an alert window and either accept or dismiss it. This way your tests can continue unencumbered by dialog boxes."),(0,i.kt)("p",null,"A popular use case for alerts is in the case of error prevention for password restrictions."),(0,i.kt)("p",null,"If your application triggers any JavaScript pop-ups (a.k.a. alerts, dialogs, etc.) then you need to know how to handle them in your Selenium tests."),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Built into Selenium is the ability to switch to an alert window and either accept or dismiss it. This way your tests can continue unencumbered by dialog boxes that may feel just out of reach."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Our example application is available ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/javascript_alerts"},"here")," on ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the-internet"),". It has various JavaScript alerts available (e.g., an alert, a confirmation, and a prompt). Let's demonstrate testing a confirmation dialog (e.g., a prompt which asks the user to click ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Cancel"),")."),(0,i.kt)("p",null,"First let's include our requisite classes for our test framework (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"NUnit.Framework"),"), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenQA.Selenium"),", etc.), and start our class off with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: JavaScriptAlerts.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\n\npublic class JavaScriptAlerts\n{\n    IWebDriver Driver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now let's write our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: JavaScriptAlerts.cs\n// ...\n    [Test]\n    public void JavaScriptAlertAppearsAndAccepted()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/javascript_alerts");\n        Driver.FindElement(By.CssSelector(".example li:nth-child(2) button")).Click();\n        IAlert Popup = Driver.SwitchTo().Alert();\n        Popup.Accept();\n        string Result = Driver.FindElement(By.Id("result")).Text;\n        Assert.That(Result.Equals("You clicked: Ok"));\n    }\n\n}\n')),(0,i.kt)("p",null,"A quick glance at the page's markup shows that there are no unique IDs on the buttons. So to click on the second button (to trigger the JavaScript confirmation dialog) we find it with a child CSS Pseudo-class (",(0,i.kt)("inlineCode",{parentName:"p"},"nth-child(2)"),")."),(0,i.kt)("p",null,"After click the button to trigger the JavaScript alert we use Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},"SwitchTo().Alert();")," method to focus on the JavaScript pop-up and use ",(0,i.kt)("inlineCode",{parentName:"p"},".Accept();")," to click ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok"),". If we wanted to click ",(0,i.kt)("inlineCode",{parentName:"p"},"Cancel")," we would have used ",(0,i.kt)("inlineCode",{parentName:"p"},".Dismiss();"),"."),(0,i.kt)("p",null,"After accepting the alert our browser window will automatically regain focus and the page will display the result that we chose. We use this text for our assertion, making sure that the words ",(0,i.kt)("inlineCode",{parentName:"p"},"You clicked: Ok")," are displayed."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\JavaScriptAlerts.sln")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Click the second button on the page"),(0,i.kt)("li",{parentName:"ul"},"JavaScript confirmation alert appears"),(0,i.kt)("li",{parentName:"ul"},"JavaScript confirmation alert is accepted and goes away"),(0,i.kt)("li",{parentName:"ul"},"Browser window is returned to focus"),(0,i.kt)("li",{parentName:"ul"},"Assert that the result on the page is what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"We've learned how to accept/dismiss Javascript alerts using Selenium Webdriver by locating the alert using Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},"SwitchTo().Alert();"),". After accepting/dismissing the alert, our main browser window will automatically regain focus and the page will display the result."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},27895:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:1,hide_sidebar:!0,publish_date:new Date("2015-11-10T00:00:00.000Z"),last_update:{date:new Date("2023-04-03T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-work-with-javascript-alerts/java",id:"how-to-work-with-javascript-alerts/java",title:"java",description:"A Solution",source:"@site/docs/51-how-to-work-with-javascript-alerts/java.md",sourceDirName:"51-how-to-work-with-javascript-alerts",slug:"/how-to-work-with-javascript-alerts/java",permalink:"/docs/how-to-work-with-javascript-alerts/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/51-how-to-work-with-javascript-alerts/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:168048e4,formattedLastUpdatedAt:"Apr 3, 2023",frontMatter:{language:"java",level:1,hide_sidebar:!0,publish_date:"2015-11-10T00:00:00.000Z",last_update:{date:"2023-04-03T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Built into Selenium is the ability to switch to an alert window and either accept or dismiss it. This way your tests can continue unencumbered by dialog boxes that may feel just out of reach."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Our example application is available ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/javascript_alerts"},"here")," on ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the-internet"),". It has various JavaScript Alerts available (e.g., an alert, a confirmation, and a prompt). Let's demonstrate testing a confirmation dialog (e.g., a prompt which asks the user to click ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Cancel"),")."),(0,i.kt)("p",null,"First let's import our requisite classes (for annotations (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.junit.After"),", etc.), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.openqa.selenium.WebDriver"),", etc.), and matchers for our assertions (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.hamcrest.CoreMatchers"),", etc.)) and start our class with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// filename: JavaScriptAlert.java\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.Alert;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.hamcrest.MatcherAssert.assertThat;\n\npublic class JavaScriptAlert {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now let's write our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: JavaScriptAlert.java\n// ...\n    @Test\n    public void JavaScriptAlertTest() {\n        driver.get("http://the-internet.herokuapp.com/javascript_alerts");\n        driver.findElement(By.cssSelector(".example li:nth-child(2) button")).click();\n        Alert popup = driver.switchTo().alert();\n        popup.accept();\n        String result = driver.findElement(By.id("result")).getText();\n        assertThat(result, is(equalTo("You clicked: Ok")));\n    }\n\n}\n')),(0,i.kt)("p",null,"A quick glance at the page's markup shows that there are no unique IDs on the buttons. So to click on the second button (to trigger the JavaScript confirmation dialog) we find it with a child CSS Pseudo-class (",(0,i.kt)("inlineCode",{parentName:"p"},"nth-child(2)"),")."),(0,i.kt)("p",null,"After click the button to trigger the JavaScript Alert we use Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},"switchTo().alert();")," method to focus on the JavaScript pop-up and use ",(0,i.kt)("inlineCode",{parentName:"p"},".accept();")," to click ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok"),". If we wanted to click ",(0,i.kt)("inlineCode",{parentName:"p"},"Cancel")," we would have used ",(0,i.kt)("inlineCode",{parentName:"p"},".dismiss();"),"."),(0,i.kt)("p",null,"After accepting the alert, our browser window will automatically regain focus and the page will display the result that we chose. We use this text for our assertion, making sure that the words ",(0,i.kt)("inlineCode",{parentName:"p"},"You clicked: Ok")," are displayed."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn clean test")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Click the second button on the page"),(0,i.kt)("li",{parentName:"ul"},"JavaScript Confirmation Alert appears"),(0,i.kt)("li",{parentName:"ul"},"JavaScript Confirmation Alert is accepted and goes away"),(0,i.kt)("li",{parentName:"ul"},"Assert that the result on the page is what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/RomanIsko"},"Roman Isko")," for contributing the initial Java code for this tip."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},74186:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:1,hide_sidebar:!0,publish_date:new Date("2019-08-09T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-work-with-javascript-alerts/javascript",id:"how-to-work-with-javascript-alerts/javascript",title:"javascript",description:"A Solution",source:"@site/docs/51-how-to-work-with-javascript-alerts/javascript.md",sourceDirName:"51-how-to-work-with-javascript-alerts",slug:"/how-to-work-with-javascript-alerts/javascript",permalink:"/docs/how-to-work-with-javascript-alerts/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/51-how-to-work-with-javascript-alerts/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"javascript",level:1,hide_sidebar:!0,publish_date:"2019-08-09T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Built into Selenium is the ability to switch to an alert window and either accept or dismiss it. This way your tests can continue unencumbered by dialog boxes that may feel just out of reach."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Our example application is available ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/javascript_alerts"},"here")," on ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the-internet"),". It has various JavaScript Alerts available (e.g., an alert, a confirmation, and a prompt). Let's demonstrate testing a confirmation dialog (e.g., a prompt which asks the user to click ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Cancel"),")."),(0,i.kt)("p",null,"First, we'll include our requisite libraries, declare the test class, and wire up some simple setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/js-alerts.spec.js\nconst assert = require("assert");\nconst { Builder, By, Key } = require("selenium-webdriver");\n\ndescribe("JS Alerts", function() {\n  let driver;\n\n  beforeEach(async function() {\n    driver = await new Builder().forBrowser("chrome").build();\n  });\n\n  afterEach(async function() {\n    await driver.quit();\n  });\n// ...\n')),(0,i.kt)("p",null,"Now let's write our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/js-alerts.spec.js\n// ...\n  it("general use", async function() {\n    await driver.get("http://the-internet.herokuapp.com/javascript_alerts");\n    await driver.findElement(By.css("ul > li:nth-child(2) > button")).click();\n    const popup = await driver.switchTo().alert();\n    popup.accept();\n    const result = await driver.findElement(By.id("result")).getText();\n    assert(result == "You clicked: Ok");\n  });\n});\n')),(0,i.kt)("p",null,"A quick glance at the page's markup shows that there are no unique IDs on the buttons. In order to click on the second button (to trigger the JavaScript confirmation dialog) we need a locator which targets the second item in the unordered list."),(0,i.kt)("p",null,"After we click the button to trigger the JavaScript Alert we use Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},"switchTo().alert()")," to focus on the JavaScript pop-up and use ",(0,i.kt)("inlineCode",{parentName:"p"},".accept()")," to click ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok")," (if we wanted to click ",(0,i.kt)("inlineCode",{parentName:"p"},"Cancel")," we would have used ",(0,i.kt)("inlineCode",{parentName:"p"},".dismiss()"),")."),(0,i.kt)("p",null,"After accepting the alert, our main browser window will automatically regain focus and the page will display the result that we chose. This text is what we use for our assertion, making sure that the words ",(0,i.kt)("inlineCode",{parentName:"p"},"You clicked: Ok")," are displayed on the page."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mocha")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Click the second button on the page"),(0,i.kt)("li",{parentName:"ul"},"JavaScript Confirmation Alert appears"),(0,i.kt)("li",{parentName:"ul"},"Accept the JavaScript Confirmation Alert"),(0,i.kt)("li",{parentName:"ul"},"Assert that the result on the page is what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"We've learned how to accept/dismiss Javascript alerts using Selenium Webdriver by locating the alert using Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},"switchTo().alert()"),". After accepting/dismissing the alert, our main browser window will automatically regain focus and the page will display the result."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},64098:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:1,hide_sidebar:!0,publish_date:new Date("2016-11-19T00:00:00.000Z"),last_update:{date:new Date("2023-03-03T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-work-with-javascript-alerts/python",id:"how-to-work-with-javascript-alerts/python",title:"python",description:"A Solution",source:"@site/docs/51-how-to-work-with-javascript-alerts/python.md",sourceDirName:"51-how-to-work-with-javascript-alerts",slug:"/how-to-work-with-javascript-alerts/python",permalink:"/docs/how-to-work-with-javascript-alerts/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/51-how-to-work-with-javascript-alerts/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677801600,formattedLastUpdatedAt:"Mar 3, 2023",frontMatter:{language:"python",level:1,hide_sidebar:!0,publish_date:"2016-11-19T00:00:00.000Z",last_update:{date:"2023-03-03T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Built into Selenium is the ability to switch to an alert window and either accept or dismiss it. This way your tests can continue unencumbered by dialog boxes that may feel just out of reach."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Our example application is available ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/javascript_alerts"},"here")," on ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the-internet"),". It has various JavaScript Alerts available (e.g., an alert, a confirmation, and a prompt). Let's demonstrate testing a confirmation dialog (e.g., a prompt which asks the user to click ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Cancel"),")."),(0,i.kt)("p",null,"First, we'll include our requisite libraries, declare the test class, and wire up some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: javascript_alerts.py\nimport unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\n\nclass JavaScriptAlerts(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n\n    def tearDown(self):\n        self.driver.quit()\n# ...\n")),(0,i.kt)("p",null,"Now let's write our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: javascript_alerts.py\n# ...\n    def test_example_1(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/javascript_alerts')\n        driver.find_element(By.CSS_SELECTOR, \"ul > li:nth-child(1) > button\").click()\n        popup = driver.switch_to.alert\n        popup.accept()\n        result = driver.find_element(By.ID, 'result').text\n        assert result == 'You successfully clicked an alert'\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,i.kt)("p",null,"A quick glance at the page's markup shows that there are no unique IDs on the buttons. So to click on the second button (to trigger the JavaScript confirmation dialog) we find all of the buttons on the page using ",(0,i.kt)("inlineCode",{parentName:"p"},"find_elements")," and click on the second one. Since ",(0,i.kt)("inlineCode",{parentName:"p"},"find_elements")," returns a list of all found elements, we can assume that the first item can be selected using ",(0,i.kt)("inlineCode",{parentName:"p"},"[0]")," (since lists in Python start counting at ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),"). So the second item would be ",(0,i.kt)("inlineCode",{parentName:"p"},"[1]"),"."),(0,i.kt)("p",null,"After click the button to trigger the JavaScript Alert we use Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},"switch_to.alert")," method to focus on the JavaScript pop-up and use ",(0,i.kt)("inlineCode",{parentName:"p"},".accept()")," to click ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok"),". If we wanted to click ",(0,i.kt)("inlineCode",{parentName:"p"},"Cancel")," we would have used ",(0,i.kt)("inlineCode",{parentName:"p"},".dismiss()"),"."),(0,i.kt)("p",null,"After accepting the alert, our main browser window will automatically regain focus and the page will display the result that we chose. This text is what we use for our assertion, making sure that the words ",(0,i.kt)("inlineCode",{parentName:"p"},"You clicked: Ok")," are displayed on the page."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"python javascript_alerts.py")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Click the second button on the page"),(0,i.kt)("li",{parentName:"ul"},"JavaScript Confirmation Alert appears"),(0,i.kt)("li",{parentName:"ul"},"Accept the JavaScript Confirmation Alert"),(0,i.kt)("li",{parentName:"ul"},"Assert that the result on the page is what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"We've learned how to accept/dismiss Javascript alerts using Selenium Webdriver by locating the alert using Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},"switchTo().alert()"),". After accepting/dismissing the alert, our main browser window will automatically regain focus and the page will display the result."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},90500:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:1,hide_sidebar:!0,publish_date:new Date("2015-07-01T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-work-with-javascript-alerts/ruby",id:"how-to-work-with-javascript-alerts/ruby",title:"ruby",description:"A Solution",source:"@site/docs/51-how-to-work-with-javascript-alerts/ruby.md",sourceDirName:"51-how-to-work-with-javascript-alerts",slug:"/how-to-work-with-javascript-alerts/ruby",permalink:"/docs/how-to-work-with-javascript-alerts/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/51-how-to-work-with-javascript-alerts/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"ruby",level:1,hide_sidebar:!0,publish_date:"2015-07-01T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Built into Selenium is the ability to switch to an alert window and either accept or dismiss it. This way your tests can continue unencumbered by dialog boxes that may feel just out of reach."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Our example application is available ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/javascript_alerts"},"here")," on ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the-internet"),". It has various JavaScript Alerts available (e.g., an alert, a confirmation, and a prompt). Let's demonstrate testing a confirmation dialog (e.g., a prompt which asks the user to click ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Cancel"),")."),(0,i.kt)("p",null,"First, we'll include our requisite libraries (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to control the browser and ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers")," for our assertion) and wire up some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: javascript_alerts.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Now let's write our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/javascript_alerts'\n  @driver.find_elements(css: 'button')[1].click\n\n  popup = @driver.switch_to.alert\n  popup.accept\n\n  result = @driver.find_element(id: 'result').text\n  expect(result).to eql('You clicked: Ok')\nend\n")),(0,i.kt)("p",null,"A quick glance at the page's markup shows that there are no unique IDs on the buttons. So to click on the second button (to trigger the JavaScript confirmation dialog) we find all of the buttons on the page using ",(0,i.kt)("inlineCode",{parentName:"p"},"find_elements")," and click on the second one. Since ",(0,i.kt)("inlineCode",{parentName:"p"},"find_elements")," returns an Array of all found elements, we can assume that the first item can be selected using ",(0,i.kt)("inlineCode",{parentName:"p"},"[0]")," (since Arrays in Ruby start counting at ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),"). So the second item would be ",(0,i.kt)("inlineCode",{parentName:"p"},"[1]"),"."),(0,i.kt)("p",null,"After click the button to trigger the JavaScript Alert we use Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},"switch_to.alert")," method to focus on the JavaScript pop-up and use ",(0,i.kt)("inlineCode",{parentName:"p"},".accept")," to click ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok"),". If we wanted to click ",(0,i.kt)("inlineCode",{parentName:"p"},"Cancel")," we would have used ",(0,i.kt)("inlineCode",{parentName:"p"},".dismiss"),"."),(0,i.kt)("p",null,"After accepting the alert, our main browser window will automatically regain focus and the page will display the result that we chose. This text is what we use for our assertion, making sure that the words ",(0,i.kt)("inlineCode",{parentName:"p"},"You clicked: Ok")," are displayed on the page."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby javascript_alerts.rb")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Click the second button on the page"),(0,i.kt)("li",{parentName:"ul"},"JavaScript Confirmation Alert appears"),(0,i.kt)("li",{parentName:"ul"},"Accept the JavaScript Confirmation Alert"),(0,i.kt)("li",{parentName:"ul"},"Assert that the result on the page is what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"We've learned how to accept/dismiss Javascript alerts using Selenium Webdriver by locating the alert using Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},"switchTo().alert()"),". After accepting/dismissing the alert, our main browser window will automatically regain focus and the page will display the result."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},48379:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:2,hide_sidebar:!0,publish_date:new Date("2015-11-11T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"grid/java",id:"grid/java",title:"java",description:"A Solution",source:"@site/docs/52-grid/java.md",sourceDirName:"52-grid",slug:"/grid/java",permalink:"/docs/grid/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/52-grid/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"java",level:2,hide_sidebar:!0,publish_date:"2015-11-11T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Part 1: Grid Setup",id:"part-1-grid-setup",level:3},{value:"Part 2: Test Setup",id:"part-2-test-setup",level:3},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"With ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/grid/"},"Selenium Grid")," you can stand up a simple infrastructure of various browsers on different operating systems to not only distribute test load, but also give you a diversity of browsers to work with."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"A brief primer of Selenium Grid"),(0,i.kt)("p",{parentName:"blockquote"},"Selenium Grid is part of ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/"},"the Selenium project"),". It lets you distribute test execution across several machines. You can connect to it with a remote WebDriver by specifying the browser, browser version, and operating system you want. You specify these values through Selenium ",(0,i.kt)("inlineCode",{parentName:"p"},"Capabilities"),"."),(0,i.kt)("p",{parentName:"blockquote"},'There are two main elements to Selenium Grid -- a Hub, and Nodes. First you need to stand up a Hub. Then you can connect (or "register") Nodes to that Hub.\nNodes are where your tests will run, and the Hub is responsible for making sure your tests end up on the right one (e.g., the machine with the operating\nsystem and browser you specified in your test).')),(0,i.kt)("p",null,"Let's continue with an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("h3",{id:"part-1-grid-setup"},"Part 1: Grid Setup"),(0,i.kt)("p",null,"Selenium Grid comes built into the Selenium Standalone Server. So to get started we'll need to download the latest version of it from the Selenium\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SeleniumHQ/selenium/releases"},"releases"),"."),(0,i.kt)("p",null,"Then we need to start the Hub."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"> java -jar selenium-server-<version>.jar hub\n...\n16:49:29.816 INFO [Hub.execute] - Started Selenium Hub\n...\n")),(0,i.kt)("p",null,"After that we can register Nodes to it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"> java -jar selenium-server-<version>.jar node --hub http://localhost:4444\n...\n16:51:47.726 INFO [NodeServer.execute] - Started Selenium Node\n...\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: This example only demonstrates a single node on the same machine as the hub. To span nodes across multiple machines you will need to place the standalone server on each machine and launch it with the same registration command (replacing ",(0,i.kt)("inlineCode",{parentName:"strong"},"http://localhost")," with the location of your hub, and specifying additional parameters as needed).")),(0,i.kt)("p",null,"Now that the grid is running we can view the available browsers by visiting our Grid's console at ",(0,i.kt)("inlineCode",{parentName:"p"},"http://localhost:4444/grid/console"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Grid Console",src:a(74180).Z,width:"823",height:"565"})),(0,i.kt)("p",null,"To refine the list of available browsers, we can specify an additional ",(0,i.kt)("inlineCode",{parentName:"p"},"--driver-implementation")," parameter when registering the Node.\nFor instance, if we wanted to only offer Safari on a node, we could specify it with ",(0,i.kt)("inlineCode",{parentName:"p"},"--driver-implementation safari"),", which would look\nlike this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"java -jar selenium-server-<version>.jar node --hub http://localhost:4444 --driver-implementation safari\n")),(0,i.kt)("p",null,"We could also repeat this parameter again if we wanted to explicitly specify more than one browser."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"java -jar selenium-server-<version>.jar node --hub http://localhost:4444 --driver-implementation safari --driver-implementation chrome\n")),(0,i.kt)("p",null,"There are numerous parameters that we can use at run time. You can see a full list at the\n",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/grid/configuration/cli_options/"},"Selenium Grid documentation"),"."),(0,i.kt)("h3",{id:"part-2-test-setup"},"Part 2: Test Setup"),(0,i.kt)("p",null,"Now let's wire up a simple test to use our new Grid."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: Grid.java\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.remote.DesiredCapabilities;\nimport org.openqa.selenium.remote.RemoteWebDriver;\nimport java.net.URL;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.hamcrest.MatcherAssert.assertThat;\n\npublic class Grid {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        FirefoxOptions capabilities = new FirefoxOptions();\n        String url = "http://localhost:4444";\n        driver = new RemoteWebDriver(new URL(url), capabilities);\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n\n    @Test\n    public void gridTest() {\n        driver.get("http://the-internet.herokuapp.com/");\n        assertThat(driver.getTitle(), is(equalTo("The Internet")));\n    }\n\n}\n')),(0,i.kt)("p",null,"Notice in this configuration we're using a remote WebDriver in Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"new RemoteWebDriver()"),") to connect to the Grid.\nAnd we are telling the Grid which browser we want to use with the browser options (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"new FirefoxOptions();"),")."),(0,i.kt)("p",null,"You can see a full list of the available browser options at the ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/webdriver/browsers/"},"Selenium documentation"),"."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn clean test")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Connect to the Grid Hub"),(0,i.kt)("li",{parentName:"ul"},"Hub determines which Node has the necessary browser/platform combination"),(0,i.kt)("li",{parentName:"ul"},"Hub connects the test to the Node"),(0,i.kt)("li",{parentName:"ul"},"Browser opens on the Node"),(0,i.kt)("li",{parentName:"ul"},"Test runs"),(0,i.kt)("li",{parentName:"ul"},"Browser closes on the Node")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"If you're looking to set up Selenium Grid to work with Internet Explorer or Chrome, be sure to read up on how to set them up since there is\nadditional configuration required for each. And if you run into issues, be sure to check out the browser driver documentation for the\nbrowser you're working with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://chromedriver.chromium.org/"},"ChromeDriver")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://firefox-source-docs.mozilla.org/testing/geckodriver/Support.html"},"FirefoxDriver")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://developer.apple.com/documentation/webkit/about_webdriver_for_safari"},"SafariDriver"))),(0,i.kt)("p",null,"Also, it's worth noting that while Selenium Grid is a great option for scaling your test infrastructure, it by itself will NOT give you\nparallelization. That is to say, it can handle as many connections as you throw at it (within reason), but you will still need to find a\nway to execute your tests in parallel."),(0,i.kt)("p",null,"Thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/RomanIsko"},"Roman Isko")," for contributing the initial Java code for this tip."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of\ntesting professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International,\nSittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around\nthe world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},7373:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:2,hide_sidebar:!0,publish_date:new Date("2019-08-09T00:00:00.000Z"),last_update:{date:new Date("2023-04-11T00:00:00.000Z")}},o=void 0,l={unversionedId:"grid/javascript",id:"grid/javascript",title:"javascript",description:"A Solution",source:"@site/docs/52-grid/javascript.md",sourceDirName:"52-grid",slug:"/grid/javascript",permalink:"/docs/grid/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/52-grid/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1681171200,formattedLastUpdatedAt:"Apr 11, 2023",frontMatter:{language:"javascript",level:2,hide_sidebar:!0,publish_date:"2019-08-09T00:00:00.000Z",last_update:{date:"2023-04-11T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Part 1: Grid Setup",id:"part-1-grid-setup",level:3},{value:"Part 2: Test Setup",id:"part-2-test-setup",level:3},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"With ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/grid/"},"Selenium Grid")," you can stand up a simple infrastructure of various browsers on different operating systems to not only distribute test load, but also give you a diversity of browsers to work with."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"A brief primer of Selenium Grid"),(0,i.kt)("p",{parentName:"blockquote"},"Selenium Grid is part of ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/"},"the Selenium project"),". It lets you distribute test execution across several machines. You can connect to it with a remote WebDriver by specifying the browser, browser version, and operating system you want. You specify these values through Selenium ",(0,i.kt)("inlineCode",{parentName:"p"},"Capabilities"),"."),(0,i.kt)("p",{parentName:"blockquote"},'There are two main elements to Selenium Grid -- a Hub, and Nodes. First you need to stand up a Hub. Then you can connect (or "register") Nodes to that Hub.\nNodes are where your tests will run, and the Hub is responsible for making sure your tests end up on the right one (e.g., the machine with the operating\nsystem and browser you specified in your test).')),(0,i.kt)("p",null,"Let's continue with an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("h3",{id:"part-1-grid-setup"},"Part 1: Grid Setup"),(0,i.kt)("p",null,"Selenium Grid comes built into the Selenium Standalone Server. So to get started we'll need to download the latest version of it from the Selenium\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SeleniumHQ/selenium/releases"},"releases"),"."),(0,i.kt)("p",null,"Then we need to start the Hub."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"> java -jar selenium-server-<version>.jar hub\n...\n16:49:29.816 INFO [Hub.execute] - Started Selenium Hub\n...\n")),(0,i.kt)("p",null,"After that we can register Nodes to it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"> java -jar selenium-server-<version>.jar node --hub http://localhost:4444\n...\n16:51:47.726 INFO [NodeServer.execute] - Started Selenium Node\n...\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: This example only demonstrates a single node on the same machine as the hub. To span nodes across multiple machines you will need to place the standalone server on each machine and launch it with the same registration command (replacing ",(0,i.kt)("inlineCode",{parentName:"strong"},"http://localhost")," with the location of your hub, and specifying additional parameters as needed).")),(0,i.kt)("p",null,"Now that the grid is running we can view the available browsers by visiting our Grid's console at ",(0,i.kt)("inlineCode",{parentName:"p"},"http://localhost:4444/grid/console"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Grid Console",src:a(74180).Z,width:"823",height:"565"})),(0,i.kt)("p",null,"To refine the list of available browsers, we can specify an additional ",(0,i.kt)("inlineCode",{parentName:"p"},"--driver-implementation")," parameter when registering the Node.\nFor instance, if we wanted to only offer Safari on a node, we could specify it with ",(0,i.kt)("inlineCode",{parentName:"p"},"--driver-implementation safari"),", which would look\nlike this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"java -jar selenium-server-<version>.jar node --hub http://localhost:4444 --driver-implementation safari\n")),(0,i.kt)("p",null,"We could also repeat this parameter again if we wanted to explicitly specify more than one browser."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"java -jar selenium-server-<version>.jar node --hub http://localhost:4444 --driver-implementation safari --driver-implementation chrome\n")),(0,i.kt)("p",null,"There are numerous parameters that we can use at run time. You can see a full list at the\n",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/grid/configuration/cli_options/"},"Selenium Grid documentation"),"."),(0,i.kt)("h3",{id:"part-2-test-setup"},"Part 2: Test Setup"),(0,i.kt)("p",null,"Now let's wire up a simple test script to use our new Grid."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/grid.spec.js\nconst assert = require("assert");\nconst { Builder, By } = require("selenium-webdriver");\n\ndescribe("Grid", function() {\n  let driver;\n\n  beforeEach(async function() {\n    const url = "http://localhost:4444";\n    driver = await new Builder()\n      .usingServer(url)\n      .forBrowser("chrome")\n      .build();\n  });\n\n  afterEach(async function() {\n    await driver.quit();\n  });\n\n  it("hello world", async function() {\n    await driver.get("http://the-internet.herokuapp.com/");\n    assert((await driver.getTitle()) === "The Internet");\n  });\n});\n')),(0,i.kt)("p",null,"Notice in ",(0,i.kt)("inlineCode",{parentName:"p"},"beforeEach")," we're using a URL to connect to the Grid (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"usingServer(url)"),"). And we are telling the Grid which\nbrowser we want to use by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"forBrowser")," method."),(0,i.kt)("p",null,"You can see a full list of the available browser options at the ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/webdriver/browsers/"},"Selenium documentation"),"."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mocha")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Connect to the Grid Hub"),(0,i.kt)("li",{parentName:"ul"},"Hub determines which Node has the necessary browser/platform combination"),(0,i.kt)("li",{parentName:"ul"},"Hub connects the test to the Node"),(0,i.kt)("li",{parentName:"ul"},"Browser opens on the Node"),(0,i.kt)("li",{parentName:"ul"},"Test runs"),(0,i.kt)("li",{parentName:"ul"},"Browser closes on the Node")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"If you're looking to set up Selenium Grid to work with Internet Explorer or Chrome, be sure to read up on how to set them up since there is\nadditional configuration required for each. And if you run into issues, be sure to check out the browser driver documentation for the\nbrowser you're working with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://chromedriver.chromium.org/"},"ChromeDriver")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://firefox-source-docs.mozilla.org/testing/geckodriver/Support.html"},"FirefoxDriver")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://developer.apple.com/documentation/webkit/about_webdriver_for_safari"},"SafariDriver"))),(0,i.kt)("p",null,"Also, it's worth noting that while Selenium Grid is a great option for scaling your test infrastructure, it by itself will NOT give you\nparallelization. That is to say, it can handle as many connections as you throw at it (within reason), but you will still need to find a\nway to execute your tests in parallel."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of\ntesting professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International,\nSittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around\nthe world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},15870:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:2,hide_sidebar:!0,publish_date:new Date("2016-11-17T00:00:00.000Z"),last_update:{date:new Date("2023-02-24T00:00:00.000Z")}},o=void 0,l={unversionedId:"grid/python",id:"grid/python",title:"python",description:"A Solution",source:"@site/docs/52-grid/python.md",sourceDirName:"52-grid",slug:"/grid/python",permalink:"/docs/grid/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/52-grid/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677196800,formattedLastUpdatedAt:"Feb 24, 2023",frontMatter:{language:"python",level:2,hide_sidebar:!0,publish_date:"2016-11-17T00:00:00.000Z",last_update:{date:"2023-02-24T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Part 1: Grid Setup",id:"part-1-grid-setup",level:3},{value:"Part 2: Test Setup",id:"part-2-test-setup",level:3},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"With ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/grid/"},"Selenium Grid")," you can stand up a simple infrastructure of various browsers on different operating systems to not only distribute test load, but also give you a diversity of browsers to work with."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"A brief primer of Selenium Grid"),(0,i.kt)("p",{parentName:"blockquote"},"Selenium Grid is part of ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/"},"the Selenium project"),". It lets you distribute test execution across several machines. You can connect to it with a remote WebDriver by specifying the browser, browser version, and operating system you want. You specify these values through Selenium ",(0,i.kt)("inlineCode",{parentName:"p"},"Capabilities"),"."),(0,i.kt)("p",{parentName:"blockquote"},'There are two main elements to Selenium Grid -- a Hub, and Nodes. First you need to stand up a Hub. Then you can connect (or "register") Nodes to that Hub.\nNodes are where your tests will run, and the Hub is responsible for making sure your tests end up on the right one (e.g., the machine with the operating\nsystem and browser you specified in your test).')),(0,i.kt)("p",null,"Let's continue with an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("h3",{id:"part-1-grid-setup"},"Part 1: Grid Setup"),(0,i.kt)("p",null,"Selenium Grid comes built into the Selenium Standalone Server. So to get started we'll need to download the latest version of it from the Selenium\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SeleniumHQ/selenium/releases"},"releases"),"."),(0,i.kt)("p",null,"Then we need to start the Hub."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"> java -jar selenium-server-<version>.jar hub\n...\n16:49:29.816 INFO [Hub.execute] - Started Selenium Hub\n...\n")),(0,i.kt)("p",null,"After that we can register Nodes to it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"> java -jar selenium-server-<version>.jar node --hub http://localhost:4444\n...\n16:51:47.726 INFO [NodeServer.execute] - Started Selenium Node\n...\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: This example only demonstrates a single node on the same machine as the hub. To span nodes across multiple machines you will need to place the standalone server on each machine and launch it with the same registration command (replacing ",(0,i.kt)("inlineCode",{parentName:"strong"},"http://localhost")," with the location of your hub, and specifying additional parameters as needed).")),(0,i.kt)("p",null,"Now that the grid is running we can view the available browsers by visiting our Grid's console at ",(0,i.kt)("inlineCode",{parentName:"p"},"http://localhost:4444/grid/console"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Grid Console",src:a(74180).Z,width:"823",height:"565"})),(0,i.kt)("p",null,"To refine the list of available browsers, we can specify an additional ",(0,i.kt)("inlineCode",{parentName:"p"},"--driver-implementation")," parameter when registering the Node.\nFor instance, if we wanted to only offer Safari on a node, we could specify it with ",(0,i.kt)("inlineCode",{parentName:"p"},"--driver-implementation safari"),", which would look\nlike this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"java -jar selenium-server-<version>.jar node --hub http://localhost:4444 --driver-implementation safari\n")),(0,i.kt)("p",null,"We could also repeat this parameter again if we wanted to explicitly specify more than one browser."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"java -jar selenium-server-<version>.jar node --hub http://localhost:4444 --driver-implementation safari --driver-implementation chrome\n")),(0,i.kt)("p",null,"There are numerous parameters that we can use at run time. You can see a full list at the\n",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/grid/configuration/cli_options/"},"Selenium Grid documentation"),"."),(0,i.kt)("h3",{id:"part-2-test-setup"},"Part 2: Test Setup"),(0,i.kt)("p",null,"Now let's wire up a simple test script to use our new Grid."),(0,i.kt)("p",null,"First we'll need to pull in our requisite libraries (",(0,i.kt)("inlineCode",{parentName:"p"},"import unittest")," for our test framework and ",(0,i.kt)("inlineCode",{parentName:"p"},"from selenium import webdriver")," to drive the browser), declare our test class, and wire up some test ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: grid.py\nimport unittest\nfrom selenium import webdriver\n\n\nclass Grid(unittest.TestCase):\n\n    def setUp(self):\n        firefox_options = webdriver.FirefoxOptions()\n        self.driver = webdriver.Remote(\n            command_executor='http://localhost:4444/wd/hub',\n            options=firefox_options\n        )\n\n    def tearDown(self):\n        self.driver.quit()\n\n    def test_page_loaded(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com')\n        assert driver.title == 'The Internet'\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,i.kt)("p",null,"Notice in ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," we're using remote WebDriver in Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"webdriver.Remote"),") to connect to the Grid.\nAnd we are telling the Grid which browser we want to use with the browser options (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"firefox_options = webdriver.FirefoxOptions()"),")."),(0,i.kt)("p",null,"You can see a full list of the available browser options at the ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/webdriver/browsers/"},"Selenium documentation"),"."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"python grid.py")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Connect to the Grid Hub"),(0,i.kt)("li",{parentName:"ul"},"Hub determines which Node has the necessary browser/platform combination"),(0,i.kt)("li",{parentName:"ul"},"Hub connects the test to the Node"),(0,i.kt)("li",{parentName:"ul"},"Browser opens on the Node"),(0,i.kt)("li",{parentName:"ul"},"Test runs"),(0,i.kt)("li",{parentName:"ul"},"Browser closes on the Node")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"If you're looking to set up Selenium Grid to work with Internet Explorer or Chrome, be sure to read up on how to set them up since there is\nadditional configuration required for each. And if you run into issues, be sure to check out the browser driver documentation for the\nbrowser you're working with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://chromedriver.chromium.org/"},"ChromeDriver")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://firefox-source-docs.mozilla.org/testing/geckodriver/Support.html"},"FirefoxDriver")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://developer.apple.com/documentation/webkit/about_webdriver_for_safari"},"SafariDriver"))),(0,i.kt)("p",null,"Also, it's worth noting that while Selenium Grid is a great option for scaling your test infrastructure, it by itself will NOT give you\nparallelization. That is to say, it can handle as many connections as you throw at it (within reason), but you will still need to find a\nway to execute your tests in parallel."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of\ntesting professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International,\nSittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around\nthe world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},4679:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:2,hide_sidebar:!0,publish_date:new Date("2015-08-25T00:00:00.000Z"),hide_table_of_contents:!0,last_update:{date:new Date("2023-02-24T00:00:00.000Z")}},o=void 0,l={unversionedId:"grid/ruby",id:"grid/ruby",title:"ruby",description:"A Solution",source:"@site/docs/52-grid/ruby.md",sourceDirName:"52-grid",slug:"/grid/ruby",permalink:"/docs/grid/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/52-grid/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677196800,formattedLastUpdatedAt:"Feb 24, 2023",frontMatter:{language:"ruby",level:2,hide_sidebar:!0,publish_date:"2015-08-25T00:00:00.000Z",hide_table_of_contents:!0,last_update:{date:"2023-02-24T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Part 1: Grid Setup",id:"part-1-grid-setup",level:3},{value:"Part 2: Test Setup",id:"part-2-test-setup",level:3},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"With ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/grid/"},"Selenium Grid")," you can stand up a simple infrastructure of various browsers on different operating systems to not only distribute test load, but also give you a diversity of browsers to work with."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"A brief primer of Selenium Grid"),(0,i.kt)("p",{parentName:"blockquote"},"Selenium Grid is part of ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/"},"the Selenium project"),". It lets you distribute test execution across several machines. You can connect to it with a remote WebDriver by specifying the browser, browser version, and operating system you want. You specify these values through Selenium ",(0,i.kt)("inlineCode",{parentName:"p"},"Capabilities"),"."),(0,i.kt)("p",{parentName:"blockquote"},'There are two main elements to Selenium Grid -- a Hub, and Nodes. First you need to stand up a Hub. Then you can connect (or "register") Nodes to that Hub.\nNodes are where your tests will run, and the Hub is responsible for making sure your tests end up on the right one (e.g., the machine with the operating\nsystem and browser you specified in your test).')),(0,i.kt)("p",null,"Let's continue with an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("h3",{id:"part-1-grid-setup"},"Part 1: Grid Setup"),(0,i.kt)("p",null,"Selenium Grid comes built into the Selenium Standalone Server. So to get started we'll need to download the latest version of it from the Selenium\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SeleniumHQ/selenium/releases"},"releases"),"."),(0,i.kt)("p",null,"Then we need to start the Hub."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"> java -jar selenium-server-<version>.jar hub\n...\n16:49:29.816 INFO [Hub.execute] - Started Selenium Hub\n...\n")),(0,i.kt)("p",null,"After that we can register Nodes to it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"> java -jar selenium-server-<version>.jar node --hub http://localhost:4444\n...\n16:51:47.726 INFO [NodeServer.execute] - Started Selenium Node\n...\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: This example only demonstrates a single node on the same machine as the hub. To span nodes across multiple machines you will need to place the standalone server on each machine and launch it with the same registration command (replacing ",(0,i.kt)("inlineCode",{parentName:"strong"},"http://localhost")," with the location of your hub, and specifying additional parameters as needed).")),(0,i.kt)("p",null,"Now that the grid is running we can view the available browsers by visiting our Grid's console at ",(0,i.kt)("inlineCode",{parentName:"p"},"http://localhost:4444/grid/console"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Grid Console",src:a(74180).Z,width:"823",height:"565"})),(0,i.kt)("p",null,"To refine the list of available browsers, we can specify an additional ",(0,i.kt)("inlineCode",{parentName:"p"},"--driver-implementation")," parameter when registering the Node.\nFor instance, if we wanted to only offer Safari on a node, we could specify it with ",(0,i.kt)("inlineCode",{parentName:"p"},"--driver-implementation safari"),", which would look\nlike this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"java -jar selenium-server-<version>.jar node --hub http://localhost:4444 --driver-implementation safari\n")),(0,i.kt)("p",null,"We could also repeat this parameter again if we wanted to explicitly specify more than one browser."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"java -jar selenium-server-<version>.jar node --hub http://localhost:4444 --driver-implementation safari --driver-implementation chrome\n")),(0,i.kt)("p",null,"There are numerous parameters that we can use at run time. You can see a full list at the\n",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/grid/configuration/cli_options/"},"Selenium Grid documentation"),"."),(0,i.kt)("h3",{id:"part-2-test-setup"},"Part 2: Test Setup"),(0,i.kt)("p",null,"Now let's wire up a simple test script to use our new Grid."),(0,i.kt)("p",null,"First, we'll need to require our necessary libraries (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to connect to the Grid and control the browser,\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers")," for an assertion), wire up some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods,\nand add a simple test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: grid.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  options = Selenium::WebDriver::Options.chrome\n  @driver = Selenium::WebDriver.for :remote, url: 'http://localhost:4444', options: options\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n\nrun do\n  @driver.get 'http://the-internet.herokuapp.com'\n  expect(@driver.title).to eq('The Internet')\nend\n")),(0,i.kt)("p",null,"Notice in this configuration we're using a remote WebDriver in Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"Selenium::WebDriver.for :remote,"),") to connect to the Grid.\nAnd we are telling the Grid which browser we want to use with the browser options (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"options = Selenium::WebDriver::Options.chrome"),")."),(0,i.kt)("p",null,"You can see a full list of the available browser options at the ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/documentation/webdriver/browsers/"},"Selenium documentation"),"."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby grid.rb")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Connect to the Grid Hub"),(0,i.kt)("li",{parentName:"ul"},"Hub determines which Node has the necessary browser/platform combination"),(0,i.kt)("li",{parentName:"ul"},"Hub connects the test to the Node"),(0,i.kt)("li",{parentName:"ul"},"Browser opens on the Node"),(0,i.kt)("li",{parentName:"ul"},"Test runs"),(0,i.kt)("li",{parentName:"ul"},"Browser closes on the Node")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"If you're looking to set up Selenium Grid to work with Internet Explorer or Chrome, be sure to read up on how to set them up since there is\nadditional configuration required for each. And if you run into issues, be sure to check out the browser driver documentation for the\nbrowser you're working with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://chromedriver.chromium.org/"},"ChromeDriver")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://firefox-source-docs.mozilla.org/testing/geckodriver/Support.html"},"FirefoxDriver")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://developer.apple.com/documentation/webkit/about_webdriver_for_safari"},"SafariDriver"))),(0,i.kt)("p",null,"Also, it's worth noting that while Selenium Grid is a great option for scaling your test infrastructure, it by itself will NOT give you\nparallelization. That is to say, it can handle as many connections as you throw at it (within reason), but you will still need to find a\nway to execute your tests in parallel."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of\ntesting professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International,\nSittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around\nthe world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},55618:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:2,hide_sidebar:!0,publish_date:new Date("2016-06-13T00:00:00.000Z"),last_update:{date:new Date("2023-03-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"growl/csharp",id:"growl/csharp",title:"csharp",description:"A Solution",source:"@site/docs/53-growl/csharp.md",sourceDirName:"53-growl",slug:"/growl/csharp",permalink:"/docs/growl/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/53-growl/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680134400,formattedLastUpdatedAt:"Mar 30, 2023",frontMatter:{language:"csharp",level:2,hide_sidebar:!0,publish_date:"2016-06-13T00:00:00.000Z",last_update:{date:"2023-03-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By leveraging something like ",(0,i.kt)("a",{parentName:"p",href:"http://ksylvest.github.io/jquery-growl/"},"jQuery Growl")," you can output non-interactive debugging statements directly to the page you're testing."),(0,i.kt)("p",null,"With Growl way you can see helpful information and more-likely correlate it to the test actions that are being taken. This can a boon for your test runs when coupled with screenshots and/or video recordings of your test runs"),(0,i.kt)("p",null,"Let's step through an example of how to set this up."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"First let's include our requisite classes for our test framework (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"NUnit.Framework"),"), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenQA.Selenium"),", etc.), access to C#'s Thread.Sleep function (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading"),"), and start our class off with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: Growl.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\nusing System.Threading;\n\npublic class Growl\n{\n    IWebDriver Driver;\n    IJavaScriptExecutor JSDriver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n        JSDriver = (IJavaScriptExecutor) Driver;\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Next we'll need to visit the page we want to display notifications on and do some work with JavaScript to load ",(0,i.kt)("a",{parentName:"p",href:"http://jquery.com/"},"jQuery"),", jQuery Growl, and styles for jQuery Growl. After that we can issue commands to jQuery Growl to make notification messages display on the page."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: Growl.cs\n// ...\n    [Test]\n    public void GrowlNotificationExample()\n    {\n        Driver.Navigate().GoToUrl(\"http://the-internet.herokuapp.com\");\n\n        // check for jQuery, add it if it's not on the page\n        JSDriver.ExecuteScript(\"if (!window.jQuery) {\" +\n                               \"var jquery = document.createElement('script'); jquery.type = 'text/javascript';\" +\n                               \"jquery.src = 'https://ajax.googleapis.com/ajax/libs/jquery/2.0.2/jquery.min.js';\" +\n                               \"document.getElementsByTagName('head')[0].appendChild(jquery);\" +\n                               \"}\");\n\n        // add jQuery Growl to the page\n        JSDriver.ExecuteScript(\"$.getScript('http://the-internet.herokuapp.com/js/vendor/jquery.growl.js')\");\n\n        // add jQuery Growl Styles to the page\n        JSDriver.ExecuteScript(\"$('head').append(\\\"<link rel='stylesheet' \" +\n                               \"href='http://the-internet.herokuapp.com/css/jquery.growl.css' \" +\n                               \"type='text/css' />\\\");\");\n\n        // Adding 5 seconds of extra time\n        Thread.Sleep(5000);\n\n        // trigger a plain jQuery Growl notification to display on the page\n        JSDriver.ExecuteScript(\"$.growl({ title: 'GET', message: '/' });\");\n\n        // Adding 5 seconds of extra time to see 'GET' message\n        Thread.Sleep(5000);\n// ...\n")),(0,i.kt)("p",null,"If we wanted to see color-coded notifications we would use one of the following."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: Growl.cs\n// ...\n        JSDriver.ExecuteScript(\"$.growl.error({ title: 'ERROR', message: 'your message goes here' });\");\n        JSDriver.ExecuteScript(\"$.growl.notice({ title: 'Notice', message: 'your notice message goes here' });\");\n        JSDriver.ExecuteScript(\"$.growl.notice({ title: 'Warning!', message: 'your warning message goes here' });\");\n        Thread.Sleep(5000);\n    }\n}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Thread.Sleep(5000);")," is there for demonstration purposes. It will keep the Growl notifications on the page for 5 seconds so they're easier to see. However, if your test fails due to ",(0,i.kt)("inlineCode",{parentName:"p"},"growl"),", you can also use ",(0,i.kt)("inlineCode",{parentName:"p"},"Thread.Sleep(5000);")," to add some more time to your test."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\Growl.sln")," from the command-line) this is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Browser opens"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Make sure jQuery is on the page, add it if it's not"),(0,i.kt)("li",{parentName:"ul"},"Add jQuery Growl and its styles to the page"),(0,i.kt)("li",{parentName:"ul"},"Display a set of notification messages in the top-right corner of the page with jQuery Growl"),(0,i.kt)("li",{parentName:"ul"},"Notification messages disappear after 5 seconds"),(0,i.kt)("li",{parentName:"ul"},"Browser closes")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"In order to use this approach you will need to load jQuery Growl on every page you want to display output to -- which can be a bit of overhead. But if you want rich messaging like this, then that's the price you have to pay (unless you can get your team to add it to the application under test)."),(0,i.kt)("p",null,"I'd like to give a big thanks to Jon Austen (",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/austenjt"},"Twitter"),", ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/djangofan"},"GitHub"),", ",(0,i.kt)("a",{parentName:"p",href:"http://jonausten.info/"},"Blog"),") for giving me the idea to use jQuery Growl with Selenium."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},25501:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:2,hide_sidebar:!0,publish_date:new Date("2015-11-11T00:00:00.000Z"),last_update:{date:new Date("2023-04-03T00:00:00.000Z")}},o=void 0,l={unversionedId:"growl/java",id:"growl/java",title:"java",description:"A Solution",source:"@site/docs/53-growl/java.md",sourceDirName:"53-growl",slug:"/growl/java",permalink:"/docs/growl/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/53-growl/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:168048e4,formattedLastUpdatedAt:"Apr 3, 2023",frontMatter:{language:"java",level:2,hide_sidebar:!0,publish_date:"2015-11-11T00:00:00.000Z",last_update:{date:"2023-04-03T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By leveraging something like ",(0,i.kt)("a",{parentName:"p",href:"http://ksylvest.github.io/jquery-growl/"},"jQuery Growl")," you can output non-interactive debugging statements directly to the page you're testing."),(0,i.kt)("p",null,"With Growl way you can see helpful information and more-likely correlate it to the test actions that are being taken. This can a boon for your test runs when coupled with screenshots and/or video recordings of your test runs"),(0,i.kt)("p",null,"Let's step through an example of how to set this up."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"First let's import our requisite classes (for annotations (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.junit.After"),", etc.), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.openqa.selenium.WebDriver"),", etc.), and matchers for our assertions (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.hamcrest.CoreMatchers"),", etc.)) and start our class with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// filename: Growl.java\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.firefox.FirefoxDriver;\n\npublic class Growl {\n    WebDriver driver;\n    JavascriptExecutor js;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n        js = (JavascriptExecutor) driver;\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Next we'll need to visit the page we want to display notifications on and do some work with JavaScript to load ",(0,i.kt)("a",{parentName:"p",href:"http://jquery.com/"},"jQuery"),", jQuery Growl, and styles for jQuery Growl. After that, we can issue commands to jQuery Growl to make notification messages display on the page."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: Growl.java\n// ...\n    @Test\n    public void growlTest() throws InterruptedException {\n        driver.get("http://the-internet.herokuapp.com/");\n\n        // Check for jQuery on the page, add it if need be\n        js.executeScript("if (!window.jQuery) {" +\n                "var jquery = document.createElement(\'script\'); jquery.type = \'text/javascript\';" +\n                "jquery.src = \'https://ajax.googleapis.com/ajax/libs/jquery/2.0.2/jquery.min.js\';" +\n                "document.getElementsByTagName(\'head\')[0].appendChild(jquery);" +\n                "}");\n\n        // Use jQuery to add jquery-growl to the page\n        js.executeScript("$.getScript(\'http://the-internet.herokuapp.com/js/vendor/jquery.growl.js\')");\n\n        // Use jQuery to add jquery-growl styles to the page\n        js.executeScript("$(\'head\').append(\'<link rel=\\"stylesheet\\" href=\\"http://the-internet.herokuapp.com/css/jquery.growl.css\\" type=\\"text/css\\" />\');");\n\n        Thread.sleep(5000); // Adding 2 seconds of extra time\n\n        // jquery-growl w/ no frills\n        js.executeScript("$.growl({ title: \'GET\', message: \'/\' });");\n\n        Thread.sleep(5000); // Adding 2 seconds of extra time to see \'GET\' message\n// ...\n')),(0,i.kt)("p",null,"And if we wanted to see color-coded notifications, then we could use one of the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// filename: Growl.java\n// ...\n        // jquery-growl w/ colorized output\n        js.executeScript(\"$.growl.error({ title: 'ERROR', message: 'your error message goes here' });\");\n        js.executeScript(\"$.growl.notice({ title: 'Notice', message: 'your notice message goes here' });\");\n        js.executeScript(\"$.growl.warning({ title: 'Warning!', message: 'your warning message goes here' });\");\n        Thread.sleep(5000);\n    }\n\n}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Thread.Sleep(5000);")," is there for demonstration purposes. It will keep the Growl notifications on the page for 5 seconds so they're easier to see. However, if your test fails due to ",(0,i.kt)("inlineCode",{parentName:"p"},"growl"),", you can also use ",(0,i.kt)("inlineCode",{parentName:"p"},"Thread.Sleep(5000);")," to add some more time to your test."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn clean test")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Browser opens"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Make sure jQuery is on the page, add it if it's not"),(0,i.kt)("li",{parentName:"ul"},"Add jQuery Growl to the page"),(0,i.kt)("li",{parentName:"ul"},"Display a set of notification messages in the top-right corner of the page with jQuery Growl"),(0,i.kt)("li",{parentName:"ul"},"Notification messages disappear after 5 seconds"),(0,i.kt)("li",{parentName:"ul"},"Browser closes")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"In order to use this approach, you will need to load jQuery Growl on every page you want to display output to -- which can be a bit of overhead. But if you want rich messaging like this, then that's the price you have to pay (unless you can get your team to add it to the application under test)."),(0,i.kt)("p",null,"I'd like to give a big thanks to Jon Austen (",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/austenjt"},"Twitter"),", ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/djangofan"},"GitHub"),", ",(0,i.kt)("a",{parentName:"p",href:"http://jonausten.info/"},"Blog"),") for giving me the idea to use jQuery Growl with Selenium and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/RomanIsko"},"Roman Isko")," for contributing the code to port this tip to Java. Want me to cover more tips in Java or other programming languages? Send me a pull request for an existing tip and I will! All code examples are open source and available ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/elemental-selenium-tips"},"here"),"."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},66522:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:2,hide_sidebar:!0,publish_date:new Date("2019-08-09T00:00:00.000Z"),last_update:{date:new Date("2023-03-28T00:00:00.000Z")}},o=void 0,l={unversionedId:"growl/javascript",id:"growl/javascript",title:"javascript",description:"A Solution",source:"@site/docs/53-growl/javascript.md",sourceDirName:"53-growl",slug:"/growl/javascript",permalink:"/docs/growl/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/53-growl/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1679961600,formattedLastUpdatedAt:"Mar 28, 2023",frontMatter:{language:"javascript",level:2,hide_sidebar:!0,publish_date:"2019-08-09T00:00:00.000Z",last_update:{date:"2023-03-28T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About the Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By leveraging something like ",(0,i.kt)("a",{parentName:"p",href:"http://ksylvest.github.io/jquery-growl/"},"jQuery Growl")," you can output non-interactive debugging statements directly to the page you're testing."),(0,i.kt)("p",null,"With Growl way you can see helpful information and more-likely correlate it to the test actions that are being taken. This can a boon for your test runs when coupled with screenshots and/or video recordings of your test runs"),(0,i.kt)("p",null,"Let's step through an example of how to set this up."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"First we'll need to pull in our requisite libraries, declare our test suite, and wire up some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/growl.spec.js\nconst assert = require("assert");\nconst { Builder, By, Key } = require("selenium-webdriver");\n\ndescribe("Growl", function() {\n  let driver;\n\n  beforeEach(async function() {\n    driver = await new Builder().forBrowser("firefox").build();\n  });\n\n  afterEach(async function() {\n    await driver.quit();\n  });\n// ...\n')),(0,i.kt)("p",null,"Now for our test. We'll need to visit the page we want to display notifications on and do some work with JavaScript to load ",(0,i.kt)("a",{parentName:"p",href:"http://jquery.com/"},"jQuery"),", jQuery Growl, and styles for jQuery Growl. After that we can issue commands to jQuery Growl to make notification messages display on the page."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// filename: test/growl.spec.js\n// ...\n  it(\"runs and shows growl debugging output\", async function() {\n    await driver.get(\"http://the-internet.herokuapp.com\");\n\n    // check for jQuery on the page, add it if needed\n    await driver.executeScript(\n      `if (!window.jQuery) { var jquery = document.createElement('script'); jquery.type = 'text/javascript'; jquery.src = 'https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js'; document.getElementsByTagName('head')[0].appendChild(jquery);}`\n    );\n\n    // use jQuery to add jquery-growl to the page\n    await driver.executeScript(\n      \"$.getScript('http://the-internet.herokuapp.com/js/vendor/jquery.growl.js');\"\n    );\n\n    // use jQuery to add jquery-growl styles to the page\n    await driver.executeScript(\n      `$('head').append(\"<link rel=stylesheet href=http://the-internet.herokuapp.com/css/jquery.growl.css type=text/css />\");`\n    );\n\n    await driver.sleep(1000);\n\n    await driver.executeScript(\"$.growl({ title: 'GET', message: '/' });\");\n\n    await driver.sleep(3000);\n  });\n});\n")),(0,i.kt)("p",null,"In addition to loading the scripts and styles, we also need to have Selenium work at the right pace for our needs. So we add a slight delay (e.g., 1 second) before the call to jquery-growl to make sure it will be available. After that, we add a slightly longer delay (e.g., 3 seconds) so the rendered growl notification stays on the page long enough for viewing."),(0,i.kt)("p",null,"If we wanted to see color-coded notifications, then we could use one of the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// filename: test/growl.spec.js\n// ...\n  it(\"runs and shows growl debugging output\", async function() {\n    // ...\n    await driver.executeScript(\n      \"$.growl.error({ title: 'ERROR', message: 'your error message goes here' });\"\n    );\n    await driver.executeScript(\n      \"$.growl.notice({ title: 'Notice', message: 'your notice message goes here' });\"\n    );\n    await driver.executeScript(\n      \"$.growl.warning({ title: 'Warning!', message: 'your warning message goes here' });\"\n    );\n\n    await driver.sleep(3000);\n  });\n});\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mocha"),") here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Browser opens"),(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Add jQuery, jQuery Growl, and jQuery Growl notifications to the page"),(0,i.kt)("li",{parentName:"ul"},"Display a set of notification messages in the top-right corner of the page"),(0,i.kt)("li",{parentName:"ul"},"Notification messages disappear"),(0,i.kt)("li",{parentName:"ul"},"Browser closes")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"In order to use this approach, you will need to load jQuery Growl on every page you want to display output to -- which can be a bit of overhead. But if you want rich messaging like this then that's the price you have to pay (unless you can get your team to add it to the application under test)."),(0,i.kt)("p",null,"I'd like to give a big thanks to Jon Austen (",(0,i.kt)("a",{parentName:"p",href:"https://github.com/djangofan"},"GitHub"),") for giving me the idea to use jQuery Growl with Selenium."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About the Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},50701:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:2,hide_sidebar:!0,publish_date:new Date("2016-11-22T00:00:00.000Z"),last_update:{date:new Date("2023-03-03T00:00:00.000Z")}},o=void 0,l={unversionedId:"growl/python",id:"growl/python",title:"python",description:"A Solution",source:"@site/docs/53-growl/python.md",sourceDirName:"53-growl",slug:"/growl/python",permalink:"/docs/growl/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/53-growl/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677801600,formattedLastUpdatedAt:"Mar 3, 2023",frontMatter:{language:"python",level:2,hide_sidebar:!0,publish_date:"2016-11-22T00:00:00.000Z",last_update:{date:"2023-03-03T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By leveraging something like ",(0,i.kt)("a",{parentName:"p",href:"http://ksylvest.github.io/jquery-growl/"},"jQuery Growl")," you can output non-interactive debugging statements directly to the page you're testing."),(0,i.kt)("p",null,"With Growl way you can see helpful information and more-likely correlate it to the test actions that are being taken. This can a boon for your test runs when coupled with screenshots and/or video recordings of your test runs"),(0,i.kt)("p",null,"Let's step through an example of how to set this up."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"First we'll need to pull in our requisite libraries (",(0,i.kt)("inlineCode",{parentName:"p"},"import unittest")," for our test framework, ",(0,i.kt)("inlineCode",{parentName:"p"},"from selenium import webdriver")," to drive the browser, and ",(0,i.kt)("inlineCode",{parentName:"p"},"import time")," to add a delay in our script so we're able to see the notification messages), declare our test class, and wire up some test ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: growl.py\nimport unittest\nfrom selenium import webdriver\nimport time\n\n\nclass Growl(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n\n    def tearDown(self):\n        self.driver.quit()\n\n# ...\n")),(0,i.kt)("p",null,"Now for our test. We'll need to visit the page we want to display notifications on and do some work with JavaScript to load ",(0,i.kt)("a",{parentName:"p",href:"http://jquery.com/"},"jQuery"),", jQuery Growl, and styles for jQuery Growl. After that we can issue commands to jQuery Growl to make notification messages display on the page."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# filename: growl.py\n# ...\n    def test_example_1(self):\n        driver = self.driver\n        driver.get(\'http://the-internet.herokuapp.com\')\n\n        # Check for jQuery on the page, add it if needbe\n        driver.execute_script(\n            "if (!window.jQuery) {"\n            "var jquery = document.createElement(\'script\');"\n            "jquery.type = \'text/javascript\';"\n            "jquery.src = \'https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js\';"\n            "document.getElementsByTagName(\'head\')[0].appendChild(jquery);}")\n\n        # Use jQuery to add jquery-growl to the page\n        driver.execute_script("$.getScript(\'http://the-internet.herokuapp.com/js/vendor/jquery.growl.js\')")\n\n        # Use jQuery to add jquery-growl styles to the page\n        driver.execute_script(\n            "$(\'head\').append(\'"\n            "<link rel=stylesheet "\n            "href=http://the-internet.herokuapp.com/css/jquery.growl.css "\n            "type=text/css />\');")\n\n        time.sleep(5)\n\n        # jquery-growl w/ no frills\n        driver.execute_script("$.growl({ title: \'GET\', message: \'/\' });")\n\n        time.sleep(5)\n\nif __name__ == "__main__":\n    unittest.main()\n')),(0,i.kt)("p",null,"And if we wanted to see color-coded notifications, then we could use one of the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"        driver.execute_script(\"$.growl.error({ title: 'ERROR', message: 'your error message goes here' });\")\n        driver.execute_script(\"$.growl.notice({ title: 'Notice', message: 'your notice message goes here' });\")\n        driver.execute_script(\"$.growl.warning({ title: 'Warning!', message: 'your warning message goes here' });\")\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"python growl.py"),") here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Browser opens"),(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Add jQuery, jQuery Growl, and jQuery Growl notifications to the page"),(0,i.kt)("li",{parentName:"ul"},"Display a set of notification messages in the top-right corner of the page"),(0,i.kt)("li",{parentName:"ul"},"Notification messages disappear"),(0,i.kt)("li",{parentName:"ul"},"Browser closes")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"In order to use this approach, you will need to load jQuery Growl on every page you want to display output to -- which can be a bit of overhead. But if you want rich messaging like this then that's the price you have to pay (unless you can get your team to add it to the application under test)."),(0,i.kt)("p",null,"I'd like to give a big thanks to Jon Austen (",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/austenjt"},"Twitter"),", ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/djangofan"},"GitHub"),") for giving me the idea to use jQuery Growl with Selenium."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},34900:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:2,hide_sidebar:!0,publish_date:new Date("2014-06-03T00:00:00.000Z"),last_update:{date:new Date("2023-03-25T00:00:00.000Z")}},o=void 0,l={unversionedId:"growl/ruby",id:"growl/ruby",title:"ruby",description:"A Solution",source:"@site/docs/53-growl/ruby.md",sourceDirName:"53-growl",slug:"/growl/ruby",permalink:"/docs/growl/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/53-growl/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1679702400,formattedLastUpdatedAt:"Mar 25, 2023",frontMatter:{language:"ruby",level:2,hide_sidebar:!0,publish_date:"2014-06-03T00:00:00.000Z",last_update:{date:"2023-03-25T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By leveraging something like ",(0,i.kt)("a",{parentName:"p",href:"http://ksylvest.github.io/jquery-growl/"},"jQuery Growl")," you can output non-interactive debugging statements directly to the page you're testing."),(0,i.kt)("p",null,"With Growl way you can see helpful information and more-likely correlate it to the test actions that are being taken. This can a boon for your test runs when coupled with screenshots and/or video recordings of your test runs"),(0,i.kt)("p",null,"Let's step through an example of how to set this up."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"First, we'll include our requisite libraries and wire up some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: growl.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Now for our test. We'll need to visit the page we want to display notifications on and do some work with JavaScript to load ",(0,i.kt)("a",{parentName:"p",href:"http://jquery.com/"},"jQuery"),", jQuery Growl, and styles for jQuery Growl. After that we can issue commands to jQuery Growl to make notification messages display on the page."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com'\n\n  # Step 1: check for jQuery on the page, add it if needbe\n  @driver.execute_script(\n    \"if (!window.jQuery) {\n    var jquery = document.createElement('script');\n    jquery.type = 'text/javascript';\n    jquery.src = 'https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js';\n    document.getElementsByTagName('head')[0].appendChild(jquery);\n    }\")\n\n  # Step 2: use jQuery to add jquery-growl to the page\n  @driver.execute_script(\"$.getScript('http://the-internet.herokuapp.com/js/vendor/jquery.growl.js')\")\n\n  # Step 3: use jQuery to add jquery-growl styles to the page\n  @driver.execute_script(\"$('head').append('<link rel=\\\"stylesheet\\\" href=\\\"http://the-internet.herokuapp.com/css/jquery.growl.css\\\" type=\\\"text/css\\\" />');\")\n\n  sleep 5 # adding 5 seconds sleep\n\n  # Step 4: display a message with jquery-growl\n  @driver.execute_script(\"$.growl({ title: 'GET', message: '/' });\")\n\n  sleep 5 # to keep the browser active long enough to see the notifications\nend\n")),(0,i.kt)("p",null,"And if we wanted to see color-coded notifications, then we could use one of the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"  @driver.execute_script(\"$.growl.error({ title: 'ERROR', message: 'your error message goes here' });\")\n  @driver.execute_script(\"$.growl.notice({ title: 'Notice', message: 'your notice message goes here' });\")\n  @driver.execute_script(\"$.growl.warning({ title: 'Warning!', message: 'your warning message goes here' });\")\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Browser opens"),(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Add jQuery, jQuery Growl, and jQuery Growl notifications to the page"),(0,i.kt)("li",{parentName:"ul"},"Display a set of notification messages in the top-right corner of the page"),(0,i.kt)("li",{parentName:"ul"},"Notification messages disappear"),(0,i.kt)("li",{parentName:"ul"},"Browser closes")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"In order to use this approach, you will need to load jQuery Growl on every page you want to display output to -- which can be a bit of overhead. But if you want rich messaging like this then that's the price you have to pay (unless you can get your team to add it to the application under test)."),(0,i.kt)("p",null,"In a future tip I'll step through how to access Selenium logging output so we can wire it up to these notifications."),(0,i.kt)("p",null,"I'd like to give a big thanks to Jon Austen (",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/austenjt"},"Twitter"),", ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/djangofan"},"GitHub"),") for giving me the idea to use jQuery Growl with Selenium."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},19911:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"wrapper/csharp",id:"wrapper/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/55-wrapper/csharp.md",sourceDirName:"55-wrapper",slug:"/wrapper/csharp",permalink:"/docs/wrapper/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/55-wrapper/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},91695:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"wrapper/java",id:"wrapper/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/55-wrapper/java.md",sourceDirName:"55-wrapper",slug:"/wrapper/java",permalink:"/docs/wrapper/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/55-wrapper/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},48158:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"wrapper/javascript",id:"wrapper/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/55-wrapper/javascript.md",sourceDirName:"55-wrapper",slug:"/wrapper/javascript",permalink:"/docs/wrapper/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/55-wrapper/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},62825:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"wrapper/python",id:"wrapper/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/55-wrapper/python.md",sourceDirName:"55-wrapper",slug:"/wrapper/python",permalink:"/docs/wrapper/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/55-wrapper/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},8514:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:2,hide_sidebar:!0,publish_date:new Date("2014-06-17T00:00:00.000Z"),last_update:{date:new Date("2023-03-06T00:00:00.000Z")}},o=void 0,l={unversionedId:"wrapper/ruby",id:"wrapper/ruby",title:"ruby",description:"A Solution",source:"@site/docs/55-wrapper/ruby.md",sourceDirName:"55-wrapper",slug:"/wrapper/ruby",permalink:"/docs/wrapper/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/55-wrapper/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1678060800,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{language:"ruby",level:2,hide_sidebar:!0,publish_date:"2014-06-17T00:00:00.000Z",last_update:{date:"2023-03-06T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Instead of hard-coding logging requests all over the place, we can leverage an event listener to give us the information we want -- automatically and for each Selenium action."),(0,i.kt)("p",null,"This functionality is built in to Selenium in what's called the ",(0,i.kt)("a",{parentName:"p",href:"https://code.google.com/p/selenium/source/browse/rb/lib/selenium/webdriver/support/abstract_event_listener.rb"},"AbstractEventListener"),". This is a class which comes preloaded with helper methods that enable us to add behavior before and after common Selenium actions -- here's a list of the available methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"before_navigate_to")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"after_navigate_to")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"before_navigate_back")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"after_navigate_back")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"before_navigate_forward")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"after_navigate_forward")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"before_find")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"after_find")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"before_click")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"after_click")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"before_change_value_of")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"after_change_value_of")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"before_execute_script")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"after_execute_script")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"before_quit")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"after_quit")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"before_close")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"after_close"))),(0,i.kt)("p",null,"We can pick and choose from each of these methods and specify the additional behavior we want to occur. After that, it's just a simple matter of passing this information to Selenium when creating a browser instance."),(0,i.kt)("p",null,"Here is an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"To start, let's create a ",(0,i.kt)("inlineCode",{parentName:"p"},"Wrapper")," class that inherits from ",(0,i.kt)("inlineCode",{parentName:"p"},"AbstractEventListener")," and add our behavior there."),(0,i.kt)("p",null,"The helper methods we're interested in are ",(0,i.kt)("inlineCode",{parentName:"p"},"after_navigate_to"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"before_find"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"after_find"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"before_click"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"after_click")," and they each require different arguments to be specified. See ",(0,i.kt)("a",{parentName:"p",href:"https://code.google.com/p/selenium/source/browse/rb/lib/selenium/webdriver/support/abstract_event_listener.rb#30"},"here")," for details."),(0,i.kt)("p",null,"And to make things interesting, let's wire up jQuery Growl notifications."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'# filename: wrapper.rb\n\nclass Wrapper < Selenium::WebDriver::Support::AbstractEventListener\n\n  def after_navigate_to(url, driver)\n    add_growl(driver)\n    display_growl(driver, "Navigated to #{url}")\n  end\n\n  def before_find(by, what, driver)\n    display_growl(driver, "Finding element #{what}")\n  end\n\n  def after_find(by, what, driver)\n    display_growl(driver, "Found element #{what}")\n  end\n\n  def before_click(element, driver)\n    display_growl(driver, "Clicking on #{element.text}")\n    @pre_click_url = driver.current_url\n  end\n\n  def after_click(element, driver)\n    unless @pre_click_url == driver.current_url\n      add_growl(driver)\n      display_growl(driver, "URL changed to #{driver.current_url}")\n    end\n  end\n\n  private\n\n  def add_growl(driver)\n     driver.execute_script("if (!window.jQuery) {\n        var jquery = document.createElement(\'script\'); jquery.type = \'text/javascript\';\n        jquery.src = \'https://ajax.googleapis.com/ajax/libs/jquery/2.0.2/jquery.min.js\';\n        document.getElementsByTagName(\'head\')[0].appendChild(jquery);\n      }")\n\n    driver.execute_script("$.getScript(\'http://the-internet.herokuapp.com/js/vendor/jquery.growl.js\')")\n\n    driver.execute_script("$(\'head\').append(\'<link rel=\\"stylesheet\\" href=\\"http://the-internet.herokuapp.com/css/jquery.growl.css\\" type=\\"text/css\\" />\');")\n\n    sleep 1\n  end\n\n  def display_growl(driver, message)\n    driver.execute_script("$.growl({ title: \'Selenium\', message: \'#{message}\' });")\n    sleep 0.5\n  end\n\nend\n')),(0,i.kt)("p",null,"Our Event Listener helper methods give us access to the driver object at the precise moments we want in our test steps, and by wiring up growl notifications (see ",(0,i.kt)("inlineCode",{parentName:"p"},"add_growl")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"display_growl"),") we can now display notification messages in the browser window automatically without any additional work in our test code."),(0,i.kt)("p",null,"Let's go ahead and wire up our test code to use this new wrapper."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: wrapper_test.rb\n\nrequire 'selenium-webdriver'\nrequire_relative 'wrapper'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox, listener: Wrapper.new\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n\nrun do\n  @driver.get 'http://the-internet.herokuapp.com'\n  @driver.find_elements(css: 'a').last.click\nend\n")),(0,i.kt)("p",null,"Everything here is pretty standard with the exception of two small changes to handle our wrapper. We first need to include the file (",(0,i.kt)("inlineCode",{parentName:"p"},"require_relative 'wrapper'"),") and then pass in an instance of the wrapper to Selenium (",(0,i.kt)("inlineCode",{parentName:"p"},"listener: Wrapper.new"),")."),(0,i.kt)("p",null,"Now if we run our test (",(0,i.kt)("inlineCode",{parentName:"p"},"ruby wrapper_test.rb"),") then we will see notification messages appear around each of the test actions as they occur."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Load the browser"),(0,i.kt)("li",{parentName:"ul"},"Load jQuery if it's not already loaded"),(0,i.kt)("li",{parentName:"ul"},"Load jQuery Growl and it's styles"),(0,i.kt)("li",{parentName:"ul"},"Display notifications in the browser window for each of the test actions")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"To see a video demo of this test, ",(0,i.kt)("a",{parentName:"p",href:"https://vimeo.com/98736887"},"click here"),"."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},3826:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"junit-xml/csharp",id:"junit-xml/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/57-junit-xml/csharp.md",sourceDirName:"57-junit-xml",slug:"/junit-xml/csharp",permalink:"/docs/junit-xml/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/57-junit-xml/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},78380:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"junit-xml/java",id:"junit-xml/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/57-junit-xml/java.md",sourceDirName:"57-junit-xml",slug:"/junit-xml/java",permalink:"/docs/junit-xml/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/57-junit-xml/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},63171:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"junit-xml/javascript",id:"junit-xml/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/57-junit-xml/javascript.md",sourceDirName:"57-junit-xml",slug:"/junit-xml/javascript",permalink:"/docs/junit-xml/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/57-junit-xml/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},29573:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"junit-xml/python",id:"junit-xml/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/57-junit-xml/python.md",sourceDirName:"57-junit-xml",slug:"/junit-xml/python",permalink:"/docs/junit-xml/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/57-junit-xml/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},79019:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:1,hide_sidebar:!0,publish_date:new Date("2015-07-14T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"junit-xml/ruby",id:"junit-xml/ruby",title:"ruby",description:"A Solution",source:"@site/docs/57-junit-xml/ruby.md",sourceDirName:"57-junit-xml",slug:"/junit-xml/ruby",permalink:"/docs/junit-xml/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/57-junit-xml/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"ruby",level:1,hide_sidebar:!0,publish_date:"2015-07-14T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"CI servers work with a standardized report format called JUnit XML which is a standard offering across testing frameworks. If it's not something available off the shelf for your framework, odds are there's a plug-in to enable it."),(0,i.kt)("p",null,"The report will include test results (e.g., failure messages and stack traces) and test metrics (e.g., start time, end time, number of tests, etc.). Your CI server (once configured to do so) will consume this report after each test run and tell you when things pass and fail. It will also offer trend data over time to help determine the stability of your test suite."),(0,i.kt)("p",null,"Let's go through an example of how to configure a test suite in order to output a JUnit XML report."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"In ",(0,i.kt)("a",{parentName:"p",href:"http://rspec.info/"},"RSpec"),", you need a plugin to configure JUnit XML output. There are two popular ones:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/natritmeyer/yarjuf"},"yarjuf (Yet Another RSpec JUnit Formatter)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/sj26/rspec_junit_formatter"},"RSpec JUnit Formatter"))),(0,i.kt)("p",null,"Let's step through how to use the latter of the two."),(0,i.kt)("p",null,"After installing RSpec JUnit Formatter we need to specify two new parameters at run-time: a formatter, and an output file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"rspec --format RspecJunitFormatter  --out result.xml\n")),(0,i.kt)("p",null,"Running tests with these parameters will format the test results into JUnit XML and pipe them into a ",(0,i.kt)("inlineCode",{parentName:"p"},"result.xml")," file (and overwrite it on subsequent runs)."),(0,i.kt)("p",null,"If we didn't want to type these parameters out every time we could place them into an RSpec command helper file (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},".rspec"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: .rspec\n\n--format RspecJunitFormatter\n--out result.xml\n")),(0,i.kt)("p",null,"If we want to run our tests in parallel (using something like ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/grosser/parallel_tests"},"parallel_tests"),"), then we will want to generate a uniquely named result file for each parallel process (otherwise concurrent test runs will overwrite the same file rendering the results effectively useless). To do that we can use interpolation thanks to ",(0,i.kt)("a",{parentName:"p",href:"http://www.stuartellis.eu/articles/erb/"},"ERB")," and an environment variable made available by parallel_tests."),(0,i.kt)("p",null,"Thankfully parallel_tests has a RSpec command helper file as well (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},".parallel_rspec"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: .parallel_rspec\n\n--format RspecJunitFormatter\n--out result<%= ENV['TEST_ENV_NUMBER'] %>.xml\n")),(0,i.kt)("p",null,"Now with numerous tests being run through ",(0,i.kt)("inlineCode",{parentName:"p"},"parallel_tests")," the final result will be a series of JUnit XML files (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"result1.xml"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"result2.xml"),", etc.)."),(0,i.kt)("p",null,"And if we didn't want this to run all of the time (like if we only wanted JUnit XML output to get generated when running our tests on a CI server) then we can add a conditional to our ",(0,i.kt)("inlineCode",{parentName:"p"},".parallel_rspec")," file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: .parallel_rspec\n\n<% if ENV['CI'] %>\n--format RspecJunitFormatter\n--out results/result<%= ENV['TEST_ENV_NUMBER'] %>.xml\n<% end %>\n")),(0,i.kt)("p",null,"Now all we need to do is specify an environment variable at run time in order to trigger JUnit XML output (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"CI=on parallel_rspec"),")."),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Now you're ready to plug your Selenium tests into a CI Server and let them report the results."),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},74924:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"tagging/csharp",id:"tagging/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/58-tagging/csharp.md",sourceDirName:"58-tagging",slug:"/tagging/csharp",permalink:"/docs/tagging/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/58-tagging/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},48275:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"tagging/java",id:"tagging/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/58-tagging/java.md",sourceDirName:"58-tagging",slug:"/tagging/java",permalink:"/docs/tagging/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/58-tagging/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},64717:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"tagging/javascript",id:"tagging/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/58-tagging/javascript.md",sourceDirName:"58-tagging",slug:"/tagging/javascript",permalink:"/docs/tagging/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/58-tagging/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},92348:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"tagging/python",id:"tagging/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/58-tagging/python.md",sourceDirName:"58-tagging",slug:"/tagging/python",permalink:"/docs/tagging/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/58-tagging/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},23443:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:1,hide_sidebar:!0,publish_date:new Date("2014-07-09T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o="How to Filter Test Results with Tags",l={unversionedId:"tagging/ruby",id:"tagging/ruby",title:"How to Filter Test Results with Tags",description:"Intro",source:"@site/docs/58-tagging/ruby.md",sourceDirName:"58-tagging",slug:"/tagging/ruby",permalink:"/docs/tagging/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/58-tagging/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"ruby",level:1,hide_sidebar:!0,publish_date:"2014-07-09T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"Intro",id:"intro",level:2},{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"how-to-filter-test-results-with-tags"},"How to Filter Test Results with Tags"),(0,i.kt)("h2",{id:"intro"},"Intro"),(0,i.kt)("p",null,"As your test suite grows you'll likely employ some kind of folder structure to help make sense of everything -- grouping similar tests together. But what do you do when you want to run a set of tests that span across your organizational structure? Especially when your organizational structure isn't set in stone?"),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By applying some metadata to your tests, you can specify a filter at runtime to execute a focused group of tests, returning just the ones you want."),(0,i.kt)("p",null,"Here are some tagging ideas to help get you started:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"wip")," (e.g., work in progress)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"smoke")," (e.g., smoke tests)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"moneymakers")," (e.g., the user paths that correlate to the bottom line of the business)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"component name")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"story number")," (e.g., traceability to your development stories)")),(0,i.kt)("p",null,"Let's start with an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"In RSpec, this metadata and filtered execution is referred to as ",(0,i.kt)("a",{parentName:"p",href:"https://www.relishapp.com/rspec/rspec-core/v/2-4/docs/command-line/tag-option"},"tags")," (or tagging)."),(0,i.kt)("p",null,"A tag is a simple key/value pair that can be specified within any test file. Alternatively, you can specify just a key (as a symbol) for the tag."),(0,i.kt)("p",null,"Here is an example spec file with a ",(0,i.kt)("inlineCode",{parentName:"p"},":smoke")," tag applied to the entire file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: spec/example_spec.rb\n\nrequire 'selenium-webdriver'\n\ndescribe 'Login', :smoke do\n\n  before(:each) do\n    @driver = Selenium::WebDriver.for :firefox\n  end\n\n  after(:each) do\n    @driver.quit\n  end\n\n  it 'succeeded' do\n    # test code goes here\n  end\n\n  it 'failed' do\n    # test code goes here\n  end\n\nend\n")),(0,i.kt)("p",null,"To run this, you would specify ",(0,i.kt)("inlineCode",{parentName:"p"},"--tag")," and the tag name (without the ",(0,i.kt)("inlineCode",{parentName:"p"},":"),") as a runtime parameter, like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"rspec --tag smoke\n")),(0,i.kt)("p",null,"Alternatively, you can ignore tags with a ",(0,i.kt)("inlineCode",{parentName:"p"},"~")," prepended to the tag name."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"rspec --tag ~smoke\n")),(0,i.kt)("p",null,"You can also tag each individual test and specify multiple tags at run time."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: spec/example_spec.rb\n\nrequire 'selenium-webdriver'\n\ndescribe 'Login' do\n\n  before(:each) do\n    @driver = Selenium::WebDriver.for :firefox\n  end\n\n  after(:each) do\n    @driver.quit\n  end\n\n  it 'succeeded', :smoke do\n    # test code goes here\n  end\n\n  it 'failed', :wip do\n    # test code goes here\n  end\n\nend\n")),(0,i.kt)("p",null,"To run just the smoke tag and negate the wip tag, you would do the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"rspec --tag smoke --tag ~wip\n")),(0,i.kt)("p",null,"Please note that if you're running RSpec 2 or earlier, the following config is required:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'rspec'\nRSpec.configure { |c| c.treat_symbols_as_metadata_keys_with_true_values = true }\n")),(0,i.kt)("p",null,"Otherwise, you'll have to specify tags using the standard key/value syntax (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},":smoke")," would be ",(0,i.kt)("inlineCode",{parentName:"p"},"smoke: true"),")."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Run the test suite"),(0,i.kt)("li",{parentName:"ul"},"The test suite identifies which tests to run based on the tags provided"),(0,i.kt)("li",{parentName:"ul"},"Executes the filtered set of tests, ignoring the rest")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"By utilizing metadata tags and filtering a set of tests, you have learned to effectively create a dynamic test suite that takes into account all of your tests."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},78783:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"list-tags/csharp",id:"list-tags/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/60-list-tags/csharp.md",sourceDirName:"60-list-tags",slug:"/list-tags/csharp",permalink:"/docs/list-tags/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/60-list-tags/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},9523:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"list-tags/java",id:"list-tags/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/60-list-tags/java.md",sourceDirName:"60-list-tags",slug:"/list-tags/java",permalink:"/docs/list-tags/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/60-list-tags/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},84747:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2023-05-26T00:00:00.000Z"),last_update:{date:new Date("2023-05-26T00:00:00.000Z")}},o=void 0,l={unversionedId:"list-tags/javascript",id:"list-tags/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/60-list-tags/javascript.md",sourceDirName:"60-list-tags",slug:"/list-tags/javascript",permalink:"/docs/list-tags/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/60-list-tags/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1685059200,formattedLastUpdatedAt:"May 26, 2023",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2023-05-26T00:00:00.000Z",last_update:{date:"2023-05-26T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},41474:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"list-tags/python",id:"list-tags/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/60-list-tags/python.md",sourceDirName:"60-list-tags",slug:"/list-tags/python",permalink:"/docs/list-tags/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/60-list-tags/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},56928:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:3,hide_sidebar:!0,publish_date:new Date("2014-07-22T00:00:00.000Z"),last_update:{date:new Date("2023-03-25T00:00:00.000Z")}},o=void 0,l={unversionedId:"list-tags/ruby",id:"list-tags/ruby",title:"ruby",description:"A Solution",source:"@site/docs/60-list-tags/ruby.md",sourceDirName:"60-list-tags",slug:"/list-tags/ruby",permalink:"/docs/list-tags/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/60-list-tags/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1679702400,formattedLastUpdatedAt:"Mar 25, 2023",frontMatter:{language:"ruby",level:3,hide_sidebar:!0,publish_date:"2014-07-22T00:00:00.000Z",last_update:{date:"2023-03-25T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By leveraging the before and after hooks in our test framework, we can interrogate each test in one fell swoop to get the tags and generate a simple report."),(0,i.kt)("p",null,"Here is an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"To do this in RSpec, we're going to leverage ",(0,i.kt)("inlineCode",{parentName:"p"},"RSpec.configure")," in a file called ",(0,i.kt)("inlineCode",{parentName:"p"},"tag_lister.rb"),". To keep things simple, let's wrap this behavior in a method called ",(0,i.kt)("inlineCode",{parentName:"p"},"list_tags")," and have it live within a module called ",(0,i.kt)("inlineCode",{parentName:"p"},"TagLister"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: tag_lister.rb\n\nrequire 'rspec'\n\nmodule TagLister\n  def self.list_tags\n    RSpec.configure do |c|\n      c.add_setting :tags\n      c.before(:suite) { RSpec.configuration.tags = {} }\n")),(0,i.kt)("p",null,"In our RSpec configuration we first need to create a place to store the tag data, so we add a setting called ",(0,i.kt)("inlineCode",{parentName:"p"},"tags")," and make it a hash."),(0,i.kt)("p",null,"Now we're ready to go through each test to find the tag data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'# filename: tag_lister.rb\n\n...\n      c.around(:each) do |example|\n        tag_recorder = RSpec.configuration.tags\n        standard_keys = [:example_group,\n                         :block,\n                         :description_args,\n                         :caller,\n                         :execution_result,\n                         :full_description,\n                         :line_number,\n                         :file_path,\n                         :description,\n                         :described_class,\n                         :location]\n        example.metadata.each do |key, value|\n          this_tag = "#{key}:#{value}" unless standard_keys.include?(key)\n          unless this_tag.nil?\n            tag_recorder[this_tag] = [] unless tag_recorder[this_tag]\n            tag_recorder[this_tag] << [\n              example.metadata[:full_description],\n              example.metadata[:file_path],\n              example.metadata[:line_number]\n            ]\n          end\n        end\n      end\n\n')),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"around(:each)")," we're able to interogate each test (a.k.a. ",(0,i.kt)("inlineCode",{parentName:"p"},"example"),") to see if it contains any data in addition to the standard set of keys that we can expect from RSpec. If it does, then we assume that these additional keys are tags and store the test name, path to test file, and line number of the test file that uses this tag (or these tags)."),(0,i.kt)("p",null,"We store this information in an array (and potentially an array of arrays) within our ",(0,i.kt)("inlineCode",{parentName:"p"},"tags")," hash. Here's a sample data set to help wrap your head around it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'{"wip:true"=>[["One passes", "./spec/one_spec.rb", 2], ["One fails", "./spec/one_spec.rb", 3]],\n"smoke:true"=>[["Three passes", "./spec/three_spec.rb", 2], ["Three fails", "./spec/three_spec.rb", 3]],\n"story:BIZ-1234"=>[["Two passes", "./spec/two_spec.rb", 2]], "story:BIZ-1235"=>[["Two fails", "./spec/two_spec.rb", 3]]}\n')),(0,i.kt)("p",null,"Now that we have all of the tags and the test data that shows where they are in use, we can generate a simple report with it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'# filename: tag_lister.rb\n\n...\n      c.after(:suite) do\n        tags = RSpec.configuration.tags\n\n        case ENV[\'TAG_SORT_ORDER\']\n        when \'alphabetical\'\n          tags = tags.sort_by { |tag| tag[0] }\n        when \'usage\'\n          tags = tags.sort_by { |tag| tag[1].count }.reverse\n        end\n\n        puts "\\n\\n"\n        puts "***************"\n        puts "* TAGS IN USE *"\n        puts "***************"\n        puts "\\n"\n\n        tags.each do |tag|\n          puts "#{tag[0]} (used #{tag[1].count} times)"\n          tag[1].each do |test_data|\n            puts "  #{test_data[0]} (#{test_data[1]}:#{test_data[2]})\\n"\n          end\n        end\n\n        puts "\\n#{tags.count} tags in use: sorted in #{ENV[\'TAG_SORT_ORDER\']} order"\n\n      end\n    end\n\n')),(0,i.kt)("p",null,"There are a couple of different ways we'll likely want to see the tag data. So we wire up the ability to sort alphabetically by tag name as well as by usage in descending order (e.g., the number of times a tag is used). In our current tagging data structure, ",(0,i.kt)("inlineCode",{parentName:"p"},"tag[0]")," is the tag name (a.k.a. the hash key) and ",(0,i.kt)("inlineCode",{parentName:"p"},"tag[1]")," is the array that contains an array (or multiple arrays) of test data."),(0,i.kt)("p",null,"After sorting the tags, we output a heading (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"* TAGS IN USE*"),"), iterate through the collection of tag & test data, and close things out with a summary statement (listing the total tag count and sorting method used)."),(0,i.kt)("p",null,"Now we just need to pull in our test files, start RSpec, and then add a trigger to run everything."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: tag_lister.rb\n\n...\n    tests = Dir.glob(File.join(Dir.getwd, 'spec/**/*'))\n    RSpec::Core::Runner.run(tests)\n\n  end\nend\n\nENV['TAG_SORT_ORDER'] = ARGV[0] || 'usage'\nTagLister.list_tags\n")),(0,i.kt)("p",null,"This script is built to live one level up from the test directory. And it assumes that the test directory is called ",(0,i.kt)("inlineCode",{parentName:"p"},"spec"),"."),(0,i.kt)("p",null,"We make it so we can pass an argument at runtime, which then gets fed into the tag sorting environment variable (",(0,i.kt)("inlineCode",{parentName:"p"},"ENV['TAG_SORT_ORDER']"),"). If no argument is provided, we default the value to ",(0,i.kt)("inlineCode",{parentName:"p"},"'usage'"),"."),(0,i.kt)("p",null,"When we save this and run it with ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby tag_lister.rb"),", we should see a report outputted in the terminal."),(0,i.kt)("p",null,"Here is an example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"......\n\n***************\n* TAGS IN USE *\n***************\n\nwip:true (used 2 times)\n  One passes (./spec/one_spec.rb:2)\n  One fails (./spec/one_spec.rb:3)\nsmoke:true (used 2 times)\n  Three passes (./spec/three_spec.rb:2)\n  Three fails (./spec/three_spec.rb:3)\nstory:BIZ-1234 (used 1 times)\n  Two passes (./spec/two_spec.rb:2)\nstory:BIZ-1235 (used 1 times)\n  Two fails (./spec/two_spec.rb:3)\n\n4 tags in use: sorted in usage order\n\n\nFinished in 0.00106 seconds (files took 0.09029 seconds to load)\n6 examples, 0 failures\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Iterate over each test, collecting tags and their test data"),(0,i.kt)("li",{parentName:"ul"},"Display a report in the terminal of tags in use (sorted based on run-time preference)")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"If you'd like to see the code and example specs used to generate the above report, you can find them ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/rspec-list-tags"},"here"),"."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},57923:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:1,hide_sidebar:!0,publish_date:new Date("2016-06-13T00:00:00.000Z"),last_update:{date:new Date("2023-03-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-press-keyboard-keys/csharp",id:"how-to-press-keyboard-keys/csharp",title:"csharp",description:"A Solution",source:"@site/docs/61-how-to-press-keyboard-keys/csharp.md",sourceDirName:"61-how-to-press-keyboard-keys",slug:"/how-to-press-keyboard-keys/csharp",permalink:"/docs/how-to-press-keyboard-keys/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/61-how-to-press-keyboard-keys/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680134400,formattedLastUpdatedAt:"Mar 30, 2023",frontMatter:{language:"csharp",level:1,hide_sidebar:!0,publish_date:"2016-06-13T00:00:00.000Z",last_update:{date:"2023-03-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"You can easily issue a key press by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"SendKeys")," command. This can be done to a specific element, or generically with Selenium's Action Builder (which has been documented on ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/selenium/docs/api/dotnet/html/T_OpenQA_Selenium_Interactions_Actions.htm"},"the Selenium Actions page for Building Advanced User Interactions"),")."),(0,i.kt)("p",null,"Either approach will send a key press. The latter approach will send it to the element that's currently in focus in the browser (so you don't have to specify a locator along with it), whereas the prior approach will send the key press directly to the element found."),(0,i.kt)("p",null,"You can see a full list of Selenium's available keyboard keys ",(0,i.kt)("a",{parentName:"p",href:"http://seleniumhq.github.io/selenium/docs/api/dotnet/html/T_OpenQA_Selenium_Keys.htm"},"here"),"."),(0,i.kt)("p",null,"Let's try out a couple of examples."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"First let's include our requisite classes for our test framework (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"NUnit.Framework"),"), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenQA.Selenium"),", etc.), and start our class off with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: KeyboardKeys.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\nusing OpenQA.Selenium.Interactions;\n\npublic class KeyboardKeys\n{\n    IWebDriver Driver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now we can wire up our test."),(0,i.kt)("p",null,"Let's use an example from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet")," that will display what key has been pressed (",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/key_presses"},"link"),"). We'll use the result text that gets displayed on the page to perform our assertion."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: KeyboardKeys.cs\n// ...\n    [Test]\n    public void KeyboardKeysExample()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/key_presses");\n\n        Driver.FindElement(By.Id("target")).SendKeys(Keys.Space);\n        Assert.That(Driver.FindElement(By.Id("result")).Text.Equals("You entered: SPACE"));\n// ...\n')),(0,i.kt)("p",null,"After visiting the page we find a visible element (e.g., the primary content of the page) and send the space key to it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},".SendKeys(Keys.SPACE)"),"). Then we grab the resulting text (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},'Driver.FindElement(By.Id("result")).Text'),") and assert that it says what we expect (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},'.Equals("You entered: SPACE"'),")."),(0,i.kt)("p",null,"Alternatively, we can issue a key press without finding the element by using the Selenium Action Builder."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: KeyboardKeys.cs\n// ...\n        Actions Builder = new Actions(Driver);\n        Builder.SendKeys(Keys.Left).Build().Perform();\n        Assert.That(Driver.FindElement(By.Id("result")).Text.Equals("You entered: LEFT"));\n    }\n}\n')),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\KeyboardKeys.sln")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Find the element and send the space key to it"),(0,i.kt)("li",{parentName:"ul"},"Find the result text on the page and asset it's what we expect"),(0,i.kt)("li",{parentName:"ul"},"Send the left arrow key to the element that's currently in focus"),(0,i.kt)("li",{parentName:"ul"},"Find the result text on the page and assert it's what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"If you have a specific element that you want to issue key presses to, then finding the element first is the way to go. If you don't have a receiving element, or you need to string together multiple key presses, then the Action Builder is what you should use."),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},52068:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:1,hide_sidebar:!0,publish_date:new Date("2015-11-09T00:00:00.000Z"),last_update:{date:new Date("2023-04-03T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-press-keyboard-keys/java",id:"how-to-press-keyboard-keys/java",title:"java",description:"A Solution",source:"@site/docs/61-how-to-press-keyboard-keys/java.md",sourceDirName:"61-how-to-press-keyboard-keys",slug:"/how-to-press-keyboard-keys/java",permalink:"/docs/how-to-press-keyboard-keys/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/61-how-to-press-keyboard-keys/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:168048e4,formattedLastUpdatedAt:"Apr 3, 2023",frontMatter:{language:"java",level:1,hide_sidebar:!0,publish_date:"2015-11-09T00:00:00.000Z",last_update:{date:"2023-04-03T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"You can easily issue a key press by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"send_keys")," command. This can be done to a specific element, or generically with Selenium's Action Builder (which has been documented on ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/selenium/docs/api/java/org/openqa/selenium/interactions/Actions.html"},"the Selenium Actions page for Building Advanced User Interactions"),")."),(0,i.kt)("p",null,"Either approach will send a key press. The latter approach will send it to the element that's currently in focus in the browser (so you don't have to specify a locator along with it), whereas the prior approach will send the key press directly to the element found."),(0,i.kt)("p",null,"Let's try out a couple of examples."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"First let's import our requisite classes (for annotations (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.junit.After"),", etc.), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.openqa.selenium.WebDriver"),", etc.), and matchers for our assertions (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.hamcrest.CoreMatchers"),", etc.)) and start our class with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// filename: KeyboardKeys.java\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.Keys;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.assertThat;\n\npublic class KeyboardKeys {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now we can wire up our test."),(0,i.kt)("p",null,"Let's use an example from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet")," that will display what key has been pressed (",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/key_presses"},"link"),"). We'll use the result text that gets displayed to perform our assertion."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: KeyboardKeys.java\n// ...\n    @Test\n    public void uploadFile() throws Exception {\n        driver.get("http://the-internet.herokuapp.com/key_presses");\n        driver.findElement(By.id("target")).sendKeys(Keys.SPACE);\n        assertThat(driver.findElement(By.id("result")).getText(), is("You entered: SPACE"));\n// ...\n')),(0,i.kt)("p",null,"After visiting the page we find an element that's visible (e.g., the one that contains the example on the page) and send the space key to it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"builder.sendKeys(Keys.SPACE).build().perform()"),"). Then we grab the resulting text (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},'driver.findElement(By.id("result")).getText()'),") and assert that it says what we expect (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},'is("You entered: SPACE"));'),")."),(0,i.kt)("p",null,"Alternatively, we can also issue a key press without finding the element first."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: KeyboardKeys.java\n// ...\n        Actions builder = new Actions(driver);\n        builder.sendKeys(Keys.LEFT).build().perform();\n        assertThat(driver.findElement(By.id("result")).getText(), is("You entered: LEFT"));\n    }\n\n}\n')),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn clean test")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Find the element and send the space key to it"),(0,i.kt)("li",{parentName:"ul"},"Find the result text on the page and check to that it's what we expect"),(0,i.kt)("li",{parentName:"ul"},"Send the left arrow key to the element that's currently in focus"),(0,i.kt)("li",{parentName:"ul"},"Find the result text on the page and check to that it's what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"If you have a specific element that you want to issue key presses to, then finding the element first is the way to go. But if you don't have a receiving element, or you need to string together multiple key presses, then the Action Builder is what you should use."),(0,i.kt)("p",null,"Thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/RomanIsko"},"Roman Isko")," for contributing the initial Java code for this ti."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},2404:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:1,hide_sidebar:!0,publish_date:new Date("2019-08-09T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-press-keyboard-keys/javascript",id:"how-to-press-keyboard-keys/javascript",title:"javascript",description:"A Solution",source:"@site/docs/61-how-to-press-keyboard-keys/javascript.md",sourceDirName:"61-how-to-press-keyboard-keys",slug:"/how-to-press-keyboard-keys/javascript",permalink:"/docs/how-to-press-keyboard-keys/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/61-how-to-press-keyboard-keys/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"javascript",level:1,hide_sidebar:!0,publish_date:"2019-08-09T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"You can easily issue a key press by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"sendKeys")," command."),(0,i.kt)("p",null,"This can be done to a specific element or generically with Selenium's Action Builder (",(0,i.kt)("a",{parentName:"p",href:"https://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/lib/input_exports_Actions.html#sendKeys"},"link"),"). Either approach will send a key press. The latter will send it to the element that's currently in focus in the browser (so you don't have to specify a locator along with it), whereas the prior approach will send the key press directly to the element found."),(0,i.kt)("p",null,"Let's try out a couple of examples."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"First we'll include our requisite libraries, declare the test class, and wire up some simple setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/keyboard-keys.spec.js\nconst assert = require("assert");\nconst { Builder, By, Key } = require("selenium-webdriver");\n\ndescribe("Keyboard Keys", function() {\n  let driver;\n\n  beforeEach(async function() {\n    driver = await new Builder().forBrowser("firefox").build();\n  });\n\n  afterEach(async function() {\n    await driver.quit();\n  });\n// ...\n')),(0,i.kt)("p",null,"Now we can write up our test."),(0,i.kt)("p",null,"Let's use an example from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet")," that will display what key has been pressed (",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/key_presses"},"link"),"). We'll use the result text that gets displayed to perform our assertion."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/keyboard-keys.spec.js\n  it("send keys", async function() {\n    await driver.get("http://the-internet.herokuapp.com/key_presses");\n    await driver.findElement(By.id("target")).sendKeys(Key.SPACE);\n    assert(\n      (await driver.findElement(By.id("result")).getText()) ===\n        "You entered: SPACE"\n    );\n  });\n});\n')),(0,i.kt)("p",null,"After visiting the page we find an element that's both visible and interactable with the keyboard (e.g., the input element on the page) and send the space key to it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},".sendKeys(Key.SPACE"),"). Then we grab the resulting text (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"driver.findElement(By.id('result')).getText()"),") and assert that it says what we expect (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"'You entered: SPACE'"),")."),(0,i.kt)("p",null,"Alternatively, we can issue a key press without finding the element first by using the Action Builder."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/keyboard-keys.spec.js\n// ...\n  it("send keys", async function() {\n        await driver.get("http://the-internet.herokuapp.com/key_presses");\n    await driver\n      .actions({ bridge: true })\n      .sendKeys(Key.TAB)\n      .perform();\n    assert(\n      (await driver.findElement(By.id("result")).getText()) ==\n        "You entered: TAB"\n    );\n  });\n});\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: In order for this approach to work in browsers other than Firefox, we need to specify ",(0,i.kt)("inlineCode",{parentName:"strong"},"{bridge: true}")," when calling ",(0,i.kt)("inlineCode",{parentName:"strong"},"driver.actions")," (e.g., ",(0,i.kt)("inlineCode",{parentName:"strong"},"driver.actions({ bridge: true })"),"). You can see ",(0,i.kt)("a",{parentName:"strong",href:"https://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/lib/input_exports_Actions.html"},"the documentation")," for further details.")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"mocha")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Find the element and send the space key to it"),(0,i.kt)("li",{parentName:"ul"},"Find the result text on the page and check that it's what we expect"),(0,i.kt)("li",{parentName:"ul"},"Send the tab key to the element that's currently in focus"),(0,i.kt)("li",{parentName:"ul"},"Find the result text on the page and check that it's what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"If you have a specific element that you want to issue key presses to, then finding the element first is the way to go. If you don't have a receiving element, or you need to string together multiple key presses, then the Action Builder is what you should use."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},69775:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:1,hide_sidebar:!0,publish_date:new Date("2016-11-19T00:00:00.000Z"),last_update:{date:new Date("2023-03-03T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-press-keyboard-keys/python",id:"how-to-press-keyboard-keys/python",title:"python",description:"A Solution",source:"@site/docs/61-how-to-press-keyboard-keys/python.md",sourceDirName:"61-how-to-press-keyboard-keys",slug:"/how-to-press-keyboard-keys/python",permalink:"/docs/how-to-press-keyboard-keys/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/61-how-to-press-keyboard-keys/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677801600,formattedLastUpdatedAt:"Mar 3, 2023",frontMatter:{language:"python",level:1,hide_sidebar:!0,publish_date:"2016-11-19T00:00:00.000Z",last_update:{date:"2023-03-03T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"An Example",id:"an-example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"You can easily issue a key press by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"send_keys")," command."),(0,i.kt)("p",null,"This can be done to a specific element, or generically with Selenium's Action Builder (which has been documented on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SeleniumHQ/selenium/wiki/Advanced-User-Interactions"},"the Selenium project's Wiki page for Advanced User Interactions"),"). Either approach will send a key press. The latter will send it to the element that's currently in focus in the browser (so you don't have to specify a locator along with it), whereas the prior approach will send the key press directly to the element found."),(0,i.kt)("p",null,"Let's step through a couple of examples."),(0,i.kt)("h2",{id:"an-example"},"An Example"),(0,i.kt)("p",null,"First we'll include our requisite libraries, declare the test class, and wire up some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: keyboard_keys.py\nimport unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.common.action_chains import ActionChains\nfrom selenium.webdriver.common.by import By\n\nclass KeyboardKeys(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n\n    def tearDown(self):\n        self.driver.quit()\n# ...\n")),(0,i.kt)("p",null,"Now we can wire up our test."),(0,i.kt)("p",null,"Let's use an example from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet")," that will display what key has been pressed (",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/key_presses"},"link"),"). We'll use the result text that gets displayed to perform our assertion."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: keyboard_keys.py\n# ...\n    def test_example_1(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/key_presses')\n        ddriver.find_element(By.CLASS_NAME, 'example').send_keys(Keys.SPACE)\n        assert driver.find_element(By.ID, 'result').text == 'You entered: SPACE'\n        ActionChains(driver).send_keys(Keys.TAB).perform()\n        assert driver.find_element(By.ID, 'result').text == 'You entered: TAB'\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,i.kt)("p",null,"After visiting the page we find an element that's visible (e.g., the div that contains the example on the page) and send the space key to it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},".send_keys(Keys.SPACE"),"). Then we grab the resulting text (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"driver.find_element(By.ID, 'result').text"),") and assert that it says what we expect (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"'You entered: SPACE'"),")."),(0,i.kt)("p",null,"Alternatively, we can also issue a key press without finding the element first by using the Action Builder (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ActionChains"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: keyboard_keys.py\n# ...\n    def test_example_1(self):\n        # ...\n        ActionChains(driver).send_keys(Keys.TAB).perform()\n        assert driver.find_element(By.ID, 'result').text == 'You entered: TAB'\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"python keyboard_keys.py")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Find the element and send the space key to it"),(0,i.kt)("li",{parentName:"ul"},"Find the result text on the page and check that it's what we expect"),(0,i.kt)("li",{parentName:"ul"},"Send the tab key to the element that's currently in focus"),(0,i.kt)("li",{parentName:"ul"},"Find the result text on the page and check that it's what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"If you have a specific element that you want to issue key presses to, then finding the element first is the way to go. But if you don't have a receiving element, or you need to string together multiple key presses, then the Action Builder is what you should reach for."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},24849:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:1,hide_sidebar:!0,publish_date:new Date("2015-10-12T00:00:00.000Z"),last_update:{date:new Date("2023-02-22T00:00:00.000Z")}},o=void 0,l={unversionedId:"how-to-press-keyboard-keys/ruby",id:"how-to-press-keyboard-keys/ruby",title:"ruby",description:"A Solution",source:"@site/docs/61-how-to-press-keyboard-keys/ruby.md",sourceDirName:"61-how-to-press-keyboard-keys",slug:"/how-to-press-keyboard-keys/ruby",permalink:"/docs/how-to-press-keyboard-keys/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/61-how-to-press-keyboard-keys/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677024e3,formattedLastUpdatedAt:"Feb 22, 2023",frontMatter:{language:"ruby",level:1,hide_sidebar:!0,publish_date:"2015-10-12T00:00:00.000Z",last_update:{date:"2023-02-22T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"You can easily issue a key press by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"send_keys")," command."),(0,i.kt)("p",null,"This can be done to a specific element or generically with ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/selenium/docs/api/rb/Selenium/WebDriver/ActionBuilder.html"},"Selenium's Action Builder"),". Either approach will send a key press. The latter will send it to the element that's currently in focus in the browser (so you don't have to specify a locator along with it), whereas the prior approach will send the key press directly to the element found."),(0,i.kt)("p",null,"When sending keys be sure to specify the key-press as a symbol (e.g. space is ",(0,i.kt)("inlineCode",{parentName:"p"},":space"),", tab is ",(0,i.kt)("inlineCode",{parentName:"p"},":tab"),", etc.). You can see a full list of keyboard key symbols ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SeleniumHQ/selenium/blob/master/rb/lib/selenium/webdriver/common/keys.rb"},"here"),"."),(0,i.kt)("p",null,"Let's try out a couple of examples."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"First we'll set up our requisite libraries to drive the browser (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver"),") and perform an assertion (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expections")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers"),"). After that, we'll create some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: key_presses.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Now we can write up our test."),(0,i.kt)("p",null,"Let's use an example from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet")," that will display what key has been pressed (",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/key_presses"},"link"),"). We'll use the result text that gets displayed to perform our assertion."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/key_presses'\n  @driver.find_element(id: 'target').send_keys :space\n  expect(@driver.find_element(id: 'result').text).to eql('You entered: SPACE')\nend\n")),(0,i.kt)("p",null,"After visiting the page we find an element that's visible (e.g., the one that contains the example on the page ",(0,i.kt)("inlineCode",{parentName:"p"},"(id: 'target')"),") and send the space key to it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},".send_keys :space"),"). Then we grab the resulting text (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"@driver.find_element(id: 'result').text)"),") and assert that it says what we expect (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"'You entered: SPACE'"),")."),(0,i.kt)("p",null,"Alternatively, we can also issue a key press without finding the element first."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/key_presses'\n  @driver.action.send_keys(:tab).perform\n  expect(@driver.find_element(id: 'result').text).to eql('You entered: TAB')\nend\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If we save this and run it (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby key_presses.rb")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Find the element and send the space key to it"),(0,i.kt)("li",{parentName:"ul"},"Find the result text on the page and check to that it's what we expect"),(0,i.kt)("li",{parentName:"ul"},"Send the tab key to the element that's currently in focus"),(0,i.kt)("li",{parentName:"ul"},"Find the result text on the page and check to that it's what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"If you have a specific element that you want to issue key presses to, then finding the element first is the way to go. If you don't have a receiving element, or you need to string together multiple key presses, then the Action Builder is what you should use."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},25146:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:2,hide_sidebar:!0,publish_date:new Date("2016-06-13T00:00:00.000Z"),last_update:{date:new Date("2023-03-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"right-click/csharp",id:"right-click/csharp",title:"csharp",description:"A Solution",source:"@site/docs/63-right-click/csharp.md",sourceDirName:"63-right-click",slug:"/right-click/csharp",permalink:"/docs/right-click/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/63-right-click/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680134400,formattedLastUpdatedAt:"Mar 30, 2023",frontMatter:{language:"csharp",level:2,hide_sidebar:!0,publish_date:"2016-06-13T00:00:00.000Z",last_update:{date:"2023-03-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By leveraging ",(0,i.kt)("a",{parentName:"p",href:"http://seleniumhq.github.io/selenium/docs/api/dotnet/html/T_OpenQA_Selenium_Interactions_Actions.htm"},"Selenium's Action Builder")," we can issue a right-click command (a.k.a. a ",(0,i.kt)("a",{parentName:"p",href:"http://seleniumhq.github.io/selenium/docs/api/dotnet/html/M_OpenQA_Selenium_Interactions_Actions_ContextClick.htm"},(0,i.kt)("inlineCode",{parentName:"a"},"ContextClick")),")."),(0,i.kt)("p",null,"We can then select an option from the menu by traversing it with keyboard arrow keys (which we can issue with the Action Builder's ",(0,i.kt)("a",{parentName:"p",href:"http://seleniumhq.github.io/selenium/docs/api/dotnet/html/M_OpenQA_Selenium_Interactions_Actions_SendKeys_1.htm"},(0,i.kt)("inlineCode",{parentName:"a"},"SendKeys"))," command)."),(0,i.kt)("p",null,"Let's continue with an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Let's start by importing our requisite classes for our test framework (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"NUnit.Framework"),"), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenQA.Selenium"),", etc.), and start our class off with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: RightClick.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\nusing OpenQA.Selenium.Interactions;\n\npublic class RightClick\n{\n    IWebDriver Driver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now we're ready to write our test."),(0,i.kt)("p",null,"Let's use an example from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet")," that will render a custom context menu when we right-click on a specific area of the page (",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/context_menu"},"link"),")."),(0,i.kt)("p",null,"Clicking the context menu item will trigger a JavaScript alert which will say ",(0,i.kt)("inlineCode",{parentName:"p"},"You selected a context menu"),". We'll grab this text and use it to assert that the menu was actually triggered."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: RightClick.cs\n// ...\n    [Test]\n    public void RightClickExample()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/context_menu");\n        IWebElement MenuArea = Driver.FindElement(By.Id("hot-spot"));\n        Actions Builder = new Actions(Driver);\n        Builder.ContextClick(MenuArea)\n            .SendKeys(Keys.ArrowDown)\n            .SendKeys(Keys.ArrowDown)\n            .SendKeys(Keys.ArrowDown)\n            .SendKeys(Keys.ArrowDown)\n            .SendKeys(Keys.ArrowDown)\n            .SendKeys(Keys.Enter)\n            .Perform();\n        IAlert Alert = Driver.SwitchTo().Alert();\n        Assert.That(Alert.Text.Equals("You selected a context menu"));\n    }\n}\n')),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\RightClick.sln")," from the command-line) here is what will happen."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Find and right-click the area of the page that renders a custom context menu"),(0,i.kt)("li",{parentName:"ul"},"Navigate to the context menu option with keyboard keys and select it"),(0,i.kt)("li",{parentName:"ul"},"JavaScript alert appears"),(0,i.kt)("li",{parentName:"ul"},"Grab the text of the JavaScript alert"),(0,i.kt)("li",{parentName:"ul"},"Assert that the text from the alert is what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"To learn more about context menus, you can read ",(0,i.kt)("a",{parentName:"p",href:"http://blog.teamtreehouse.com/building-html5-context-menus"},"this write-up from the Tree House blog"),"."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},92860:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={level:2,language:"java",hide_sidebar:!0,publish_date:new Date("2015-11-11T00:00:00.000Z"),last_update:{date:new Date("2023-04-03T00:00:00.000Z")}},o=void 0,l={unversionedId:"right-click/java",id:"right-click/java",title:"java",description:"A Solution",source:"@site/docs/63-right-click/java.md",sourceDirName:"63-right-click",slug:"/right-click/java",permalink:"/docs/right-click/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/63-right-click/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:168048e4,formattedLastUpdatedAt:"Apr 3, 2023",frontMatter:{level:2,language:"java",hide_sidebar:!0,publish_date:"2015-11-11T00:00:00.000Z",last_update:{date:"2023-04-03T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By leveraging ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/selenium/docs/api/java/org/openqa/selenium/interactions/Actions.html"},"Selenium's Action Builder")," we can issue a right-click command (a.k.a. a ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/selenium/docs/api/java/org/openqa/selenium/interactions/Actions.html#contextClick()"},(0,i.kt)("inlineCode",{parentName:"a"},"contextClick")),")."),(0,i.kt)("p",null,"We can then select an option from the menu by traversing it with keyboard arrow keys (which we can issue with the Action Builder's ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/selenium/docs/api/java/org/openqa/selenium/interactions/Actions.html#sendKeys(java.lang.CharSequence...)"},(0,i.kt)("inlineCode",{parentName:"a"},"sendKeys"))," command."),(0,i.kt)("p",null,"Let's continue with an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Let's start by importing our requisite classes (for annotations (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.junit.After"),", etc.), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.openqa.selenium.WebDriver"),", etc.), and matchers for our assertions (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.hamcrest.CoreMatchers"),", etc.)) and start our class with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// filename: RightClick.java\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport org.openqa.selenium.interactions.Actions;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.hamcrest.MatcherAssert.assertThat;\n\npublic class RightClick {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now we're ready to write our test."),(0,i.kt)("p",null,"Let's use an example from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet")," that will render a custom context menu when we right-click on a specific area of the page (",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/context_menu"},"link"),").\nClicking the context menu item will trigger a JavaScript alert which will say ",(0,i.kt)("inlineCode",{parentName:"p"},"You selected a context menu"),". We'll grab this text and use it to assert that the menu was actually triggered."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: RightClick.java\n// ...\n    @Test\n    public void rightClickTest() throws InterruptedException {\n        driver.get("http://the-internet.herokuapp.com/context_menu");\n        WebElement menu = driver.findElement(By.id("hot-spot"));\n        Actions action = new Actions(driver);\n        action.contextClick(menu)\n                .sendKeys(Keys.ARROW_DOWN)\n                .sendKeys(Keys.ARROW_DOWN)\n                .sendKeys(Keys.ARROW_DOWN)\n                .sendKeys(Keys.ENTER)\n                .perform();\n        Alert alert = driver.switchTo().alert();\n        assertThat(alert.getText(), is(equalTo("You selected a context menu")));\n    }\n\n}\n')),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn clean test")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Find and right-click the area of the page that renders a custom context menu"),(0,i.kt)("li",{parentName:"ul"},"Navigate to the context menu option with keyboard keys"),(0,i.kt)("li",{parentName:"ul"},"JavaScript alert appears"),(0,i.kt)("li",{parentName:"ul"},"Grab the text of the JavaScript alert"),(0,i.kt)("li",{parentName:"ul"},"Assert that the text from the alert is what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"To learn more about context menus, you can read ",(0,i.kt)("a",{parentName:"p",href:"http://blog.teamtreehouse.com/building-html5-context-menus"},"this write-up from the Tree House blog"),"."),(0,i.kt)("p",null,"Thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/RomanIsko"},"Roman Isko")," for contributing the initial Java code for this tip."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},32102:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:2,hide_sidebar:!0,publish_date:new Date("2019-08-09T00:00:00.000Z"),last_update:{date:new Date("2023-03-28T00:00:00.000Z")}},o=void 0,l={unversionedId:"right-click/javascript",id:"right-click/javascript",title:"javascript",description:"A Solution",source:"@site/docs/63-right-click/javascript.md",sourceDirName:"63-right-click",slug:"/right-click/javascript",permalink:"/docs/right-click/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/63-right-click/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1679961600,formattedLastUpdatedAt:"Mar 28, 2023",frontMatter:{language:"javascript",level:2,hide_sidebar:!0,publish_date:"2019-08-09T00:00:00.000Z",last_update:{date:"2023-03-28T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About the Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By leveraging Selenium's ",(0,i.kt)("a",{parentName:"p",href:"https://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/lib/input_exports_Actions.html"},"Actions")," we can issue a right-click command (a.k.a. a ",(0,i.kt)("a",{parentName:"p",href:"https://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/lib/input_exports_Actions.html#contextClick"},(0,i.kt)("inlineCode",{parentName:"a"},"contextClick")),")."),(0,i.kt)("p",null,"You could then select an option from the menu by traversing it with keyboard keys (if a system dialog) or through ",(0,i.kt)("inlineCode",{parentName:"p"},"findElement")," (if a rendered element). It depends on how the application under test has implemented it."),(0,i.kt)("p",null,"Let's try an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Let's start by pulling in our requisite libraries, declare the test class, and wire up some simple setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/right-click.spec.js\nconst assert = require("assert");\nconst { Builder, By, Key } = require("selenium-webdriver");\n\ndescribe("Right click", function() {\n  let driver;\n\n  beforeEach(async function() {\n  this.timeout(60000)\n    driver = await new Builder().forBrowser("firefox").build();\n  });\n\n  afterEach(async function() {\n    await driver.quit();\n  });\n// ...\n')),(0,i.kt)("p",null,"Now we're ready to write our test."),(0,i.kt)("p",null,"We'll use an example from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet")," that will trigger a JavaScript alert when when we right-click on a specific area of the page (",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/context_menu"},"link"),"). It will say ",(0,i.kt)("inlineCode",{parentName:"p"},"You selected a context menu"),". We'll grab this text and use it to assert that the menu was actually triggered."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/right-click.spec.js\n// ...\n  it("displays browser context menu", async function() {\n    await driver.get("http://the-internet.herokuapp.com/context_menu");\n    const menuArea = await driver.findElement(By.id("hot-spot"));\n    await driver\n      .actions({ bridge: true })\n      .contextClick(menuArea)\n      .perform();\n    const alertText = await driver\n      .switchTo()\n      .alert()\n      .getText();\n    assert(alertText === "You selected a context menu");\n  });\n});\n')),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mocha"),") from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser and visit the page"),(0,i.kt)("li",{parentName:"ul"},"Find and right-click the area which will render a custom context menu"),(0,i.kt)("li",{parentName:"ul"},"JavaScript alert appears"),(0,i.kt)("li",{parentName:"ul"},"Grab the text of the JavaScript alert"),(0,i.kt)("li",{parentName:"ul"},"Assert that the text from the alert is what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"To learn more about context menus, you can read ",(0,i.kt)("a",{parentName:"p",href:"http://blog.teamtreehouse.com/building-html5-context-menus"},"this write-up from the Tree House blog"),"."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About the Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},30154:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var n=a(87462),i=(a(67294),a(3905)),r=a(34591);const o={title:"Right Click",id:"63-right-click",contentUrl:"docs/right-click/63-right-click",sidebar_label:"Right Click",text:"Sometimes you'll run into an app that has functionality hidden behind a right-click menu (a.k.a. a context menu). These menus tend to be system level menus that are untouchable by Selenium. So how do you test this functionality?",number:63,hide_table_of_contents:!0,level:2,publish_date:new Date("2015-10-13T00:00:00.000Z"),last_update:{date:new Date("2023-03-06T00:00:00.000Z")},tags:["right-click","right click","context menu","action builder","context click"],category:["fundamentals"]},l="How to Right-click",s={unversionedId:"right-click/63-right-click",id:"right-click/63-right-click",title:"Right Click",description:"Intro",source:"@site/docs/63-right-click/main.mdx",sourceDirName:"63-right-click",slug:"/right-click/63-right-click",permalink:"/docs/right-click/63-right-click",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/63-right-click/main.mdx",tags:[{label:"right-click",permalink:"/docs/tags/right-click"},{label:"context menu",permalink:"/docs/tags/context-menu"},{label:"action builder",permalink:"/docs/tags/action-builder"},{label:"context click",permalink:"/docs/tags/context-click"}],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1678060800,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{title:"Right Click",id:"63-right-click",contentUrl:"docs/right-click/63-right-click",sidebar_label:"Right Click",text:"Sometimes you'll run into an app that has functionality hidden behind a right-click menu (a.k.a. a context menu). These menus tend to be system level menus that are untouchable by Selenium. So how do you test this functionality?",number:63,hide_table_of_contents:!0,level:2,publish_date:"2015-10-13T00:00:00.000Z",last_update:{date:"2023-03-06T00:00:00.000Z"},tags:["right-click","right click","context menu","action builder","context click"],category:["fundamentals"]},sidebar:"docs",previous:{title:"How To Press Keyboard Keys",permalink:"/docs/how-to-press-keyboard-keys/61-keyboard-keys"},next:{title:"Limit Bandwidth",permalink:"/docs/limit-bandwidth/64-limit-bandwidth"}},u={},d=[{value:"Intro",id:"intro",level:2}],p={toc:d},h="wrapper";function m(e){let{components:t,...a}=e;return(0,i.kt)(h,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"how-to-right-click"},"How to Right-click"),(0,i.kt)("h2",{id:"intro"},"Intro"),(0,i.kt)("p",null,"Sometimes you'll run into an app that has functionality hidden behind a right-click menu (a.k.a. a context menu). These menus tend to be system level menus that are untouchable by Selenium. So how do you test this functionality?"),(0,i.kt)(r.Z,{folderName:"63-right-click",mdxType:"DropdownMarkdown"}))}m.isMDXComponent=!0},64815:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:2,hide_sidebar:!0,publish_date:new Date("2016-11-20T00:00:00.000Z"),last_update:{date:new Date("2023-03-15T00:00:00.000Z")}},o=void 0,l={unversionedId:"right-click/python",id:"right-click/python",title:"python",description:"A Solution",source:"@site/docs/63-right-click/python.md",sourceDirName:"63-right-click",slug:"/right-click/python",permalink:"/docs/right-click/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/63-right-click/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1678838400,formattedLastUpdatedAt:"Mar 15, 2023",frontMatter:{language:"python",level:2,hide_sidebar:!0,publish_date:"2016-11-20T00:00:00.000Z",last_update:{date:"2023-03-15T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By leveraging Selenium's Action Builder (a.k.a. ",(0,i.kt)("a",{parentName:"p",href:"http://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.action_chains.html?highlight=actionchains#selenium.webdriver.common.action_chains.ActionChains"},"ActionChains")," in the Selenium Python bindings) we can issue a right-click command (a.k.a. a ",(0,i.kt)("a",{parentName:"p",href:"http://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.action_chains.html?highlight=actionchains#selenium.webdriver.common.action_chains.ActionChains.context_click"},(0,i.kt)("inlineCode",{parentName:"a"},"context_click")),")."),(0,i.kt)("p",null,"We can then select an option from the menu by traversing it with keyboard arrow keys (which we can issue with the Action Builder's ",(0,i.kt)("a",{parentName:"p",href:"http://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.action_chains.html?highlight=actionchains#selenium.webdriver.common.action_chains.ActionChains.send_keys"},(0,i.kt)("inlineCode",{parentName:"a"},"send_keys"))," command)."),(0,i.kt)("p",null,"Let's continue with an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Let's start by pulling in our requisite libraries, declare the test class, and wire up some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: right_click.py\nimport unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.common.action_chains import ActionChains\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.common.by import By\n\n\nclass RightClick(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n\n    def tearDown(self):\n        self.driver.quit()\n# ...\n")),(0,i.kt)("p",null,"Now we're ready to write our test."),(0,i.kt)("p",null,"We'll use an example from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet")," that will render a custom context menu when we right-click on a specific area of the page (",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/context_menu"},"link"),"). Clicking the context menu will trigger a JavaScript alert which will say ",(0,i.kt)("inlineCode",{parentName:"p"},"You selected a context menu"),". We'll grab this text and use it to assert that the menu was actually triggered."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: right_click.py\n# ...\n    def test_example_1(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/context_menu')\n        menu_area = driver.find_element(By.ID,'hot-spot')\n        ActionChains(driver).context_click(\n            menu_area).send_keys(\n            Keys.ARROW_DOWN).send_keys(\n            Keys.ARROW_DOWN).send_keys(\n            Keys.ARROW_DOWN).send_keys(\n            Keys.ENTER).perform()\n        alert = driver.switch_to.alert\n        assert alert.text == 'You selected a context menu'\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"python right_click.py"),") from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser and visit the page"),(0,i.kt)("li",{parentName:"ul"},"Find and right-click the area which will render a custom context menu"),(0,i.kt)("li",{parentName:"ul"},"Select the context menu option with keyboard keys"),(0,i.kt)("li",{parentName:"ul"},"JavaScript alert appears"),(0,i.kt)("li",{parentName:"ul"},"Grab the text of the JavaScript alert"),(0,i.kt)("li",{parentName:"ul"},"Assert that the text from the alert is what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"To learn more about context menus, you can read ",(0,i.kt)("a",{parentName:"p",href:"http://blog.teamtreehouse.com/building-html5-context-menus"},"this write-up from the Tree House blog"),"."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},38892:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:2,hide_sidebar:!0,publish_date:new Date("2015-10-13T00:00:00.000Z"),last_update:{date:new Date("2023-03-06T00:00:00.000Z")}},o=void 0,l={unversionedId:"right-click/ruby",id:"right-click/ruby",title:"ruby",description:"A Solution",source:"@site/docs/63-right-click/ruby.md",sourceDirName:"63-right-click",slug:"/right-click/ruby",permalink:"/docs/right-click/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/63-right-click/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1678060800,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{language:"ruby",level:2,hide_sidebar:!0,publish_date:"2015-10-13T00:00:00.000Z",last_update:{date:"2023-03-06T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By leveraging ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SeleniumHQ/selenium/blob/master/rb/lib/selenium/webdriver/common/action_builder.rb"},"Selenium's Action Builder")," we can issue a right-click command (a.k.a. a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SeleniumHQ/selenium/blob/master/rb/lib/selenium/webdriver/common/action_builder.rb#L301"},(0,i.kt)("inlineCode",{parentName:"a"},"context_click")),")."),(0,i.kt)("p",null,"We can then select an option from the menu by traversing it with keyboard arrow keys (which we can issue with the Action Builder's ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SeleniumHQ/selenium/blob/master/rb/lib/selenium/webdriver/common/action_builder.rb#L140"},(0,i.kt)("inlineCode",{parentName:"a"},"send_keys"))," command). For a full write-up on working with keyboard keys in Selenium, see ",(0,i.kt)("a",{parentName:"p",href:"/tips/61-keyboard-keys"},"tip 61"),"."),(0,i.kt)("p",null,"Let's continue with an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Let's start by pulling in the necessary libraries (",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to control the browser and ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers")," to perform an assertion) and wiring up some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: right_click.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Now we're ready to write our test."),(0,i.kt)("p",null,"Let's use an example from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet")," that will render a custom context menu when we right-click on a specific area of the page (",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/context_menu"},"link"),"). Clicking the context menu will trigger a JavaScript alert which will say ",(0,i.kt)("inlineCode",{parentName:"p"},"You selected a context menu"),". We'll grab this text and use it to assert that the menu was actually triggered."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/context_menu'\n  menu_area = @driver.find_element id: 'hot-spot'\n  @driver.action.context_click(menu_area).send_keys(\n    :arrow_down).send_keys(\n    :arrow_down).send_keys(\n    :arrow_down).send_keys(\n    :enter).perform\n  alert = @driver.switch_to.alert\n  expect(alert.text).to eq('You selected a context menu')\nend\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby right_click.rb"),") from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser and visit the page"),(0,i.kt)("li",{parentName:"ul"},"Find and right-click the area which will render a custom context menu"),(0,i.kt)("li",{parentName:"ul"},"Select the context menu option with keyboard keys"),(0,i.kt)("li",{parentName:"ul"},"JavaScript alert appears"),(0,i.kt)("li",{parentName:"ul"},"Grab the text of the JavaScript alert"),(0,i.kt)("li",{parentName:"ul"},"Assert that the text from the alert is what we expect")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"To learn more about context menus, you can read ",(0,i.kt)("a",{parentName:"p",href:"http://blog.teamtreehouse.com/building-html5-context-menus"},"this write-up from the Tree House blog"),"."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},5276:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"limit-bandwidth/csharp",id:"limit-bandwidth/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/64-limit-bandwidth/csharp.md",sourceDirName:"64-limit-bandwidth",slug:"/limit-bandwidth/csharp",permalink:"/docs/limit-bandwidth/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/64-limit-bandwidth/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},7896:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"limit-bandwidth/java",id:"limit-bandwidth/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/64-limit-bandwidth/java.md",sourceDirName:"64-limit-bandwidth",slug:"/limit-bandwidth/java",permalink:"/docs/limit-bandwidth/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/64-limit-bandwidth/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},81154:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"limit-bandwidth/javascript",id:"limit-bandwidth/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/64-limit-bandwidth/javascript.md",sourceDirName:"64-limit-bandwidth",slug:"/limit-bandwidth/javascript",permalink:"/docs/limit-bandwidth/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/64-limit-bandwidth/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},38991:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"limit-bandwidth/python",id:"limit-bandwidth/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/64-limit-bandwidth/python.md",sourceDirName:"64-limit-bandwidth",slug:"/limit-bandwidth/python",permalink:"/docs/limit-bandwidth/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/64-limit-bandwidth/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},7418:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:3,hide_sidebar:!0,publish_date:new Date("2015-10-16T00:00:00.000Z"),last_update:{date:new Date("2023-04-06T00:00:00.000Z")}},o=void 0,l={unversionedId:"limit-bandwidth/ruby",id:"limit-bandwidth/ruby",title:"ruby",description:"A Solution",source:"@site/docs/64-limit-bandwidth/ruby.md",sourceDirName:"64-limit-bandwidth",slug:"/limit-bandwidth/ruby",permalink:"/docs/limit-bandwidth/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/64-limit-bandwidth/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680739200,formattedLastUpdatedAt:"Apr 6, 2023",frontMatter:{language:"ruby",level:3,hide_sidebar:!0,publish_date:"2015-10-16T00:00:00.000Z",last_update:{date:"2023-04-06T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"With the help of a proxy server like ",(0,i.kt)("a",{parentName:"p",href:"http://bmp.lightbody.net/"},"BrowserMob Proxy")," we can simulate bandwidth limitations and run our tests to see if they fall down. In order to do this we'll also need to adjust our Selenium's default timeout."),(0,i.kt)("blockquote",null,(0,i.kt)("h3",{parentName:"blockquote",id:"a-brief-primer-on-browsermob-proxy"},"A Brief Primer on BrowserMob Proxy"),(0,i.kt)("p",{parentName:"blockquote"},"BrowserMob Proxy is a server which sits between your browser and the application you're testing. You connect to it by configuring a browser profile to pass through it. As listed on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/lightbody/browsermob-proxy#features-and-usage"},"the BrowserMob Proxy GitHub page"),", here are some of the benefits it offers:"),(0,i.kt)("ul",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ul"},"blacklisting and whitelisting certain URL patterns"),(0,i.kt)("li",{parentName:"ul"},"simulating various bandwidth and latency"),(0,i.kt)("li",{parentName:"ul"},"remapping DNS lookups"),(0,i.kt)("li",{parentName:"ul"},"flushing DNS caching"),(0,i.kt)("li",{parentName:"ul"},"controlling DNS and request timeouts"),(0,i.kt)("li",{parentName:"ul"},"automatic BASIC authorization"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE:")," You can also capture HTTP status codes with it as well. See ",(0,i.kt)("a",{parentName:"p",href:"/tips/17-retrieve-http-status-codes"},"tip 17")," for details on how to do that."),(0,i.kt)("p",null,"Let's continue with an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"First we'll need to download BrowserMob Proxy from ",(0,i.kt)("a",{parentName:"p",href:"http://bmp.lightbody.net/"},"here"),"."),(0,i.kt)("p",null,"Then we can wire up our test script to pull in our requisite libraries (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to drive the browser, ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," and it's matchers for our assertion, and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jarib/browsermob-proxy-rb"},(0,i.kt)("inlineCode",{parentName:"a"},"browsermob/proxy"))," to control the proxy server)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: bandwidth_limit.rb\n\nrequire 'browsermob/proxy'\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n")),(0,i.kt)("p",null,"Now let's configure the proxy server and bind it to a Selenium browser profile."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"def configure_proxy\n  server = BrowserMob::Proxy::Server.new('./browsermob-proxy-2.1.0-beta-3/bin/browsermob-proxy')\n  server.start\n  @proxy = server.create_proxy\n  profile = Selenium::WebDriver::Firefox::Profile.new\n  profile.proxy = @proxy.selenium_proxy\n  profile\nend\n")),(0,i.kt)("p",null,"Now we can create ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods to handle our test configuration."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"def setup\n  @driver = Selenium::WebDriver.for :firefox, profile: configure_proxy\n  @driver.manage.timeouts.page_load = 300 # seconds\n  @proxy.limit(upstream_kbps: 20, downstream_kbps: 30)\nend\n\ndef teardown\n  @driver.quit\n  @proxy.close\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"setup")," we set the default timeout for Selenium to 5 minutes (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"300")," seconds) and specify an upload limit of ",(0,i.kt)("inlineCode",{parentName:"p"},"20")," kilobits per second and a download limit of ",(0,i.kt)("inlineCode",{parentName:"p"},"30")," kilobits per second (which is similar to a dial-up connection)."),(0,i.kt)("p",null,"Now let's write our test. A simple page load and copy assertion will suffice (to make sure the page actually loaded)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com'\n  expect(@driver.find_element(class: 'heading').text).to eql('Welcome to the Internet')\nend\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby bandwidth_limit.rb")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Proxy server starts"),(0,i.kt)("li",{parentName:"ul"},"Proxy server session created"),(0,i.kt)("li",{parentName:"ul"},"Browser opens (connecting to the proxy server session with a large default timeout)"),(0,i.kt)("li",{parentName:"ul"},"Proxy bandwidth constraints applied"),(0,i.kt)("li",{parentName:"ul"},"Visit the page (which loads slowly)"),(0,i.kt)("li",{parentName:"ul"},"Page eventually loads"),(0,i.kt)("li",{parentName:"ul"},"Grab the text from the page heading"),(0,i.kt)("li",{parentName:"ul"},"Perform an assertion against the text to make sure it loaded"),(0,i.kt)("li",{parentName:"ul"},"Browser closes"),(0,i.kt)("li",{parentName:"ul"},"Proxy session closes")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"It may not be clear in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jarib/browsermob-proxy-rb"},(0,i.kt)("inlineCode",{parentName:"a"},"browsermob-proxy-rb"))," what options and functionality are available since the library is light on documentation. But the code is easy to read and has good comments. It's worth looking at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jarib/browsermob-proxy-rb/blob/master/lib/browsermob/proxy/client.rb"},"the client class")," to see what's available."),(0,i.kt)("p",null,"Alternatively, you can BrowserMob Proxy through it's Rest API. You can find out more about that on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/lightbody/browsermob-proxy#rest-api"},"the BrowserMob Proxy GitHub page"),"."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},2547:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:2,hide_sidebar:!0,publish_date:new Date("2016-06-13T00:00:00.000Z"),last_update:{date:new Date("2023-03-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"highlight-elements/csharp",id:"highlight-elements/csharp",title:"csharp",description:"A Solution",source:"@site/docs/65-highlight-elements/csharp.md",sourceDirName:"65-highlight-elements",slug:"/highlight-elements/csharp",permalink:"/docs/highlight-elements/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/65-highlight-elements/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680134400,formattedLastUpdatedAt:"Mar 30, 2023",frontMatter:{language:"csharp",level:2,hide_sidebar:!0,publish_date:"2016-06-13T00:00:00.000Z",last_update:{date:"2023-03-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By leveraging some simple JavaScript and CSS styling, we can highlight the element on the page that we're targeting. This way we can visually inspect it to make sure it is the one that we want."),(0,i.kt)("p",null,"Let's take a look at an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"First let's include our requisite classes for our test framework (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"NUnit.Framework"),"), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenQA.Selenium"),", etc.), access to C# collections (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Collections.Generic"),"), and start our class off with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: HighlightElements.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\nusing System.Threading;\n\npublic class HighlightElements\n{\n    IWebDriver Driver;\n    IJavaScriptExecutor JSDriver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n        JSDriver = (IJavaScriptExecutor) Driver;\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now let's create a ",(0,i.kt)("inlineCode",{parentName:"p"},"HighlightElement")," helper method that will accept a Selenium WebDriver ",(0,i.kt)("inlineCode",{parentName:"p"},"IWebElement")," and a time to wait (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"Duration"),") as parameters."),(0,i.kt)("p",null,"By setting a duration we can control how long to highlight an element on the page before reverting the styling back. And we can make this an optional argument by setting a sensible default (e.g., 3 seconds)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: HighlightElements.cs\n// ...\n    private void HighlightElement(IWebElement Element, int Duration = 3)\n    {\n        string OriginalStyle = Element.GetAttribute("style");\n\n        JSDriver.ExecuteScript("arguments[0].setAttribute(arguments[1], arguments[2])",\n                               Element,\n                               "style",\n                               "border: 2px solid red; border-style: dashed;");\n\n        Thread.Sleep(Duration * 1000);\n        JSDriver.ExecuteScript("arguments[0].setAttribute(arguments[1], arguments[2])",\n                               Element,\n                               "style",\n                               OriginalStyle);\n    }\n// ...\n')),(0,i.kt)("p",null,"There are three things going on here."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We store the style of the element so we can revert it back when we're done"),(0,i.kt)("li",{parentName:"ul"},"We change the style of the element so it visually stands out (e.g., a red dashed border)"),(0,i.kt)("li",{parentName:"ul"},"We revert the style of the element back after 3 seconds (or longer if specified)")),(0,i.kt)("p",null,"We're accomplishing the style change through JavaScript's ",(0,i.kt)("inlineCode",{parentName:"p"},"setAttribute")," function. And we're executing it with Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},"ExecuteScript")," command."),(0,i.kt)("p",null,"Now to use this in our test is a simple matter to finding an element and passing it to ",(0,i.kt)("inlineCode",{parentName:"p"},"HighlightElement"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: HighlightElements.cs\n// ...\n    [Test]\n    public void HighlightElementExample()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/large");\n        IWebElement TargetElement = Driver.FindElement(By.Id("sibling-2.3"));\n        HighlightElement(TargetElement);\n    }\n\n}\n')),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\HighlightElements.sln")," from the command-line) here is what will happen."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Find the element to highlight"),(0,i.kt)("li",{parentName:"ul"},"Change the styling of the element so it has a red dashed-line border"),(0,i.kt)("li",{parentName:"ul"},"Wait 3 seconds"),(0,i.kt)("li",{parentName:"ul"},"Revert the styling of the element back (removing the red border)"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"If you wanted to take this a step further, you could leverage this approach along with an interactive debugger."),(0,i.kt)("p",null,"Alternatively, you could verify your locators by using a browser plugin like FireFinder."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"You can follow Brian D. Goad on Twitter at ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/bbbco"},"@bbbco"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Brian D. Goad profile picture",src:a(93330).Z+"#author-img",title:"a title",width:"400",height:"400"})))}h.isMDXComponent=!0},96290:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:2,hide_sidebar:!0,publish_date:new Date("2015-11-11T00:00:00.000Z"),last_update:{date:new Date("2023-04-03T00:00:00.000Z")}},o=void 0,l={unversionedId:"highlight-elements/java",id:"highlight-elements/java",title:"java",description:"A Solution",source:"@site/docs/65-highlight-elements/java.md",sourceDirName:"65-highlight-elements",slug:"/highlight-elements/java",permalink:"/docs/highlight-elements/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/65-highlight-elements/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:168048e4,formattedLastUpdatedAt:"Apr 3, 2023",frontMatter:{language:"java",level:2,hide_sidebar:!0,publish_date:"2015-11-11T00:00:00.000Z",last_update:{date:"2023-04-03T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By leveraging some simple JavaScript and CSS styling, we can highlight the element on the page that we're targeting. This way we can visually inspect it to make sure it is the one that we want."),(0,i.kt)("p",null,"Let's take a look at an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"First let's import our requisite classes (for annotations (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.junit.After"),", etc.), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.openqa.selenium.WebDriver"),", etc.), and matchers for our assertions (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.hamcrest.CoreMatchers"),", etc.)) and start our class with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// filename: HighlightElement.java\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.firefox.FirefoxDriver;\n\npublic class HighlightElement {\n    WebDriver driver;\n    JavascriptExecutor js;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n        js = (JavascriptExecutor) driver;\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now let's create a ",(0,i.kt)("inlineCode",{parentName:"p"},"highlightElement")," helper method that will accept a Selenium WebDriver ",(0,i.kt)("inlineCode",{parentName:"p"},"element")," and a time to wait (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"duration"),") as arguments."),(0,i.kt)("p",null,"By setting a duration, we can control how long to highlight an element on the page before reverting the styling back. And we can make this an optional argument by setting a sensible default (e.g., 3 seconds)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: HighlightElement.java\n// ...\n    private void highlightElement(WebElement element, int duration) throws InterruptedException {\n        String original_style = element.getAttribute("style");\n\n        js.executeScript(\n                "arguments[0].setAttribute(arguments[1], arguments[2])",\n                element,\n                "style",\n                "border: 2px solid red; border-style: dashed;");\n\n        if (duration > 0) {\n            Thread.sleep(duration * 1000);\n            js.executeScript(\n                    "arguments[0].setAttribute(arguments[1], arguments[2])",\n                    element,\n                    "style",\n                    original_style);\n        }\n    }\n')),(0,i.kt)("p",null,"There are three things going on here."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We store the style of the element so we can revert it back when we're done"),(0,i.kt)("li",{parentName:"ul"},"We change the style of the element so it visually stands out (e.g., a red dashed border)"),(0,i.kt)("li",{parentName:"ul"},"We revert the style of the element back after 3 seconds (or longer if specified)")),(0,i.kt)("p",null,"We're accomplishing the style change through JavaScript's ",(0,i.kt)("inlineCode",{parentName:"p"},"setAttribute")," function. And we're executing it with Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},"executeScript")," command."),(0,i.kt)("p",null,"To use this in our test is simple, we just need to find an element and then pass it to ",(0,i.kt)("inlineCode",{parentName:"p"},"highlightElement"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: HighlightElement.java\n// ...\n    @Test\n    public void highlightElementTest() throws InterruptedException {\n        driver.get("http://the-internet.herokuapp.com/large");\n        WebElement element = driver.findElement(By.id("sibling-2.3"));\n        highlightElement(element, 3);\n    }\n\n}\n')),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn clean test")," from the command-line) here is what will happen."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Find the element to highlight"),(0,i.kt)("li",{parentName:"ul"},"Change the styling of the element so it has a red dashed-line border"),(0,i.kt)("li",{parentName:"ul"},"Wait 3 seconds"),(0,i.kt)("li",{parentName:"ul"},"Revert the styling of the element back (removing the red border)"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"If you wanted to take this a step further, you could leverage this approach along with an interactive debugger."),(0,i.kt)("p",null,"Alternatively, you could verify your locators by using a browser plugin like FireFinder."),(0,i.kt)("p",null,"Thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/RomanIsko"},"Roman Isko")," for contributing the initial Java code for this tip."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},40335:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:2,hide_sidebar:!0,publish_date:new Date("2019-08-09T00:00:00.000Z"),last_update:{date:new Date("2023-03-28T00:00:00.000Z")}},o=void 0,l={unversionedId:"highlight-elements/javascript",id:"highlight-elements/javascript",title:"javascript",description:"A Solution",source:"@site/docs/65-highlight-elements/javascript.md",sourceDirName:"65-highlight-elements",slug:"/highlight-elements/javascript",permalink:"/docs/highlight-elements/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/65-highlight-elements/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1679961600,formattedLastUpdatedAt:"Mar 28, 2023",frontMatter:{language:"javascript",level:2,hide_sidebar:!0,publish_date:"2019-08-09T00:00:00.000Z",last_update:{date:"2023-03-28T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By leveraging some simple JavaScript and CSS styling, we can highlight the element on the page that we're targeting. This way we can visually inspect it to make sure it is the one that we want."),(0,i.kt)("p",null,"Let's take a look at an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"For our initial setup let's pull in our requisite libraries, declare our test class, and wire up some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/highlight-elements.spec.js\nconst assert = require("assert");\nconst { Builder, By, Key } = require("selenium-webdriver");\n\ndescribe("Highlight elements", function() {\n  let driver;\n\n  beforeEach(async function() {\n    this.timeout(60000)\n    driver = await new Builder().forBrowser("firefox").build();\n  });\n\n  afterEach(async function() {\n    await driver.quit();\n  });\n// ...\n')),(0,i.kt)("p",null,"Now let's create a ",(0,i.kt)("inlineCode",{parentName:"p"},"highlight")," helper function that will accept a found ",(0,i.kt)("inlineCode",{parentName:"p"},"element")," from Selenium and a time to wait (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"duration"),") as arguments."),(0,i.kt)("p",null,"By setting a duration, we can control how long to highlight an element on the page before reverting the styling back. We can also make this an optional argument by setting a default value for it (e.g., 3 seconds)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/highlight-elements.spec.js\n// ...\n  async function highlight(element, duration = 2000) {\n    // store original style so it can be reset later\n    const originalStyle = await element.getAttribute("style");\n\n    // style element with callout (e.g., dashed red border)\n    await driver.executeScript(\n      "arguments[0].setAttribute(arguments[1], arguments[2])",\n      element,\n      "style",\n      "border: 2px solid red; border-style: dashed;"\n    );\n\n    // keep element highlighted for the duration and then revert\n    await driver.sleep(duration);\n    await driver.executeScript(\n      "arguments[0].setAttribute(arguments[1], arguments[2])",\n      element,\n      "style",\n      originalStyle\n    );\n  }\n// ...\n')),(0,i.kt)("p",null,"There are three things going on here."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"We store the style of the element so we can revert it back when we're done"),(0,i.kt)("li",{parentName:"ol"},"We change the style of the element so it visually stands out (e.g., a red dashed border)"),(0,i.kt)("li",{parentName:"ol"},"We revert the style of the element back after 3 seconds")),(0,i.kt)("p",null,"We're accomplishing the style change through JavaScript's ",(0,i.kt)("inlineCode",{parentName:"p"},"setAttribute")," function. And we're executing it with Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},"executeScript")," command."),(0,i.kt)("p",null,"Now to use this in our test is simple, we just prepend a ",(0,i.kt)("inlineCode",{parentName:"p"},"findElement")," command with a call to the ",(0,i.kt)("inlineCode",{parentName:"p"},"highlight")," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// filename: test/highlight-elements.spec.js\n// ...\n  it("highlights target element", async function() {\n    await driver.get("http://the-internet.herokuapp.com/large");\n    await highlight(await driver.findElement(By.id("sibling-2.3")));\n  });\n});\n')),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mocha")," from the command-line) here is what will happen."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Browser opens"),(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Find the element"),(0,i.kt)("li",{parentName:"ul"},"Change the styling of the element so it has a red dashed-line border"),(0,i.kt)("li",{parentName:"ul"},"Wait 3 seconds"),(0,i.kt)("li",{parentName:"ul"},"Revert the styling to remove the border"),(0,i.kt)("li",{parentName:"ul"},"Browser closes")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"If you wanted to take this a step further, you could leverage this approach along with an interactive debugger."),(0,i.kt)("p",null,"Alternatively, you could verify your locators by using a browser plugin like FireFinder."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"You can follow Brian on Twitter at ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/bbbco"},"@bbbco"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Brian D. Goad profile picture",src:a(93330).Z+"#author-img",title:"a title",width:"400",height:"400"})))}h.isMDXComponent=!0},22117:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:2,hide_sidebar:!0,publish_date:new Date("2016-11-23T00:00:00.000Z"),last_update:{date:new Date("2023-03-15T00:00:00.000Z")}},o=void 0,l={unversionedId:"highlight-elements/python",id:"highlight-elements/python",title:"python",description:"A Solution",source:"@site/docs/65-highlight-elements/python.md",sourceDirName:"65-highlight-elements",slug:"/highlight-elements/python",permalink:"/docs/highlight-elements/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/65-highlight-elements/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1678838400,formattedLastUpdatedAt:"Mar 15, 2023",frontMatter:{language:"python",level:2,hide_sidebar:!0,publish_date:"2016-11-23T00:00:00.000Z",last_update:{date:"2023-03-15T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By leveraging some simple JavaScript and CSS styling, we can highlight the element on the page that we're targeting. This way we can visually inspect it to make sure it is the one that we want."),(0,i.kt)("p",null,"Let's take a look at an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"For our initial setup let's pull in our requisite libraries (",(0,i.kt)("inlineCode",{parentName:"p"},"import unittest")," for our test framework, ",(0,i.kt)("inlineCode",{parentName:"p"},"from selenium import webdriver")," to drive the browser, and ",(0,i.kt)("inlineCode",{parentName:"p"},"import time")," to add a delay in our script so we're able to see the notification messages), declare our test class, and wire up some test ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: highlight_elements.py\nimport unittest\nfrom selenium import webdriver\nimport time\nfrom selenium.webdriver.common.by import By\n\nclass HighlightElements(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n\n    def tearDown(self):\n        self.driver.quit()\n\n# ...\n")),(0,i.kt)("p",null,"Now let's create a ",(0,i.kt)("inlineCode",{parentName:"p"},"highlight")," helper method that will accept a Selenium WebDriver ",(0,i.kt)("inlineCode",{parentName:"p"},"element")," and a time to wait (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"duration"),") as arguments."),(0,i.kt)("p",null,"By setting a duration, we can control how long to highlight an element on the page before reverting the styling back. And we can make this an optional argument by setting a default value for it (e.g., 3 seconds)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# filename: highlight_elements.py\n# ...\n    def highlight(self, element, duration=3):\n        driver = self.driver\n\n        # Store original style so it can be reset later\n        original_style = element.get_attribute("style")\n\n        # Style element with dashed red border\n        driver.execute_script(\n            "arguments[0].setAttribute(arguments[1], arguments[2])",\n            element,\n            "style",\n            "border: 2px solid red; border-style: dashed;")\n\n        # Keep element highlighted for a spell and then revert\n        if (duration > 0):\n            time.sleep(duration)\n            driver.execute_script(\n                "arguments[0].setAttribute(arguments[1], arguments[2])",\n                element,\n                "style",\n                original_style)\n\n# ...\n')),(0,i.kt)("p",null,"There are three things going on here."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"We store the style of the element so we can revert it back when we're done"),(0,i.kt)("li",{parentName:"ol"},"We change the style of the element so it visually stands out (e.g., a red dashed border)"),(0,i.kt)("li",{parentName:"ol"},"We revert the style of the element back after 3 seconds")),(0,i.kt)("p",null,"We're accomplishing the style change through JavaScript's ",(0,i.kt)("inlineCode",{parentName:"p"},"setAttribute")," function. And we're executing it with Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},"execute_script")," command."),(0,i.kt)("p",null,"Now to use this in our test is simple, we just prepend a ",(0,i.kt)("inlineCode",{parentName:"p"},"find_element")," command with a call to the ",(0,i.kt)("inlineCode",{parentName:"p"},"highlight")," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: highlight_element.py\n# ...\n    def test_example_1(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/large')\n        self.highlight(driver.find_element(By.ID,'sibling-2.3'))\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"python highlight_elements.py")," from the command-line) here is what will happen."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Browser opens"),(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Find the element"),(0,i.kt)("li",{parentName:"ul"},"Change the styling of the element so it has a red dashed-line border"),(0,i.kt)("li",{parentName:"ul"},"Wait 3 seconds"),(0,i.kt)("li",{parentName:"ul"},"Revert the styling to remove the border"),(0,i.kt)("li",{parentName:"ul"},"Browser closes")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"If you wanted to take this a step further, you could leverage this approach along with an interactive debugger."),(0,i.kt)("p",null,"Alternatively, you could verify your locators by using a browser plugin like FireFinder."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"This is a pseudo guest post from Brian Goad. I've adapted a blog post of his with permission. You can see the original ",(0,i.kt)("a",{parentName:"p",href:"http://swdandruby.wordpress.com/2013/07/19/did-i-select-the-right-element/"},"here"),".  You can follow him on Twitter at ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/bbbco"},"@bbbco")," and check out his testing blog ",(0,i.kt)("a",{parentName:"p",href:"http://swdandruby.wordpress.com/"},"here"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Brian D. Goad profile picture",src:a(93330).Z+"#author-img",title:"a title",width:"400",height:"400"})))}h.isMDXComponent=!0},74383:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:2,hide_sidebar:!0,publish_date:new Date("2014-09-11T00:00:00.000Z"),last_update:{date:new Date("2023-03-06T00:00:00.000Z")}},o=void 0,l={unversionedId:"highlight-elements/ruby",id:"highlight-elements/ruby",title:"ruby",description:"A Solution",source:"@site/docs/65-highlight-elements/ruby.md",sourceDirName:"65-highlight-elements",slug:"/highlight-elements/ruby",permalink:"/docs/highlight-elements/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/65-highlight-elements/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1678060800,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{language:"ruby",level:2,hide_sidebar:!0,publish_date:"2014-09-11T00:00:00.000Z",last_update:{date:"2023-03-06T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By leveraging some simple JavaScript and CSS styling, we can highlight the element on the page that we're targeting. This way we can visually inspect it to make sure it is the one that we want."),(0,i.kt)("p",null,"Let's take a look at an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"For our initial setup let's pull in the ",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," gem and wire up some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: highlight.rb\n\nrequire 'selenium-webdriver'\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Now let's create a ",(0,i.kt)("inlineCode",{parentName:"p"},"highlight")," helper method that will accept a Selenium WebDriver ",(0,i.kt)("inlineCode",{parentName:"p"},"element")," and a time to wait (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"duration"),") as arguments."),(0,i.kt)("p",null,"By setting a duration, we can control how long to highlight an element on the page before reverting the styling back. And we can make this an optional argument by setting a default (e.g., 3 seconds)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'def highlight(element, duration = 3)\n\n  # store original style so it can be reset later\n  original_style = element.attribute("style")\n\n  # style element with yellow border\n  @driver.execute_script(\n    "arguments[0].setAttribute(arguments[1], arguments[2])",\n    element,\n    "style",\n    "border: 2px solid red; border-style: dashed;")\n\n  # keep element highlighted for a spell and then revert\n  if duration > 0\n    sleep duration\n    @driver.execute_script(\n      "arguments[0].setAttribute(arguments[1], arguments[2])",\n      element,\n      "style",\n      original_style)\n  end\n\nend\n')),(0,i.kt)("p",null,"There are three things going on here."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"We store the style of the element so we can revert it back when we're done"),(0,i.kt)("li",{parentName:"ol"},"We change the style of the element so it visually stands out (e.g., a red dashed border)"),(0,i.kt)("li",{parentName:"ol"},"We revert the style of the element back after 3 seconds")),(0,i.kt)("p",null,"We're accomplishing the style change through JavaScript's ",(0,i.kt)("inlineCode",{parentName:"p"},"setAttribute")," function. And we're executing it with Selenium's ",(0,i.kt)("inlineCode",{parentName:"p"},"execute_script")," command."),(0,i.kt)("p",null,"Now to use this in our test is simple, we just prepend a ",(0,i.kt)("inlineCode",{parentName:"p"},"find_element")," action with the ",(0,i.kt)("inlineCode",{parentName:"p"},"highlight")," command."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/large'\n  highlight @driver.find_element(id: 'sibling-2.3')\nend\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If you were to save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby highlight.rb")," from the command-line), here is what you would see."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Load the page"),(0,i.kt)("li",{parentName:"ol"},"Find the element"),(0,i.kt)("li",{parentName:"ol"},"Change the styling of the element so it has a red dashed-line border"),(0,i.kt)("li",{parentName:"ol"},"Wait 3 seconds"),(0,i.kt)("li",{parentName:"ol"},"Revert the styling to remove the border")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"If you wanted to take this a step further, you could leverage this approach along with an interactive debugger."),(0,i.kt)("p",null,"Alternatively, you could verify your locators by using a browser plugin like FireFinder."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"You can follow Brian on Twitter at ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/bbbco"},"@bbbco"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Brian D. Goad profile picture",src:a(93330).Z+"#author-img",title:"a title",width:"400",height:"400"})))}h.isMDXComponent=!0},69497:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"blacklist/csharp",id:"blacklist/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/66-blacklist/csharp.md",sourceDirName:"66-blacklist",slug:"/blacklist/csharp",permalink:"/docs/blacklist/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/66-blacklist/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},57164:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"blacklist/java",id:"blacklist/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/66-blacklist/java.md",sourceDirName:"66-blacklist",slug:"/blacklist/java",permalink:"/docs/blacklist/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/66-blacklist/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},67177:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"blacklist/javascript",id:"blacklist/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/66-blacklist/javascript.md",sourceDirName:"66-blacklist",slug:"/blacklist/javascript",permalink:"/docs/blacklist/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/66-blacklist/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},54328:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"blacklist/python",id:"blacklist/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/66-blacklist/python.md",sourceDirName:"66-blacklist",slug:"/blacklist/python",permalink:"/docs/blacklist/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/66-blacklist/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},72322:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:3,hide_sidebar:!0,publish_date:new Date("2015-10-20T00:00:00.000Z"),last_update:{date:new Date("2023-04-06T00:00:00.000Z")}},o=void 0,l={unversionedId:"blacklist/ruby",id:"blacklist/ruby",title:"ruby",description:"A Solution",source:"@site/docs/66-blacklist/ruby.md",sourceDirName:"66-blacklist",slug:"/blacklist/ruby",permalink:"/docs/blacklist/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/66-blacklist/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680739200,formattedLastUpdatedAt:"Apr 6, 2023",frontMatter:{language:"ruby",level:3,hide_sidebar:!0,publish_date:"2015-10-20T00:00:00.000Z",last_update:{date:"2023-04-06T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"By leveraging a proxy server in our tests we can block the external resources we don't want to load by adding them to a blacklist."),(0,i.kt)("p",null,"Let's continue with an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: For a brief primer on proxy servers check out ",(0,i.kt)("a",{parentName:"strong",href:"/tips/64-limit-bandwidth"},"tip 64"),".")),(0,i.kt)("p",null,"To get started we'll need to download a copy of Browsermob Proxy (",(0,i.kt)("a",{parentName:"p",href:"http://bmp.lightbody.net/"},"link"),") and write our script. In it we'll pull in our requisite libraries (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"browsermob/proxy")," to control the proxy server, ",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to drive the browser, and ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," and it's matchers to perform assertions)."),(0,i.kt)("p",null,"After that, we'll configure the proxy server and wire up some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods. As part of ",(0,i.kt)("inlineCode",{parentName:"p"},"setup")," we'll want to configure the blacklist. To do that we'll add a regular expression to find the resource we want to block and the status code we'd like the resource to be changed to (e.g., blocking a resource from loading with a ",(0,i.kt)("inlineCode",{parentName:"p"},"200")," response code and having it return a ",(0,i.kt)("inlineCode",{parentName:"p"},"404")," instead)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: blacklist.rb\n\nrequire 'browsermob/proxy'\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef configure_proxy\n  server = BrowserMob::Proxy::Server.new('./browsermob-proxy-2.0-beta-9/bin/browsermob-proxy')\n  server.start\n  @proxy = server.create_proxy\n  profile = Selenium::WebDriver::Firefox::Profile.new\n  profile.proxy = @proxy.selenium_proxy\n  return profile\nend\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox, profile: configure_proxy\n  @proxy.blacklist('http:\\/\\/the-internet.herokuapp.com\\/slow_external', 404)\nend\n\ndef teardown\n  @driver.quit\n  @proxy.close\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Now we're ready to wire up our test. Let's use an example from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet")," that has a slow loading resource. It has a rogue ",(0,i.kt)("inlineCode",{parentName:"p"},"GET")," request that takes 30 seconds to load. You can see it ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/slow"},"here"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @proxy.new_har\n  @driver.get 'http://the-internet.herokuapp.com/slow'\n  entry = @proxy.har.entries.find { |e| e.request.url.include? 'slow_external' }\n  expect(entry).not_to be_nil\n  expect(entry.response.status).to eq(404)\nend\n")),(0,i.kt)("p",null,"We start the test by creating a new HTTP Archive (HAR) for tracking the page requests. We then load the example page, find the entry for the slow loading resource from the HAR, and assert that the response code for it is ",(0,i.kt)("inlineCode",{parentName:"p"},"404"),"."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby blacklist.rb")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Proxy server starts"),(0,i.kt)("li",{parentName:"ul"},"Proxy server session created"),(0,i.kt)("li",{parentName:"ul"},"Browser opens"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Find the entry we want from the HTTP Archive"),(0,i.kt)("li",{parentName:"ul"},"Check that the HTTP status code for the entry has the correct status code from the blacklist"),(0,i.kt)("li",{parentName:"ul"},"Browser closes"),(0,i.kt)("li",{parentName:"ul"},"Proxy session closes")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this helps you with blocking external resources that you don't want to load during testing."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},96634:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"broken-images/csharp",id:"broken-images/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/67-broken-images/csharp.md",sourceDirName:"67-broken-images",slug:"/broken-images/csharp",permalink:"/docs/broken-images/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/67-broken-images/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},27476:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"broken-images/java",id:"broken-images/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/67-broken-images/java.md",sourceDirName:"67-broken-images",slug:"/broken-images/java",permalink:"/docs/broken-images/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/67-broken-images/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},47435:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"broken-images/javascript",id:"broken-images/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/67-broken-images/javascript.md",sourceDirName:"67-broken-images",slug:"/broken-images/javascript",permalink:"/docs/broken-images/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/67-broken-images/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},51507:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"broken-images/python",id:"broken-images/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/67-broken-images/python.md",sourceDirName:"67-broken-images",slug:"/broken-images/python",permalink:"/docs/broken-images/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/67-broken-images/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},9002:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:3,hide_sidebar:!0,publish_date:new Date("2015-10-20T00:00:00.000Z"),last_update:{date:new Date("2023-04-06T00:00:00.000Z")}},o=void 0,l={unversionedId:"broken-images/ruby",id:"broken-images/ruby",title:"ruby",description:"A Solution",source:"@site/docs/67-broken-images/ruby.md",sourceDirName:"67-broken-images",slug:"/broken-images/ruby",permalink:"/docs/broken-images/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/67-broken-images/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680739200,formattedLastUpdatedAt:"Apr 6, 2023",frontMatter:{language:"ruby",level:3,hide_sidebar:!0,publish_date:"2015-10-20T00:00:00.000Z",last_update:{date:"2023-04-06T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example 1 - A Proxy Example",id:"example-1---a-proxy-example",level:2},{value:"Example 2 - An HTTP Library Example",id:"example-2---an-http-library-example",level:2},{value:"Example 3 - A JavaScript Example",id:"example-3---a-javascript-example",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Out of the box, Selenium is not equipped to handle this. But regardless, there are several ways to accomplish this."),(0,i.kt)("p",null,"We can use..."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a proxy server"),(0,i.kt)("li",{parentName:"ul"},"an HTTP library"),(0,i.kt)("li",{parentName:"ul"},"JavaScript")),(0,i.kt)("p",null,"Lets look at an example of each."),(0,i.kt)("h2",{id:"example-1---a-proxy-example"},"Example 1 - A Proxy Example"),(0,i.kt)("p",null,"In this example we'll use Browsermob Proxy. For a primer on what this is and how to use it see ",(0,i.kt)("a",{parentName:"p",href:"/tips/64-limit-bandwidth"},"tip 64"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: broken_image_1.rb\n\nrequire 'browsermob/proxy'\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef configure_proxy\n  server = BrowserMob::Proxy::Server.new('./browsermob-proxy-2.0-beta-9/bin/browsermob-proxy')\n  server.start\n  @proxy = server.create_proxy\n  profile = Selenium::WebDriver::Firefox::Profile.new\n  profile.proxy = @proxy.selenium_proxy\n  return profile\nend\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox, profile: configure_proxy\nend\n\ndef teardown\n  @driver.quit\n  @proxy.close\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n\nrun do\n  @proxy.new_har\n\n  @driver.get 'http://the-internet.herokuapp.com/broken_images'\n\n  all_images = @driver.find_elements(tag_name: 'img')\n\n  broken_images = []\n  all_images.each do |img|\n    broken_images << @proxy.har.entries.find do |entry|\n      entry.request.url == img.attribute('src') && entry.response.status == 404\n    end\n  end\n\n  expect(broken_images).to be_empty\nend\n")),(0,i.kt)("p",null,"If you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby broken_image_1.rb"),") here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Proxy server starts"),(0,i.kt)("li",{parentName:"ul"},"Proxy server session created"),(0,i.kt)("li",{parentName:"ul"},"Browser opens"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Iterate through each image in the HTTP Archive and see if it has a ",(0,i.kt)("inlineCode",{parentName:"li"},"404")," status code"),(0,i.kt)("li",{parentName:"ul"},"Store each broken image in a collection"),(0,i.kt)("li",{parentName:"ul"},"Check that the broken images collection is empty")),(0,i.kt)("h2",{id:"example-2---an-http-library-example"},"Example 2 - An HTTP Library Example"),(0,i.kt)("p",null,"For this example, we'll use a simple HTTP library called ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/rest-client/rest-client"},(0,i.kt)("inlineCode",{parentName:"a"},"rest-client")),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: broken_image_2.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n\nrun do\n  require 'rest-client'\n\n  @driver.get 'http://the-internet.herokuapp.com/broken_images'\n\n  all_images = @driver.find_elements(tag_name: 'img')\n\n  all_images.each do |img|\n    RestClient.get img.attribute('src') do |response, request, result|\n      expect(response.code).to eq 200\n    end\n  end\n\nend\n")),(0,i.kt)("p",null,"If you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby broken_images_2.rb")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Find all images on the page"),(0,i.kt)("li",{parentName:"ul"},"Iterate through each image"),(0,i.kt)("li",{parentName:"ul"},"Perform a ",(0,i.kt)("inlineCode",{parentName:"li"},"GET")," request on the image and grab it's response status code"),(0,i.kt)("li",{parentName:"ul"},"Assert that the status code is ",(0,i.kt)("inlineCode",{parentName:"li"},"200")),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("p",null,"By using an HTTP library we get the same outcome as we saw with a proxy server. There are additional requests being made but it's substantially faster since it has less overhead."),(0,i.kt)("h2",{id:"example-3---a-javascript-example"},"Example 3 - A JavaScript Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: broken_image_3.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n\nrun do\n  @driver.get 'http://the-internet.herokuapp.com/broken_images'\n\n  all_images = @driver.find_elements tag_name: 'img'\n\n  broken_images = all_images.reject do |image|\n    @driver.execute_script(\n      \"return arguments[0].complete && \\\n        typeof arguments[0].naturalWidth != \\\"undefined\\\" && \\\n        arguments[0].naturalWidth > 0\",\n      image)\n  end\n\n  expect(broken_images).to be_empty\nend\n")),(0,i.kt)("p",null,"If you save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"broken_image_3.rb")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Find all images on the page"),(0,i.kt)("li",{parentName:"ul"},"Iterate through each image and inspect that it finished loading and has a defined width"),(0,i.kt)("li",{parentName:"ul"},"Store images that fail inspection in a collection"),(0,i.kt)("li",{parentName:"ul"},"Assert that the collection is empty")),(0,i.kt)("p",null,"This is the leanest approach since it requires no additional setup or extra requests. It's just a matter of executing some JavaScript code to inspect the images."),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Your circumstance may vary, so choose the approach that works best for you and your team."),(0,i.kt)("p",null,"A big thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/bbbco"},"Brian Goad")," for the JavaScript solution and pointing me towards ",(0,i.kt)("a",{parentName:"p",href:"http://stackoverflow.com/questions/16784534/find-broken-images-in-page-image-replace-by-another-image/"},"the StackOverflow post where he first came across this"),"."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},35060:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"load-testing-revisited/csharp",id:"load-testing-revisited/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/68-load-testing-revisited/csharp.md",sourceDirName:"68-load-testing-revisited",slug:"/load-testing-revisited/csharp",permalink:"/docs/load-testing-revisited/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/68-load-testing-revisited/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},93462:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"load-testing-revisited/java",id:"load-testing-revisited/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/68-load-testing-revisited/java.md",sourceDirName:"68-load-testing-revisited",slug:"/load-testing-revisited/java",permalink:"/docs/load-testing-revisited/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/68-load-testing-revisited/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},71270:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"load-testing-revisited/javascript",id:"load-testing-revisited/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/68-load-testing-revisited/javascript.md",sourceDirName:"68-load-testing-revisited",slug:"/load-testing-revisited/javascript",permalink:"/docs/load-testing-revisited/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/68-load-testing-revisited/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},49203:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"load-testing-revisited/python",id:"load-testing-revisited/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/68-load-testing-revisited/python.md",sourceDirName:"68-load-testing-revisited",slug:"/load-testing-revisited/python",permalink:"/docs/load-testing-revisited/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/68-load-testing-revisited/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},20199:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:3,hide_sidebar:!0,publish_date:new Date("2014-10-08T00:00:00.000Z"),last_update:{date:new Date("2023-04-06T00:00:00.000Z")}},o=void 0,l={unversionedId:"load-testing-revisited/ruby",id:"load-testing-revisited/ruby",title:"ruby",description:"A Solution",source:"@site/docs/68-load-testing-revisited/ruby.md",sourceDirName:"68-load-testing-revisited",slug:"/load-testing-revisited/ruby",permalink:"/docs/load-testing-revisited/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/68-load-testing-revisited/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680739200,formattedLastUpdatedAt:"Apr 6, 2023",frontMatter:{language:"ruby",level:3,hide_sidebar:!0,publish_date:"2014-10-08T00:00:00.000Z",last_update:{date:"2023-04-06T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"JMeter is the defacto open source load testing solution that is used in industry. The hardest part of using it is authoring the test cases (e.g., in the JMeter GUI). Thankfully we can sidestep that by repurposing our Selenium tests into initial JMeter scripts. To do this we'll need a proxy server, the HTTP Archive (HAR) each test generates, and a HAR to JMeter XML (JMX) converter."),(0,i.kt)("p",null,"When we're done, we'll have working JMeter test cases that we can modify and run (either from the GUI or the command-line)."),(0,i.kt)("p",null,"Let's dig in with an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"We'll first need to ",(0,i.kt)("inlineCode",{parentName:"p"},"require")," our requisite libraries (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," for Selenium, ",(0,i.kt)("inlineCode",{parentName:"p"},"browsermob/proxy")," for our proxy, and ",(0,i.kt)("inlineCode",{parentName:"p"},"convert")," to convert -- a local file to convert the HAR to JMX)."),(0,i.kt)("p",null,"Then we'll need to launch the proxy (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"configure_proxy"),"), connect it to a browser profile (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"browser_profile"),"), and tell Selenium to use this as it launches the browser (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: har.rb\n\nrequire 'selenium-webdriver'\nrequire 'browsermob/proxy'\nrequire_relative 'convert'\n\ndef configure_proxy\n  proxy_binary = BrowserMob::Proxy::Server.new('./browsermob-proxy-2.0-beta-9/bin/browsermob-proxy')\n  proxy_binary.start\n  proxy_binary.create_proxy\nend\n\ndef browser_profile\n  profile = Selenium::WebDriver::Firefox::Profile.new\n  profile.proxy = @proxy.selenium_proxy\n  profile\nend\n\ndef setup\n  @proxy = configure_proxy\n  @driver = Selenium::WebDriver.for :firefox, profile: browser_profile\nend\n")),(0,i.kt)("p",null,"Now we need to make sure each test run closes the proxy and cleans up the browser (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),"). We'll also want to add a helper method to capture the traffic and wire everything up with a central ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"def teardown\n  @driver.quit\n  @proxy.close\nend\n\ndef capture_traffic\n  @proxy.new_har\n  yield\n  @proxy.har\nend\n\ndef run\n  setup\n  @har = capture_traffic { yield }\n  teardown\nend\n")),(0,i.kt)("p",null,"Now it's a simple matter of specifying the Selenium actions and outputting the HAR to a file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/dynamic_loading/2'\n  @driver.find_element(css: '#start button').click\n  Selenium::WebDriver::Wait.new(timeout: 8).until do\n    @driver.find_element(css: '#finish')\n  end\nend\n\n@har.save_to './selenium.har'\n")),(0,i.kt)("p",null,"If we save this and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby har.rb")," from the command-line) it will launch the browser, run the Selenium commands, and create a new file called ",(0,i.kt)("inlineCode",{parentName:"p"},"selenium.har")," (or overwrite it if there's one there already)."),(0,i.kt)("p",null,"Now we're ready to convert the HAR file to JMeter XML. To do that, we can use ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/flood-io/ruby-jmeter/blob/master/examples/basic_har.rb"},"the basic HAR converter")," that is available in the examples of ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/flood-io/ruby-jmeter"},"the ",(0,i.kt)("inlineCode",{parentName:"a"},"ruby-jmeter")," gem")," (thanks to the fine folks at ",(0,i.kt)("a",{parentName:"p",href:"https://flood.io/"},"flood.io"),")."),(0,i.kt)("p",null,"With a few modifications, it's ready for our needs."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: convert.rb\n\nrequire 'ruby-jmeter'\nrequire 'recursive-open-struct'\nrequire 'json'\nrequire 'pry-debugger'\n\nmodule HARtoJMX\n  def self.convert(file)\n    har = RecursiveOpenStruct.new(JSON.parse(File.open(file).read), recurse_over_arrays: true)\n\n    test do\n      cache\n\n      cookies\n\n      header [\n        { name: 'Accept-Encoding', value: 'gzip,deflate,sdch' },\n        { name: 'Accept', value: 'text/javascript, text/html, application/xml, text/xml, */*' }\n      ]\n\n      threads count: 1 do\n\n        har.log.entries.collect {|entry| entry.pageref }.uniq.each do |page|\n\n          transaction name: page do\n            har.log.entries.select {|request| request.pageref == page }.each do |entry|\n              next unless entry.request.url =~ /http/\n              params = entry.request.postData && entry.request.postData.params.collect {|param| [param.name, param.value] }.flatten\n              self.send entry.request.to_h.values.first.downcase, entry.request.url, fill_in: Hash[*params] do\n                with_xhr if entry.request.headers.to_s =~ /XMLHttpRequest/\n              end\n            end\n          end\n        end\n      end\n    end.jmx\n  end\nend\n")),(0,i.kt)("p",null,"Now let's put it to use in our Selenium script."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: har.rb\n\n...\n\nHARtoJMX.convert 'selenium.har'\n# the default filename output is `jmeter.jmx`\n")),(0,i.kt)("p",null,"Assuming you've ",(0,i.kt)("a",{parentName:"p",href:"http://jmeter.apache.org/download_jmeter.cgi"},"downloaded a copy of JMeter")," you're ready to run your load test."),(0,i.kt)("p",null,"To execute it from the command-line you'll need to specify the path to the JMeter binary executable, a couple of arguments, and the path to the JMX file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"./apache-jmeter-2.11/bin/jmeter -n -t ./jmeter.jmx\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"-n")," tells JMeter ot run in non-GUI mode, and ",(0,i.kt)("inlineCode",{parentName:"p"},"-t")," is used to specify the path to the JMX file."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Selenium runs the test in Firefox while connected to the proxy server"),(0,i.kt)("li",{parentName:"ul"},"The HTTP Archive (HAR) is exported to a file on disk"),(0,i.kt)("li",{parentName:"ul"},"The HAR file is converted to a JMeter XML (JMX) file"),(0,i.kt)("li",{parentName:"ul"},"JMeter is launched from the command-line and runs using the new JMX file")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Alternatively, you could open up the JMeter GUI, load the JMX file, and add on to it/reconfigure it/etc. This is a ",(0,i.kt)("em",{parentName:"p"},"much")," better place to start from since it saves you loads of up front busy work creating the load test from scratch."),(0,i.kt)("p",null,"From here, it would be pretty trivial to add in a data set (e.g., ",(0,i.kt)("a",{parentName:"p",href:"https://wiki.apache.org/jmeter/JMeterFAQ#How_do_I_parameterize_my_JMeter_test_cases.3F"},"parameterize the test case"),"), increase the number of concurrent users, and change all kinds of simulated user behavior."),(0,i.kt)("p",null,"If you go this route, be sure to take a look at the JMeter Wiki. It's got loads of good information."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},96143:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2020-11-30T00:00:00.000Z"),last_update:{date:new Date("2020-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"safari/csharp",id:"safari/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/69-safari/csharp.md",sourceDirName:"69-safari",slug:"/safari/csharp",permalink:"/docs/safari/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/69-safari/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1606694400,formattedLastUpdatedAt:"Nov 30, 2020",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2020-11-30T00:00:00.000Z",last_update:{date:"2020-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},96437:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:1,hide_sidebar:!0,publish_date:new Date("2015-08-25T00:00:00.000Z"),last_update:{date:new Date("2023-04-03T00:00:00.000Z")}},o=void 0,l={unversionedId:"safari/java",id:"safari/java",title:"java",description:"A Solution",source:"@site/docs/69-safari/java.md",sourceDirName:"69-safari",slug:"/safari/java",permalink:"/docs/safari/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/69-safari/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:168048e4,formattedLastUpdatedAt:"Apr 3, 2023",frontMatter:{language:"java",level:1,hide_sidebar:!0,publish_date:"2015-08-25T00:00:00.000Z",last_update:{date:"2023-04-03T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Running your Selenium tests on a different browser tends to require additional setup, and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SeleniumHQ/selenium/wiki/SafariDriver"},"SafariDriver")," is no exception."),(0,i.kt)("p",null,"The following example will go through how to do it and make sure it's working."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Run the following command on the terminal:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$  /usr/bin/safaridriver --enable")),(0,i.kt)("p",null,"After that, make sure it's enabled. To do that:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"open ",(0,i.kt)("inlineCode",{parentName:"li"},"Safari")),(0,i.kt)("li",{parentName:"ol"},"go to ",(0,i.kt)("inlineCode",{parentName:"li"},"Develop")),(0,i.kt)("li",{parentName:"ol"},"click on ",(0,i.kt)("inlineCode",{parentName:"li"},"Allow Remote Automations"))),(0,i.kt)("p",null,"Let's wire up a simple test so we can see that everything works as expected."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"Let's wire up a simple test so we can see that everything works as expected."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.safari.SafariDriver;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.hamcrest.MatcherAssert.assertThat;\n\npublic class Safari {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new SafariDriver();\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n\n    @Test\n    public void dropdownTest() {\n        driver.get("http://the-internet.herokuapp.com/");\n        String title = driver.getTitle();\n        assertThat(title, is(equalTo("The Internet")));\n    }\n\n}\n')),(0,i.kt)("p",null,"When we run the test, we should see a successful communication between Selenium and Safari."),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Keep in mind that Safari can load without you realizing it (since it doesn't obtain focus when launching with Selenium). When that happens you'll need to switch to Safari in order to see what the test is doing."),(0,i.kt)("p",null,"And if you're running Safari on a remote node (or set of nodes), you'll need to install and enable the SafariDriver browser extension on each of them."),(0,i.kt)("p",null,"Thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/RomanIsko"},"Roman Isko")," for contributing the initial code for this tip."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."))}h.isMDXComponent=!0},73915:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2020-11-30T00:00:00.000Z"),last_update:{date:new Date("2020-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"safari/javascript",id:"safari/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/69-safari/javascript.md",sourceDirName:"69-safari",slug:"/safari/javascript",permalink:"/docs/safari/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/69-safari/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1606694400,formattedLastUpdatedAt:"Nov 30, 2020",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2020-11-30T00:00:00.000Z",last_update:{date:"2020-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},60733:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2020-11-30T00:00:00.000Z"),last_update:{date:new Date("2020-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"safari/python",id:"safari/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/69-safari/python.md",sourceDirName:"69-safari",slug:"/safari/python",permalink:"/docs/safari/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/69-safari/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1606694400,formattedLastUpdatedAt:"Nov 30, 2020",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2020-11-30T00:00:00.000Z",last_update:{date:"2020-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},7722:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:1,hide_sidebar:!0,publish_date:new Date("2015-08-25T00:00:00.000Z"),last_update:{date:new Date("2023-03-13T00:00:00.000Z")}},o=void 0,l={unversionedId:"safari/ruby",id:"safari/ruby",title:"ruby",description:"A Solution",source:"@site/docs/69-safari/ruby.md",sourceDirName:"69-safari",slug:"/safari/ruby",permalink:"/docs/safari/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/69-safari/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1678665600,formattedLastUpdatedAt:"Mar 13, 2023",frontMatter:{language:"ruby",level:1,hide_sidebar:!0,publish_date:"2015-08-25T00:00:00.000Z",last_update:{date:"2023-03-13T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Running your Selenium tests on a different browser tends to require additional setup, and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SeleniumHQ/selenium/wiki/SafariDriver"},"SafariDriver")," is no exception."),(0,i.kt)("p",null,"The following example will go through how to do it and make sure it's working."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Run the following command on the terminal:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$  /usr/bin/safaridriver --enable")),(0,i.kt)("p",null,"After that, make sure it's enabled. To do that:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"open ",(0,i.kt)("inlineCode",{parentName:"li"},"Safari")),(0,i.kt)("li",{parentName:"ol"},"go to ",(0,i.kt)("inlineCode",{parentName:"li"},"Develop")),(0,i.kt)("li",{parentName:"ol"},"click on ",(0,i.kt)("inlineCode",{parentName:"li"},"Allow Remote Automations"))),(0,i.kt)("p",null,"Now if we open up an interactive Ruby terminal (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"irb"),") and launch a Selenium instance, here's what we'd see."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"> irb\nirb(main):001:0> require 'selenium-webdriver'\nirb(main):002:0> driver = Selenium::WebDriver.for :safari\n")),(0,i.kt)("p",null,"A successful communication between Safari and the Selenium Driver extension has occurred."),(0,i.kt)("p",null,"Now let's wire up a simple test so we can see that everything works as expect."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: safari.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :safari\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n\nrun do\n  @driver.get 'http://the-internet.herokuapp.com'\n  expect(@driver.title).to eql 'The Internet'\nend\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save the file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby safari.rb")," from the command-line), here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Safari opens"),(0,i.kt)("li",{parentName:"ul"},"The home page of ",(0,i.kt)("a",{parentName:"li",href:"http://github.com/tourdedave/the-internet"},"the-internet")," loads"),(0,i.kt)("li",{parentName:"ul"},"The title of the page is checked to make sure it's what we expect"),(0,i.kt)("li",{parentName:"ul"},"Safari closes")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Keep in mind that Safari can load without you realizing it (since it doesn't obtain focus when launching with Selenium). When that happens you'll need to switch to Safari in order to see what the test is doing."),(0,i.kt)("p",null,"And if you're running Safari on a remote node (or set of nodes), you'll need to install and enable the SafariDriver browser extension on each of them."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."))}h.isMDXComponent=!0},61664:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"use-a-page-object/csharp",id:"use-a-page-object/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/7-use-a-page-object/csharp.md",sourceDirName:"7-use-a-page-object",slug:"/use-a-page-object/csharp",permalink:"/docs/use-a-page-object/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/7-use-a-page-object/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},60969:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"use-a-page-object/java",id:"use-a-page-object/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/7-use-a-page-object/java.md",sourceDirName:"7-use-a-page-object",slug:"/use-a-page-object/java",permalink:"/docs/use-a-page-object/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/7-use-a-page-object/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},99427:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"use-a-page-object/javascript",id:"use-a-page-object/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/7-use-a-page-object/javascript.md",sourceDirName:"7-use-a-page-object",slug:"/use-a-page-object/javascript",permalink:"/docs/use-a-page-object/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/7-use-a-page-object/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},45742:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"use-a-page-object/python",id:"use-a-page-object/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/7-use-a-page-object/python.md",sourceDirName:"7-use-a-page-object",slug:"/use-a-page-object/python",permalink:"/docs/use-a-page-object/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/7-use-a-page-object/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},45418:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:2,hide_sidebar:!0,publish_date:new Date("2013-07-09T00:00:00.000Z"),last_update:{date:new Date("2023-03-08T00:00:00.000Z")}},o=void 0,l={unversionedId:"use-a-page-object/ruby",id:"use-a-page-object/ruby",title:"ruby",description:"A Solution",source:"@site/docs/7-use-a-page-object/ruby.md",sourceDirName:"7-use-a-page-object",slug:"/use-a-page-object/ruby",permalink:"/docs/use-a-page-object/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/7-use-a-page-object/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1678233600,formattedLastUpdatedAt:"Mar 8, 2023",frontMatter:{language:"ruby",level:2,hide_sidebar:!0,publish_date:"2013-07-09T00:00:00.000Z",last_update:{date:"2023-03-08T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Enter Page Objects."),(0,i.kt)("p",null,"Rather than write your test code directly against your app, you can model the behavior of your application into\nsimple objects -- and write your tests against them instead. That way when your app changes and your tests break,\nyou only have to update your test code in one place to fix it."),(0,i.kt)("p",null,"And with this approach, we not only get the benefit of controlled chaos, we also get the benefit of reusable behavior."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"In this example we are going to take the following sample code and upgrade it with the use of a Page Object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\n  @base_url = 'http://the-internet.herokuapp.com/dynamic_loading/2'\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n\ndef wait_for(seconds=10)\n  Selenium::WebDriver::Wait.new(:timeout => seconds).until { yield }\nend\n\nrun do\n    @driver.get @base_url\n    @driver.find_element(css: '#start button').click\n    wait_for { @driver.find_element(css: '#finish').displayed? }\n    expect(@driver.find_element(css: '#finish').text).to eql('Hello World!')\nend\n")),(0,i.kt)("p",null,"The first order of business is pretty simple. We keep our setup, teardown, and run actions mostly the same.\nBut we change the base_url from an instance variable to an environment variable. Doing this will enable\nus to access it from anywhere in our test suite."),(0,i.kt)("p",null,"While the usage of environment variables can be a slippery slope, this is an ideal candidate for it since\nit effects the overall behavior of the suite."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\n  ENV['base_url'] = 'http://the-internet.herokuapp.com/dynamic_loading/2'\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Next we create a Page Object for the Dynamic Loading page by using a standard Ruby class and add some relevant\nbits to it."),(0,i.kt)("p",null,"At the top of it we pull out the CSS locators used in our test steps and put them into helpfully\nnamed constants to use instead. And instead of using the two part 'how', 'what' approach, we are\nusing a hash to store the locator type and its value."),(0,i.kt)("p",null,"Next we use ",(0,i.kt)("inlineCode",{parentName:"p"},"attr_reader")," to create a place to store the Selenium WebDriver instance for use throughout the class."),(0,i.kt)("p",null,"The class expects an argument (e.g. the Selenium WebDriver instance) which is received through the initialize method.\nInside the initialize method we take care of passing the Selenium object into the ",(0,i.kt)("inlineCode",{parentName:"p"},"attr_reader")," object along with\nvisiting the page and verifying that we are in the correct place. All of these things will execute in order when\nthis class is instantiated."),(0,i.kt)("p",null,"We then break out each of the test steps into methods that execute the behavior specific to the page while also\nswapping out the hard-coded CSS locators for our new CSS locator constant variables."),(0,i.kt)("p",null,"At the bottom of the class we have private helper methods. These methods aren't necessarily specific to the page\nthis class represents, but they are useful for it to function. So we want to access them within the class, but\nmake it so they're not available outside of the class. Using the private classification gets us this behavior nicely."),(0,i.kt)("p",null,"And lastly, we update the ",(0,i.kt)("inlineCode",{parentName:"p"},"displayed?")," private method to take a single argument for a 'locator' object (e.g. one of\nour CSS locator constant variables)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"class DynamicLoading\n\n  START_BUTTON = { css: '#start button' }\n  FINISH_BUTTON = { css: '#finish' }\n\n  attr_reader :driver\n\n  def initialize(driver)\n    @driver = driver\n    visit\n    verify_page\n  end\n\n  def visit\n    driver.get ENV['base_url']\n  end\n\n  def start\n    driver.find_element(START_BUTTON).click\n  end\n\n  def finish_present?\n    wait_for { @driver.find_element(FINISH_BUTTON).displayed? }\n  end\n\n  def finish_text\n    driver.find_element(FINISH_BUTTON).text\n  end\n\n  private\n\n    def verify_page\n      expect(driver.title).to eql('The Internet')\n    end\n\n    def wait_for(seconds=10)\n      Selenium::WebDriver::Wait.new(:timeout => seconds).until { yield }\n    end\n\nend\n")),(0,i.kt)("p",null,"With our new Page Object in hand, our run action cleans up considerably. Making it more succinct and readable."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  dynamic_loading = DynamicLoading.new(@driver)\n  dynamic_loading.start\n  dynamic_loading.finish_present?\n  expect(dynamic_loading.finish_text).to eql('Hello World!')\nend\n")),(0,i.kt)("p",null,"It's worth noting that while we are peforming an assertion in the Page Object in our ",(0,i.kt)("inlineCode",{parentName:"p"},"verify_page"),"\naction ",(0,i.kt)("strong",{parentName:"p"},"assertions should only be performed in your test scripts")," (just like the run action above).\nUsing a ",(0,i.kt)("inlineCode",{parentName:"p"},"verify_page")," action is just a helpful exception to the rule."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Load Dynamic Loading page on The Internet"),(0,i.kt)("li",{parentName:"ul"},"Click on start"),(0,i.kt)("li",{parentName:"ul"},"Wait for the finish message to appear"),(0,i.kt)("li",{parentName:"ul"},"Grab the text from it"),(0,i.kt)("li",{parentName:"ul"},"Assert that the text we want is within it")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip has helped you wade into the waters of Page Objects in Selenium."),(0,i.kt)("p",null,"Stay tuned for a future tip where we implement a Base Page Object class to abstract things even further\nand roll our own Domain Specific Language (DSL) for our test suite."),(0,i.kt)("p",null,"Until then, Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by\nthousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect\nfor writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool,\nManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at\nnumerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},14815:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2023-05-26T00:00:00.000Z"),last_update:{date:new Date("2023-05-26T00:00:00.000Z")}},o=void 0,l={unversionedId:"mobile-testing-pyramid/csharp",id:"mobile-testing-pyramid/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/71-mobile-testing-pyramid/csharp.md",sourceDirName:"71-mobile-testing-pyramid",slug:"/mobile-testing-pyramid/csharp",permalink:"/docs/mobile-testing-pyramid/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/71-mobile-testing-pyramid/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1685059200,formattedLastUpdatedAt:"May 26, 2023",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2023-05-26T00:00:00.000Z",last_update:{date:"2023-05-26T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},78283:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2023-05-26T00:00:00.000Z"),last_update:{date:new Date("2023-05-26T00:00:00.000Z")}},o=void 0,l={unversionedId:"mobile-testing-pyramid/java",id:"mobile-testing-pyramid/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/71-mobile-testing-pyramid/java.md",sourceDirName:"71-mobile-testing-pyramid",slug:"/mobile-testing-pyramid/java",permalink:"/docs/mobile-testing-pyramid/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/71-mobile-testing-pyramid/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1685059200,formattedLastUpdatedAt:"May 26, 2023",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2023-05-26T00:00:00.000Z",last_update:{date:"2023-05-26T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},62997:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2023-05-26T00:00:00.000Z"),last_update:{date:new Date("2023-05-26T00:00:00.000Z")}},o=void 0,l={unversionedId:"mobile-testing-pyramid/javascript",id:"mobile-testing-pyramid/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/71-mobile-testing-pyramid/javascript.md",sourceDirName:"71-mobile-testing-pyramid",slug:"/mobile-testing-pyramid/javascript",permalink:"/docs/mobile-testing-pyramid/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/71-mobile-testing-pyramid/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1685059200,formattedLastUpdatedAt:"May 26, 2023",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2023-05-26T00:00:00.000Z",last_update:{date:"2023-05-26T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},41668:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2023-05-26T00:00:00.000Z"),last_update:{date:new Date("2023-05-26T00:00:00.000Z")}},o=void 0,l={unversionedId:"mobile-testing-pyramid/python",id:"mobile-testing-pyramid/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/71-mobile-testing-pyramid/python.md",sourceDirName:"71-mobile-testing-pyramid",slug:"/mobile-testing-pyramid/python",permalink:"/docs/mobile-testing-pyramid/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/71-mobile-testing-pyramid/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1685059200,formattedLastUpdatedAt:"May 26, 2023",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2023-05-26T00:00:00.000Z",last_update:{date:"2023-05-26T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community ",(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE"))),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},45774:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:2,hide_sidebar:!0,publish_date:new Date("2017-08-10T00:00:00.000Z"),last_update:{date:new Date("2023-03-15T00:00:00.000Z")}},o=void 0,l={unversionedId:"mobile-testing-pyramid/ruby",id:"mobile-testing-pyramid/ruby",title:"ruby",description:"A Solution",source:"@site/docs/71-mobile-testing-pyramid/ruby.md",sourceDirName:"71-mobile-testing-pyramid",slug:"/mobile-testing-pyramid/ruby",permalink:"/docs/mobile-testing-pyramid/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/71-mobile-testing-pyramid/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1678838400,formattedLastUpdatedAt:"Mar 15, 2023",frontMatter:{language:"ruby",level:2,hide_sidebar:!0,publish_date:"2017-08-10T00:00:00.000Z",last_update:{date:"2023-03-15T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Desktop browsers: mobile testing on desktop browsers",id:"desktop-browsers-mobile-testing-on-desktop-browsers",level:3},{value:"Pros",id:"pros",level:4},{value:"Cons",id:"cons",level:4},{value:"Mobile simulators/emulators: closer to the actual mobile experience...",id:"mobile-simulatorsemulators-closer-to-the-actual-mobile-experience",level:3},{value:"Pros",id:"pros-1",level:4},{value:"Cons",id:"cons-1",level:4},{value:"Real devices: the real thing...",id:"real-devices-the-real-thing",level:3},{value:"Pros",id:"pros-2",level:4},{value:"Cons",id:"cons-2",level:4},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Mobile testing can be complex, and not only has to cover the UI aspects, but also compatibility of hardware, network connectivity, etc. A few examples of mobile testing challenges are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Layout issues"),(0,i.kt)("li",{parentName:"ul"},"Device incompatibility"),(0,i.kt)("li",{parentName:"ul"},"OS issues"),(0,i.kt)("li",{parentName:"ul"},"Network issues"),(0,i.kt)("li",{parentName:"ul"},"Authentication issues")),(0,i.kt)("p",null,"Based on my personal mobile testing experience, I came up with the ",(0,i.kt)("strong",{parentName:"p"},"Mobile Test Pyramid")," strategy. Of course, it was inspired by the test pyramid of Mike Cohn ('Succeeding with Agile', 2009). But this doesn't quite cover the detail that is needed for a good mobile testing strategy."),(0,i.kt)("p",null,"The mobile test pyramid has 3 levels:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Real devices"),(0,i.kt)("li",{parentName:"ul"},"Mobile simulators & emulators"),(0,i.kt)("li",{parentName:"ul"},"Desktop browsers (using mobile simulation)")),(0,i.kt)("p",null,"Identical to the generic test pyramid, the broader the layer in the pyramid, the more tests you should have which cover a wider range of complexity."),(0,i.kt)("p",null,"Here are the focus areas for each layer, along with their pros and cons as I see them."),(0,i.kt)("h3",{id:"desktop-browsers-mobile-testing-on-desktop-browsers"},"Desktop browsers: mobile testing on desktop browsers"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Focus area"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Functional system testing"),(0,i.kt)("td",{parentName:"tr",align:null},"Isolated browser tests performing full functional validations")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Responsive design"),(0,i.kt)("td",{parentName:"tr",align:null},"Resizing browsers and toggling user agents")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Cross-browser"),(0,i.kt)("td",{parentName:"tr",align:null},"Use equivalent desktop browsers")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Overall visual layout"),(0,i.kt)("td",{parentName:"tr",align:null},"No extensive visual checks because the rendering is different than devices")))),(0,i.kt)("h4",{id:"pros"},"Pros"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fast execution: Matter of milliseconds to launch a browser, also headless execution is possible."),(0,i.kt)("li",{parentName:"ul"},"Scalable: Easily set up 10+ browser instances per machine."),(0,i.kt)("li",{parentName:"ul"},"Cross platform: Ability to use browsers on different operating systems.")),(0,i.kt)("h4",{id:"cons"},"Cons"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Mobile simulation uses the desktop browser engine: Mobile simulation in desktop browsers is still using the desktop browser."),(0,i.kt)("li",{parentName:"ul"},"No native integration: No native keyboards, incoming calls, etc."),(0,i.kt)("li",{parentName:"ul"},"Just not a device... Incredibly fast, but still not a real device.")),(0,i.kt)("h3",{id:"mobile-simulatorsemulators-closer-to-the-actual-mobile-experience"},"Mobile simulators/emulators: closer to the actual mobile experience..."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: Only applicable for iOS and Android.")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Focus area"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Functional end-user flows"),(0,i.kt)("td",{parentName:"tr",align:null},"Click paths throughout the application")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Native API integration"),(0,i.kt)("td",{parentName:"tr",align:null},"GPS injection, file attachments, incoming calls etc.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Visuals (vanilla only)"),(0,i.kt)("td",{parentName:"tr",align:null},"Use equivalent desktop browsers")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Overall visual layout"),(0,i.kt)("td",{parentName:"tr",align:null},"Emulators are limited to vanilla versions")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Touch interactions"),(0,i.kt)("td",{parentName:"tr",align:null},"Touch interactions such as swipe and tap comes closer to the user experience of a device than browser emulation")))),(0,i.kt)("h4",{id:"pros-1"},"Pros"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Easy to set up: Simulators/emulators are easy to set up, just download, install, and run."),(0,i.kt)("li",{parentName:"ul"},"Scalable: Virtualization means scalable and also running in parallel on one machine."),(0,i.kt)("li",{parentName:"ul"},"Native API integration: Ability to test native APIs such as incoming calls and GPS injection."),(0,i.kt)("li",{parentName:"ul"},"Simulators or Intel-based emulators are fast: Simulators are fast, because they only have to simulate the software part. Emulators based on the Intel architecture are fast."),(0,i.kt)("li",{parentName:"ul"},"Debugging possibilities: Easy to debug simulator/emulators, already hooked up to the machine to access logs.")),(0,i.kt)("h4",{id:"cons-1"},"Cons"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Vanilla versions only: Manufacturer\u2019s skins are available, but the device behavior is still based on what comes stock."),(0,i.kt)("li",{parentName:"ul"},"No real resource usage: CPU/memory usage of machine in case of simulators. Emulators try to simulate the hardware."),(0,i.kt)("li",{parentName:"ul"},"No real interoperability: Connectivity with NFC, Bluetooth, network connections."),(0,i.kt)("li",{parentName:"ul"},"Slow ARM-based emulators: Emulators based on the ARM architecture are slow, which is the main architecture for Android devices."),(0,i.kt)("li",{parentName:"ul"},"Inaccurate color display in light/dark: Contrast/brightness inaccurate in light/dark environment.")),(0,i.kt)("h3",{id:"real-devices-the-real-thing"},"Real devices: the real thing..."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Focus area"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Usability"),(0,i.kt)("td",{parentName:"tr",align:null},"Validating usability such as actual click areas, touch actions and voice over")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Performance"),(0,i.kt)("td",{parentName:"tr",align:null},"CPU/memory usage, battery, network strengths")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Native API integration"),(0,i.kt)("td",{parentName:"tr",align:null},"Interruption (incoming calls, push notifications), resource fighting (camera, GPS), NFC, Bluetooth")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Visuals"),(0,i.kt)("td",{parentName:"tr",align:null},"Focus on devices which are not available as simulators/emulators")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Manufacturer\u2019s sauce"),(0,i.kt)("td",{parentName:"tr",align:null},"Real OS from manufacturers, e.g. Samsung's TouchWiz and built-in browsers")))),(0,i.kt)("h4",{id:"pros-2"},"Pros"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Native APIs in real conditions: Ability to test native APIs not only with injections for automation, but also actual NFC touch for example."),(0,i.kt)("li",{parentName:"ul"},"Can be faster than emulators: Some real devices are just faster than emulators due to the simulation of hardware, especially compared to the ARM-based emulators."),(0,i.kt)("li",{parentName:"ul"},"Just the real thing... Actual network conditions, battery/CPU/memory usage, manufacturer\u2019s secret sauce on top of the OS.")),(0,i.kt)("h4",{id:"cons-2"},"Cons"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Costs: Real devices come with a price, usually you pay per device/cradle."),(0,i.kt)("li",{parentName:"ul"},"New device means procurement: A new device is usually not available on-the-fly, even with cloud solutions. E.g. when the new iPhone comes out, it's not available immediately to procure. In the meantime, the iOS simulator would already be available."),(0,i.kt)("li",{parentName:"ul"},"Development iOS build required for automation: iOS apps need to be signed with Development Distribution Certificate and Provisioning Profile for automation.")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"There are loads of trade-offs when it comes to mobile testing. But by learning to use all layers of the mobile testing pyramid to your advantage (leveraging desktop browsers, mobile simulators/emulators, and real devices together) you can gain the fast feedback that is required in modern CI/CD environments. It's just a matter of focusing on the right things in each layer for your context."),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Kwo Ding is a hands-on test automation architect/consultant with over 10 years of experience in software testing. His focus is on implementing test automation strategies and designing the test automation infrastructure at organizations. He specializes in web, mobile, and API test automation."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Kwo Ding profile picture",src:a(39769).Z+"#author-img",title:"a title",width:"287",height:"287"})))}h.isMDXComponent=!0},55796:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2023-05-26T00:00:00.000Z"),last_update:{date:new Date("2023-05-26T00:00:00.000Z")}},o=void 0,l={unversionedId:"headless-chrome/csharp",id:"headless-chrome/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/72-headless-chrome/csharp.md",sourceDirName:"72-headless-chrome",slug:"/headless-chrome/csharp",permalink:"/docs/headless-chrome/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/72-headless-chrome/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1685059200,formattedLastUpdatedAt:"May 26, 2023",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2023-05-26T00:00:00.000Z",last_update:{date:"2023-05-26T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},11938:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2023-05-26T00:00:00.000Z"),last_update:{date:new Date("2023-05-26T00:00:00.000Z")}},o=void 0,l={unversionedId:"headless-chrome/java",id:"headless-chrome/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/72-headless-chrome/java.md",sourceDirName:"72-headless-chrome",slug:"/headless-chrome/java",permalink:"/docs/headless-chrome/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/72-headless-chrome/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1685059200,formattedLastUpdatedAt:"May 26, 2023",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2023-05-26T00:00:00.000Z",last_update:{date:"2023-05-26T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community ",(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE"))),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},22522:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2023-05-26T00:00:00.000Z"),last_update:{date:new Date("2023-05-26T00:00:00.000Z")}},o=void 0,l={unversionedId:"headless-chrome/javascript",id:"headless-chrome/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/72-headless-chrome/javascript.md",sourceDirName:"72-headless-chrome",slug:"/headless-chrome/javascript",permalink:"/docs/headless-chrome/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/72-headless-chrome/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1685059200,formattedLastUpdatedAt:"May 26, 2023",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2023-05-26T00:00:00.000Z",last_update:{date:"2023-05-26T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community ",(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE"))),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},22465:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2023-05-26T00:00:00.000Z"),last_update:{date:new Date("2023-05-26T00:00:00.000Z")}},o=void 0,l={unversionedId:"headless-chrome/python",id:"headless-chrome/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/72-headless-chrome/python.md",sourceDirName:"72-headless-chrome",slug:"/headless-chrome/python",permalink:"/docs/headless-chrome/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/72-headless-chrome/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1685059200,formattedLastUpdatedAt:"May 26, 2023",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2023-05-26T00:00:00.000Z",last_update:{date:"2023-05-26T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},14873:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:2,hide_table_of_contents:!0,publish_date:new Date("2017-09-25T00:00:00.000Z"),last_update:{date:new Date("2023-03-06T00:00:00.000Z")}},o=void 0,l={unversionedId:"headless-chrome/ruby",id:"headless-chrome/ruby",title:"ruby",description:"A Solution",source:"@site/docs/72-headless-chrome/ruby.md",sourceDirName:"72-headless-chrome",slug:"/headless-chrome/ruby",permalink:"/docs/headless-chrome/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/72-headless-chrome/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1678060800,formattedLastUpdatedAt:"Mar 6, 2023",frontMatter:{language:"ruby",level:2,hide_table_of_contents:!0,publish_date:"2017-09-25T00:00:00.000Z",last_update:{date:"2023-03-06T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Enter Headless Chrome (",(0,i.kt)("a",{parentName:"p",href:"https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md"},"link"),")"),(0,i.kt)("p",null,"Starting with Chrome 59 (Chrome 60 for Windows) we can pass Chrome a few configuration options to enable headless mode."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Before we start make sure you\u2019ve at least got Chrome 59 installed and are using the latest ",(0,i.kt)("a",{parentName:"p",href:"https://sites.google.com/a/chromium.org/chromedriver/"},"ChromeDriver")," version."),(0,i.kt)("p",null,"First let\u2019s create a simple Selenium script. Like all test scripts, first we will pull in the requisite libraries:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: headless_chrome.rb\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n")),(0,i.kt)("p",null,"Now we can create our ",(0,i.kt)("inlineCode",{parentName:"p"},"setup")," method where we will pass Chrome our headless options as command line arguments."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"def setup\n    options = Selenium::WebDriver::Chrome::Options.new\n    options.add_argument('--headless')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--remote-debugging-port=9222')\n    @driver = Selenium::WebDriver.for :chrome, options: options\nend\n")),(0,i.kt)("p",null,"The first ",(0,i.kt)("inlineCode",{parentName:"p"},"add_argument")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"'-- headless'")," allows us to run Chrome in headless mode. The second argument is, ",(0,i.kt)("a",{parentName:"p",href:"https://developers.google.com/web/updates/2017/04/headless-chrome"},"according to Google"),", temporarily required to work around a few known bugs. The third argument is optional but gives us the ability to debug our application in another browser if we need to (using localhost:9222)."),(0,i.kt)("p",null,"Now let's finish our test by creating our ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"def teardown\n    @driver.quit\nend\n\ndef run\n    setup\n    yield\n    teardown\nend\n\nrun do\n    @driver.get 'http://the-internet.herokuapp.com'\n    expect(@driver.title).to eql 'The Internet'\n    @driver.save_screenshot('headless.png')\nend\n")),(0,i.kt)("p",null,"Here we are loading a page, asserting on the title (to make sure we are in the right place), and taking a screenshot to make sure our headless setup is working correctly."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save our file and run it (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby headless_chrome.rb"),") here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A headless chrome browser instance will open"),(0,i.kt)("li",{parentName:"ul"},"Test runs and captures a screenshot"),(0,i.kt)("li",{parentName:"ul"},"Browser closes")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip has helped you get your tests running smoothly locally (or on your CI Server). This is the best option since it's easy to setup, officially supported by the browser vendor, and has a consistent rendering experience to what an end-user would experience in a full instance of Chrome."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Chris Kenst is a Software Quality advocate, Test Engineer, ",(0,i.kt)("a",{parentName:"p",href:"http://kenst.com"},"occasional blogger"),", and maintainer of an open source list of software testing\nconferences (",(0,i.kt)("a",{parentName:"p",href:"http://testingconferences.org"},"link"),"). You can also find him online most places as ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/ckenst"},"@ckenst"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Chris Kenst profile picture",src:a(44193).Z+"#author-img",title:"a title",width:"333",height:"333"})))}h.isMDXComponent=!0},37984:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2023-05-26T00:00:00.000Z"),last_update:{date:new Date("2023-05-26T00:00:00.000Z")}},o=void 0,l={unversionedId:"open-new-window/csharp",id:"open-new-window/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/73-open-new-window/csharp.md",sourceDirName:"73-open-new-window",slug:"/open-new-window/csharp",permalink:"/docs/open-new-window/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/73-open-new-window/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1685059200,formattedLastUpdatedAt:"May 26, 2023",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2023-05-26T00:00:00.000Z",last_update:{date:"2023-05-26T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},95985:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:1,hide_sidebar:!0,publish_date:new Date("2023-02-17T00:00:00.000Z"),last_update:{date:new Date("2023-03-21T00:00:00.000Z")}},o=void 0,l={unversionedId:"open-new-window/java",id:"open-new-window/java",title:"java",description:"A Solution",source:"@site/docs/73-open-new-window/java.md",sourceDirName:"73-open-new-window",slug:"/open-new-window/java",permalink:"/docs/open-new-window/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/73-open-new-window/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1679356800,formattedLastUpdatedAt:"Mar 21, 2023",frontMatter:{language:"java",level:1,hide_sidebar:!0,publish_date:"2023-02-17T00:00:00.000Z",last_update:{date:"2023-03-21T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"<em>Click on any of the code snippets in the table for more information and script demos.</em>",id:"click-on-any-of-the-code-snippets-in-the-table-for-more-information-and-script-demos",level:5},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"With the release of Selenium 4 comes the ",(0,i.kt)("inlineCode",{parentName:"p"},"newWindow")," command which allows you to create a new window or new tab (without needing a keyboard input), then select that tab, and navigate to a website:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Language")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"New Window")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"New Tab")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Java")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/saucelabs-training/demo-java/blob/docs-1.2/selenium-examples/src/test/java/com/saucedemo/selenium/se4newfeatures/NewWindowTest.java#L13"},(0,i.kt)("inlineCode",{parentName:"a"},"driver.switchTo().newWindow(WindowType.WINDOW);"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/saucelabs-training/demo-java/blob/docs-1.2/selenium-examples/src/test/java/com/saucedemo/selenium/se4newfeatures/NewWindowTest.java#L21"},(0,i.kt)("inlineCode",{parentName:"a"},"driver.switchTo().newWindow(WindowType.TAB);")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Python")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/saucelabs-training/demo-python/blob/docs-1.1/examples/selenium/new_features/test_new_window.py#L5"},(0,i.kt)("inlineCode",{parentName:"a"},"driver.switch_to.new_window('window')"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/saucelabs-training/demo-python/blob/docs-1.1/examples/selenium/new_features/test_new_window.py#L12"},(0,i.kt)("inlineCode",{parentName:"a"},"driver.switch_to.new_window('tab')")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Ruby")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/saucelabs-training/demo-ruby/blob/docs-1.1/training-sessions/selenium4/spec/new_window_spec.rb#L7"},(0,i.kt)("inlineCode",{parentName:"a"},"@driver.switch_to.new_window(:window)"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/saucelabs-training/demo-ruby/blob/docs-1.1/training-sessions/selenium4/spec/new_window_spec.rb#L13"},(0,i.kt)("inlineCode",{parentName:"a"},"@driver.switch_to.new_window(:tab)")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"C#")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/saucelabs-training/demo-csharp/blob/docs-1.1/DotnetCore/Sauce.Demo/Core.Selenium.Examples/Selenium4/NewFeatures/NewWindow.cs#L39"},(0,i.kt)("inlineCode",{parentName:"a"},"Driver.SwitchTo().NewWindow(WindowType.Window);"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/saucelabs-training/demo-csharp/blob/docs-1.1/DotnetCore/Sauce.Demo/Core.Selenium.Examples/Selenium4/NewFeatures/NewWindow.cs#L48"},(0,i.kt)("inlineCode",{parentName:"a"},"Driver.SwitchTo().NewWindow(WindowType.Tab);")))))),(0,i.kt)("h5",{id:"click-on-any-of-the-code-snippets-in-the-table-for-more-information-and-script-demos"},(0,i.kt)("em",{parentName:"h5"},"Click on any of the code snippets in the table for more information and script demos.")),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"To open a new window, you call the driver you instantiated with a method that allows you to switch to a new window or tab."),(0,i.kt)("p",null,"After using the new window (or tab) method, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"driver.get")," method to navigate to a website or URL. See the examples in the table of the previous section to see how this would be implemented."),(0,i.kt)("p",null,"Now you can add any other actions or assertions you\u2019d like to do on the page. In the ",(0,i.kt)("inlineCode",{parentName:"p"},"Java")," example below, you can see how a test and multiple windows are created and handled:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: new-window.java\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport junit.framework.TestCase;\nimport org.openqa.selenium.Point;\nimport org.openqa.selenium.WindowType;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\n\n\npublic class NewWindow {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n\n\n    @Test\n    public void multipleWindows() throws InterruptedException {\n        driver.get("http://the-internet.herokuapp.com/windows");\n        driver.switchTo().newWindow(WindowType.WINDOW);\n        driver.manage().window().setPosition(new Point(100, 400));\n        driver.get("https://the-internet.herokuapp.com/typos");\n\n        TestCase Assertions = null;\n        TestCase.assertEquals(2, driver.getWindowHandles().toArray().length);\n    }\n}\n')),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If you run the ",(0,i.kt)("inlineCode",{parentName:"p"},"Java")," example referenced above (",(0,i.kt)("inlineCode",{parentName:"p"},"new-window.java"),"), this test will:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open Firefox browser"),(0,i.kt)("li",{parentName:"ul"},"Navigate to the-internet website"),(0,i.kt)("li",{parentName:"ul"},"Open a New Window and move it to a different position on the screen"),(0,i.kt)("li",{parentName:"ul"},"Navigate to the Typos page on the-internet website"),(0,i.kt)("li",{parentName:"ul"},"Check the number of windows open"),(0,i.kt)("li",{parentName:"ul"},"Close all browsers")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"There are many possible use cases for this new way of opening and focusing on new browser tabs and windows across OS and browser combinations."),(0,i.kt)("p",null,"From testing the way a user can interact with two windows side-by-side, to testing performance and behavior of multiple windows, this new command makes it simpler to test on multiple web pages."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"This tip is brought to you by ",(0,i.kt)("a",{parentName:"p",href:"https://www.linkedin.com/in/lindsayjowalker/"},"Lindsay Walker")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Lindsay Walker profile picture",src:a(98784).Z+"#author-img",title:"a title",width:"400",height:"400"})))}h.isMDXComponent=!0},46511:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2023-05-26T00:00:00.000Z"),last_update:{date:new Date("2023-05-26T00:00:00.000Z")}},o=void 0,l={unversionedId:"open-new-window/javascript",id:"open-new-window/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/73-open-new-window/javascript.md",sourceDirName:"73-open-new-window",slug:"/open-new-window/javascript",permalink:"/docs/open-new-window/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/73-open-new-window/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1685059200,formattedLastUpdatedAt:"May 26, 2023",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2023-05-26T00:00:00.000Z",last_update:{date:"2023-05-26T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},44757:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",hide_sidebar:!0,publish_date:new Date("2023-02-17T00:00:00.000Z"),last_update:{date:new Date("2023-02-24T00:00:00.000Z")}},o=void 0,l={unversionedId:"open-new-window/python",id:"open-new-window/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/73-open-new-window/python.md",sourceDirName:"73-open-new-window",slug:"/open-new-window/python",permalink:"/docs/open-new-window/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/73-open-new-window/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677196800,formattedLastUpdatedAt:"Feb 24, 2023",frontMatter:{language:"python",hide_sidebar:!0,publish_date:"2023-02-17T00:00:00.000Z",last_update:{date:"2023-02-24T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},2178:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:1,hide_sidebar:!0,publish_date:new Date("2023-02-17T00:00:00.000Z"),last_update:{date:new Date("2023-02-24T00:00:00.000Z")}},o=void 0,l={unversionedId:"open-new-window/ruby",id:"open-new-window/ruby",title:"ruby",description:"A Solution",source:"@site/docs/73-open-new-window/ruby.md",sourceDirName:"73-open-new-window",slug:"/open-new-window/ruby",permalink:"/docs/open-new-window/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/73-open-new-window/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1677196800,formattedLastUpdatedAt:"Feb 24, 2023",frontMatter:{language:"ruby",level:1,hide_sidebar:!0,publish_date:"2023-02-17T00:00:00.000Z",last_update:{date:"2023-02-24T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"<em>Click on any of the code snippets in the table for more information and script demos.</em>",id:"click-on-any-of-the-code-snippets-in-the-table-for-more-information-and-script-demos",level:5},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"With the release of Selenium 4 comes the ",(0,i.kt)("inlineCode",{parentName:"p"},"new_window")," command which allows you to create a new window or new tab (without needing a keyboard input), then select that tab, and navigate to a website:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Language")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"New Window")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"New Tab")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Java")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/saucelabs-training/demo-java/blob/docs-1.2/selenium-examples/src/test/java/com/saucedemo/selenium/se4newfeatures/NewWindowTest.java#L13"},(0,i.kt)("inlineCode",{parentName:"a"},"driver.switchTo().newWindow(WindowType.WINDOW);"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/saucelabs-training/demo-java/blob/docs-1.2/selenium-examples/src/test/java/com/saucedemo/selenium/se4newfeatures/NewWindowTest.java#L21"},(0,i.kt)("inlineCode",{parentName:"a"},"driver.switchTo().newWindow(WindowType.TAB);")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Python")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/saucelabs-training/demo-python/blob/docs-1.1/examples/selenium/new_features/test_new_window.py#L5"},(0,i.kt)("inlineCode",{parentName:"a"},"driver.switch_to.new_window('window')"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/saucelabs-training/demo-python/blob/docs-1.1/examples/selenium/new_features/test_new_window.py#L12"},(0,i.kt)("inlineCode",{parentName:"a"},"driver.switch_to.new_window('tab')")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Ruby")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/saucelabs-training/demo-ruby/blob/docs-1.1/training-sessions/selenium4/spec/new_window_spec.rb#L7"},(0,i.kt)("inlineCode",{parentName:"a"},"@driver.switch_to.new_window(:window)"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/saucelabs-training/demo-ruby/blob/docs-1.1/training-sessions/selenium4/spec/new_window_spec.rb#L13"},(0,i.kt)("inlineCode",{parentName:"a"},"@driver.switch_to.new_window(:tab)")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"C#")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/saucelabs-training/demo-csharp/blob/docs-1.1/DotnetCore/Sauce.Demo/Core.Selenium.Examples/Selenium4/NewFeatures/NewWindow.cs#L39"},(0,i.kt)("inlineCode",{parentName:"a"},"Driver.SwitchTo().NewWindow(WindowType.Window);"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://github.com/saucelabs-training/demo-csharp/blob/docs-1.1/DotnetCore/Sauce.Demo/Core.Selenium.Examples/Selenium4/NewFeatures/NewWindow.cs#L48"},(0,i.kt)("inlineCode",{parentName:"a"},"Driver.SwitchTo().NewWindow(WindowType.Tab);")))))),(0,i.kt)("h5",{id:"click-on-any-of-the-code-snippets-in-the-table-for-more-information-and-script-demos"},(0,i.kt)("em",{parentName:"h5"},"Click on any of the code snippets in the table for more information and script demos.")),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"To open a new window, you call the driver you instantiated with a method that allows you to switch to a new window or tab."),(0,i.kt)("p",null,"After using the new window (or tab) method, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"driver.get")," method to navigate to a website or URL. See the examples in the table of the previous section to see how this would be implemented."),(0,i.kt)("p",null,"Now you can add any other actions or assertions you\u2019d like to do on the page. In the ",(0,i.kt)("inlineCode",{parentName:"p"},"Ruby")," example below, you can see how a test and multiple windows are created and handled:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'#filename new-window.rb\n\nrequire \'selenium-webdriver\'\nrequire \'rspec/expectations\'\n\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n\nrun do\n  @driver.get("https://the-internet.herokuapp.com")\n  @driver.switch_to.new_window(:window)\n  @driver.manage.window.position = Selenium::WebDriver::Point.new(100, 400)\n  @driver.get("https://the-internet.herokuapp.com/typos")\n\n  windows_count = @driver.window_handles.length\n  if windows_count == 2\n    puts "Test passed: Found 2 windows open"\n  else\n    raise "Expected 2 windows, but found #{windows_count}"\nend\nend\n')),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If you run the ",(0,i.kt)("inlineCode",{parentName:"p"},"Ruby")," example referenced above (",(0,i.kt)("inlineCode",{parentName:"p"},"ruby new-window.rb"),"), this test will:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open Firefox browser"),(0,i.kt)("li",{parentName:"ul"},"Navigate to the-internet website"),(0,i.kt)("li",{parentName:"ul"},"Open a New Window and move it to a different position on the screen"),(0,i.kt)("li",{parentName:"ul"},"Navigate to the Typos page on the-internet website"),(0,i.kt)("li",{parentName:"ul"},"Check the number of windows open"),(0,i.kt)("li",{parentName:"ul"},"Close all browsers")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"There are many possible use cases for this new way of opening and focusing on new browser tabs and windows across OS and browser combinations."),(0,i.kt)("p",null,"From testing the way a user can interact with two windows side-by-side, to testing performance and behavior of multiple windows, this new command makes it simpler to test on multiple web pages."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"This tip is brought to you by ",(0,i.kt)("a",{parentName:"p",href:"https://www.linkedin.com/in/lindsayjowalker/"},"Lindsay Walker")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Lindsay Walker profile picture",src:a(98784).Z+"#author-img",title:"a title",width:"400",height:"400"})))}h.isMDXComponent=!0},49881:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:2,hide_sidebar:!0,publish_date:new Date("2016-06-12T00:00:00.000Z"),last_update:{date:new Date("2023-03-29T00:00:00.000Z")}},o=void 0,l={unversionedId:"download-a-file-revisited/csharp",id:"download-a-file-revisited/csharp",title:"csharp",description:"A Solution",source:"@site/docs/8-download-a-file-revisited/csharp.md",sourceDirName:"8-download-a-file-revisited",slug:"/download-a-file-revisited/csharp",permalink:"/docs/download-a-file-revisited/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/8-download-a-file-revisited/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1680048e3,formattedLastUpdatedAt:"Mar 29, 2023",frontMatter:{language:"csharp",level:2,hide_sidebar:!0,publish_date:"2016-06-12T00:00:00.000Z",last_update:{date:"2023-03-29T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Ultimately we shouldn't care if a file was downloaded or not. Instead, we should care that a file ",(0,i.kt)("em",{parentName:"p"},"can")," be downloaded. And we can do that by using an HTTP client alongside Selenium in our test."),(0,i.kt)("p",null,"With an HTTP library we can perform a header (or ",(0,i.kt)("inlineCode",{parentName:"p"},"HEAD"),") request for the file. Instead of downloading the file we'll receive header information for the file which contains information like the content type and content length (amongst other things). With this information we can easily confirm the file is what we expect without onerous configuration, local disk usage, or lengthy download times (depending on the file size)."),(0,i.kt)("p",null,"Let's continue with an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"To start things off let's include our requisite classes for our test framework (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"NUnit.Framework"),"), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenQA.Selenium"),", etc.), an HTTP library to handle our HEAD request (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Net"),"), and start our class with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: FileDownloadRevisited.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\nusing System.Net;\n\npublic class FileDownloadRevisited\n{\n\n    IWebDriver Driver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now we're ready to wire up our test."),(0,i.kt)("p",null,"It's just a simple matter of visiting the page with download links, grabbing a URL from one of them, and performing a ",(0,i.kt)("inlineCode",{parentName:"p"},"HEAD")," request with it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: FileDownloadRevisited.cs\n// ...\n    [Test]\n    public void CheckFileDownloadWithoutBrowser()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/download");\n        string FileURL = Driver.FindElement(By.CssSelector(".example a")).GetAttribute("href");\n        var Request = (HttpWebRequest)WebRequest.Create(FileURL);\n        Request.Method = "HEAD";\n        WebResponse Response = Request.GetResponse();\n        Assert.That(Response.ContentType.Equals("application/octet-stream"));\n        Assert.Greater(Response.ContentLength, 0);\n    }\n}\n')),(0,i.kt)("p",null,"Once we receive the response we check its header for the content type (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},'Assert.That(Response.ContentType.Equals("application/octet-stream"));'),") and content length (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"Assert.Greater(Response.ContentLength, 0);"),") to make sure the file is the correct type and not empty."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\FileDownloadRevisited.sln")," from the command-line) here is what will will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Grab the URL of the first download link"),(0,i.kt)("li",{parentName:"ul"},"Perform a ",(0,i.kt)("inlineCode",{parentName:"li"},"HEAD")," request against it with an HTTP library"),(0,i.kt)("li",{parentName:"ul"},"Store the response headers"),(0,i.kt)("li",{parentName:"ul"},"Check the response headers to see that the file type is correct"),(0,i.kt)("li",{parentName:"ul"},"Check the response headers to see that the file is not empty"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Compared to the browser specific configuration with Selenium this is hands-down a leaner, faster, and more maintainable approach."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},48030:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:2,hide_sidebar:!0,publish_date:new Date("2015-11-10T00:00:00.000Z"),last_update:{date:new Date("2023-04-03T00:00:00.000Z")}},o=void 0,l={unversionedId:"download-a-file-revisited/java",id:"download-a-file-revisited/java",title:"java",description:"A Solution",source:"@site/docs/8-download-a-file-revisited/java.md",sourceDirName:"8-download-a-file-revisited",slug:"/download-a-file-revisited/java",permalink:"/docs/download-a-file-revisited/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/8-download-a-file-revisited/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:168048e4,formattedLastUpdatedAt:"Apr 3, 2023",frontMatter:{language:"java",level:2,hide_sidebar:!0,publish_date:"2015-11-10T00:00:00.000Z",last_update:{date:"2023-04-03T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Ultimately we shouldn't care if a file was downloaded or not. Instead, we should care that a file ",(0,i.kt)("em",{parentName:"p"},"can")," be downloaded. And we can do that by using an HTTP client alongside Selenium in our test."),(0,i.kt)("p",null,"With an HTTP library we can perform a header (or ",(0,i.kt)("inlineCode",{parentName:"p"},"HEAD"),") request for the file. Instead of downloading the file we'll receive header information for the file which contains information like the content type and content length (amongst other things). With this information we can easily confirm the file is what we expect without onerous configuration, local disk usage, or lengthy download times (depending on the file size)."),(0,i.kt)("p",null,"Let's continue with an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"To start things off let's import our requisite classes (for annotations (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.junit.After"),", etc.), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.openqa.selenium.WebDriver"),", etc.), matchers for our assertions (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.hamcrest.CoreMatchers"),", etc.), and an HTTP library to handle our HEAD request (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.apache.http.HttpResponse"),", etc.) and start our class with some setup and teardown methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// filename: DownloadFileRevisited.java\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.CoreMatchers.not;\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpHead;\nimport org.apache.http.impl.client.HttpClientBuilder;\n\npublic class DownloadFileRevisited {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n// ...\n")),(0,i.kt)("p",null,"Now we're ready to wire up our test."),(0,i.kt)("p",null,"It's just a simple matter of visiting the page with download links, grabbing a URL from one of them, and performing a ",(0,i.kt)("inlineCode",{parentName:"p"},"HEAD")," request with it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// filename: DownloadFileRevisited.java\n// ...\n    @Test\n    public void downloadFileRevisitedTest() throws Exception {\n        driver.get("http://the-internet.herokuapp.com/download");\n        String link = driver.findElement(By.cssSelector(".example a:nth-of-type(1)")).getAttribute("href");\n\n        HttpClient httpClient = HttpClientBuilder.create().build();\n        HttpHead request = new HttpHead(link);\n        HttpResponse response = httpClient.execute(request);\n        String contentType = response.getFirstHeader("Content-Type").getValue();\n        int contentLength = Integer.parseInt(response.getFirstHeader("Content-Length").getValue());\n\n        assertThat(contentType, is("application/octet-stream"));\n        assertThat(contentLength, is(not(0)));\n    }\n\n}\n')),(0,i.kt)("p",null,"Once we receive the response we check it's header for the content type (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},'response.getFirstHeader("Content-Type")'),") and content length (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},'response.getFirstHeader("Content-Length")'),") to make sure the file is the correct type and not empty."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn clean install")," from the command-line) here is what will will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Grab the URL of the first download link"),(0,i.kt)("li",{parentName:"ul"},"Perform a ",(0,i.kt)("inlineCode",{parentName:"li"},"HEAD")," request against it with an HTTP library"),(0,i.kt)("li",{parentName:"ul"},"Store the response headers"),(0,i.kt)("li",{parentName:"ul"},"Check the response headers to see that the file type is correct"),(0,i.kt)("li",{parentName:"ul"},"Check the response headers to see that the file is not empty"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Compared to the browser specific configuration with Selenium this is hands-down a leaner, faster, and more maintainable approach."),(0,i.kt)("p",null,"Thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/RomanIsko"},"Roman Isko")," for contributing the initial Java code for this tip."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},3784:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"download-a-file-revisited/javascript",id:"download-a-file-revisited/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/8-download-a-file-revisited/javascript.md",sourceDirName:"8-download-a-file-revisited",slug:"/download-a-file-revisited/javascript",permalink:"/docs/download-a-file-revisited/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/8-download-a-file-revisited/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},4017:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:2,hide_sidebar:!0,publish_date:new Date("2016-11-24T00:00:00.000Z"),last_update:{date:"03-14-2023"}},o=void 0,l={unversionedId:"download-a-file-revisited/python",id:"download-a-file-revisited/python",title:"python",description:"A Solution",source:"@site/docs/8-download-a-file-revisited/python.md",sourceDirName:"8-download-a-file-revisited",slug:"/download-a-file-revisited/python",permalink:"/docs/download-a-file-revisited/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/8-download-a-file-revisited/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1678752e3,formattedLastUpdatedAt:"Mar 14, 2023",frontMatter:{language:"python",level:2,hide_sidebar:!0,publish_date:"2016-11-24T00:00:00.000Z",last_update:{date:"03-14-2023"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Ultimately we shouldn't care if a file was downloaded or not. Instead, we should care that a file ",(0,i.kt)("em",{parentName:"p"},"can")," be downloaded. And we can do that by using an HTTP client alongside Selenium in our test."),(0,i.kt)("p",null,"With an HTTP library we can perform a header (or ",(0,i.kt)("inlineCode",{parentName:"p"},"HEAD"),") request for the file. Instead of downloading the file we'll receive header information for the file which contains information like the content type and content length (amongst other things). With this information we can easily confirm the file is what we expect without onerous configuration, local disk usage, or lengthy download times (depending on the file size)."),(0,i.kt)("p",null,"Let's continue with an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"To start things off let's pull in our requisite libraries (",(0,i.kt)("inlineCode",{parentName:"p"},"import unittest")," for our test framework, ",(0,i.kt)("inlineCode",{parentName:"p"},"from selenium import webdriver")," to drive the browser, and ",(0,i.kt)("inlineCode",{parentName:"p"},"import httplib")," for our HTTP library), declare our test class, and wire up some test ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: file_download_revisited.py\nimport unittest\nfrom selenium import webdriver\nimport httplib # Use http.client if using Python 3.x.x\nfrom selenium.webdriver.common.by import By\n\n\nclass FileDownloadRevisited(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n\n    def tearDown(self):\n        self.driver.quit()\n# ...\n")),(0,i.kt)("p",null,"Now we're ready to write up our test."),(0,i.kt)("p",null,"It's just a simple matter of visiting the page with download links, grabbing a URL from one of them, and performing a ",(0,i.kt)("inlineCode",{parentName:"p"},"HEAD")," request with it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# filename: file_download_revisited.py\n# ...\n    def test_example_1(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/download')\n        download_link = driver.find_element(By.CSS_SELECTOR,'.example a').get_attribute('href')\n\n        connection = http.client.HTTPConnection('the-internet.herokuapp.com')\n        connection.request('HEAD', download_link)\n        response = connection.getresponse()\n        content_type = response.getheader('Content-type')\n        content_length = response.getheader('Content-length')\n        content_length = int(content_length)\n\n        assert content_type == 'application/octet-stream'\n        assert content_length > 0\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,i.kt)("p",null,"Once we receive the response we can check its header for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Content-type")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Content-length")," to make sure the file is the correct type and not empty."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When you save this and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"python file_download_revisited.py")," from the command-line) here is what will will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Grab the URL of the first download link"),(0,i.kt)("li",{parentName:"ul"},"Perform a ",(0,i.kt)("inlineCode",{parentName:"li"},"HEAD")," request against it with an HTTP library"),(0,i.kt)("li",{parentName:"ul"},"Store the response"),(0,i.kt)("li",{parentName:"ul"},"Check the response headers to see that the file type is correct"),(0,i.kt)("li",{parentName:"ul"},"Check the response headers to see that the file is not empty")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Compared to the browser specific configuration with Selenium this is hands down a leaner, faster, and more maintainable approach. But unfortunately it only works with files served up from a flat URL. So if you're trying to test file downloads that are generated in-memory as part of the browser session (a.k.a. not accessible from a URL) then you'll need to reach for the browser specific Selenium configuration."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},23030:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:2,hide_sidebar:!0,publish_date:new Date("2015-08-20T00:00:00.000Z"),last_update:{date:"03-08-2023"}},o=void 0,l={unversionedId:"download-a-file-revisited/ruby",id:"download-a-file-revisited/ruby",title:"ruby",description:"A Solution",source:"@site/docs/8-download-a-file-revisited/ruby.md",sourceDirName:"8-download-a-file-revisited",slug:"/download-a-file-revisited/ruby",permalink:"/docs/download-a-file-revisited/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/8-download-a-file-revisited/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1678233600,formattedLastUpdatedAt:"Mar 8, 2023",frontMatter:{language:"ruby",level:2,hide_sidebar:!0,publish_date:"2015-08-20T00:00:00.000Z",last_update:{date:"03-08-2023"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"Ultimately we shouldn't care if a file was downloaded or not. Instead, we should care that a file ",(0,i.kt)("em",{parentName:"p"},"can")," be downloaded. And we can do that by using an HTTP client alongside Selenium in our test."),(0,i.kt)("p",null,"With an HTTP library we can perform a header (or ",(0,i.kt)("inlineCode",{parentName:"p"},"HEAD"),") request for the file. Instead of downloading the file we'll receive header information for the file which contains information like the content type and content length (amongst other things). With this information we can easily confirm the file is what we expect without onerous configuration, local disk usage, or lengthy download times (depending on the file size)."),(0,i.kt)("p",null,"Let's continue with an example."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"To start things off let's pull in our requisite libraries (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to drive the browser, ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers")," for our assertions, and ",(0,i.kt)("inlineCode",{parentName:"p"},"rest-client")," for our HTTP request) and wire up some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: download_revisited.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\nrequire 'rest-client'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Now we're ready to write up our test."),(0,i.kt)("p",null,"It's just a simple matter of visiting the page with download links, grabbing a URL from one of them, and performing a ",(0,i.kt)("inlineCode",{parentName:"p"},"HEAD")," request with it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/download'\n  link = @driver.find_element(css: '.example a').attribute('href')\n  response = RestClient.head link\n  expect(response.headers[:content_type]).to eql('application/octet-stream')\n  expect(response.headers[:content_length].to_i).to be > 0\nend\n")),(0,i.kt)("p",null,"Once we receive the response we can check it's header for the ",(0,i.kt)("inlineCode",{parentName:"p"},"content_type")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"content_length")," to make sure the file is the correct type and not empty."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If you save this and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby download_revisited.rb")," from the command-line) here is what will will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Load the page"),(0,i.kt)("li",{parentName:"ul"},"Grab the URL of the first download link"),(0,i.kt)("li",{parentName:"ul"},"Perform a ",(0,i.kt)("inlineCode",{parentName:"li"},"HEAD")," request against it with an HTTP library"),(0,i.kt)("li",{parentName:"ul"},"Store the response"),(0,i.kt)("li",{parentName:"ul"},"Check the response headers to see that the file type is correct"),(0,i.kt)("li",{parentName:"ul"},"Check the response headers to see that the file is not empty")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Compared to the browser specific configuration with Selenium this is hands-down a leaner, faster, and more maintainable approach."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},69583:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"use-a-base-page-object/csharp",id:"use-a-base-page-object/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/9-use-a-base-page-object/csharp.md",sourceDirName:"9-use-a-base-page-object",slug:"/use-a-base-page-object/csharp",permalink:"/docs/use-a-base-page-object/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/9-use-a-base-page-object/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},40460:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"use-a-base-page-object/java",id:"use-a-base-page-object/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/9-use-a-base-page-object/java.md",sourceDirName:"9-use-a-base-page-object",slug:"/use-a-base-page-object/java",permalink:"/docs/use-a-base-page-object/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/9-use-a-base-page-object/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},92833:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"use-a-base-page-object/javascript",id:"use-a-base-page-object/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/9-use-a-base-page-object/javascript.md",sourceDirName:"9-use-a-base-page-object",slug:"/use-a-base-page-object/javascript",permalink:"/docs/use-a-base-page-object/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/9-use-a-base-page-object/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},51955:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"use-a-base-page-object/python",id:"use-a-base-page-object/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/9-use-a-base-page-object/python.md",sourceDirName:"9-use-a-base-page-object",slug:"/use-a-base-page-object/python",permalink:"/docs/use-a-base-page-object/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/9-use-a-base-page-object/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},46844:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:3,hide_sidebar:!0,publish_date:new Date("2013-07-23T00:00:00.000Z"),last_update:{date:new Date("2023-03-25T00:00:00.000Z")}},o=void 0,l={unversionedId:"use-a-base-page-object/ruby",id:"use-a-base-page-object/ruby",title:"ruby",description:"A Solution",source:"@site/docs/9-use-a-base-page-object/ruby.md",sourceDirName:"9-use-a-base-page-object",slug:"/use-a-base-page-object/ruby",permalink:"/docs/use-a-base-page-object/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/9-use-a-base-page-object/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1679702400,formattedLastUpdatedAt:"Mar 25, 2023",frontMatter:{language:"ruby",level:3,hide_sidebar:!0,publish_date:"2013-07-23T00:00:00.000Z",last_update:{date:"2023-03-25T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("p",null,"With a Base Page Object (a.k.a. a facade layer) we can abstract all common actions into a central location and leverage them in any Page Object we see fit."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"In this example we are going to take the code from our previous tip (",(0,i.kt)("a",{parentName:"p",href:"http://elementalselenium.com/tips/7-use-a-page-object"},"Using a Page Object"),") and modify it to use a Base Page Object."),(0,i.kt)("p",null,"Previous tip's code to be modified:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\n  ENV['base_url'] = 'http://the-internet.herokuapp.com/dynamic_loading/2'\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n\nclass DynamicLoading\n\n  START_BUTTON = { css: '#start button' }\n  FINISH_BUTTON = { css: '#finish' }\n\n  attr_reader :driver\n\n  def initialize(driver)\n    @driver = driver\n    visit\n    verify_page\n  end\n\n  def visit\n    driver.get ENV['base_url']\n  end\n\n  def start\n    driver.find_element(START_BUTTON).click\n  end\n\n  def finish_present?\n    wait_for { @driver.find_element(FINISH_BUTTON).displayed? }\n  end\n\n  def finish_text\n    driver.find_element(FINISH_BUTTON).text\n  end\n\n  private\n\n    def verify_page\n      expect(driver.title).to eql('The Internet')\n    end\n\n    def wait_for(seconds=10)\n      Selenium::WebDriver::Wait.new(:timeout => seconds).until { yield }\n    end\n\nend\n\nend\n\nrun do\n  dynamic_loading = DynamicLoading.new(@driver)\n  dynamic_loading.start\n  dynamic_loading.finish_present?\n  expect(dynamic_loading.finish_text).to eql('Hello World!')\nend\n")),(0,i.kt)("p",null,"Now let's modify this code to perform a Google search. First, we include our libraries and wire up our setup, teardown, and run actions as usual."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\n  ENV['base_url'] = 'http://www.google.com'\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Next we create our Base Page Object. It's a simple Ruby class that our other Page Objects will inherit from."),(0,i.kt)("p",null,"At the top of it we set an ",(0,i.kt)("inlineCode",{parentName:"p"},"attr_reader")," to store the Selenium driver object that gets passed to it through the ",(0,i.kt)("inlineCode",{parentName:"p"},"initialize")," method. And the rest of the class is filled with a series of common Selenium actions that we pull from the GoogleSearch Page Object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"class Base\n\n  attr_reader :driver\n\n  def initialize(driver)\n    @driver = driver\n  end\n\n  def visit(url='/')\n    driver.get(ENV['base_url'] + url)\n  end\n\n  def find(locator)\n    driver.find_element locator\n  end\n\n  def clear(locator)\n    find(locator).clear\n  end\n\n  def type(locator, input)\n    find(locator).send_keys input\n  end\n\n  def click_on(locator)\n    find(locator).click\n  end\n\n  def displayed?(locator)\n    driver.find_element(locator).displayed?\n    true\n    rescue Selenium::WebDriver::Error::NoSuchElementError\n      false\n  end\n\n  def text_of(locator)\n    find(locator).text\n  end\n\n  def title\n    driver.title\n  end\n\n  def wait_for(seconds=5)\n    Selenium::WebDriver::Wait.new(:timeout => seconds).until { yield }\n  end\n\nend\n")),(0,i.kt)("p",null,"With the Base class in hand we simply update the GoogleSearch Page Object to inherit from it (with ",(0,i.kt)("inlineCode",{parentName:"p"},"< Base")," after the class name) and wire it up and clean things up."),(0,i.kt)("p",null,"Since we have some actions we want to execute when we load the GoogleSearch object, we keep them in the ",(0,i.kt)("inlineCode",{parentName:"p"},"initialize")," method. But since we are inheriting from the Base class we need to call ",(0,i.kt)("inlineCode",{parentName:"p"},"super")," before them. This is responsible for passing the driver object into the Base class and making all of its methods run smoothly."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"class GoogleSearch < Base\n\n  SEARCH_BOX        = { name: 'q' }\n  TOP_SEARCH_RESULT = { css: '#rso .g' }\n\n  def initialize(driver)\n    super(driver)\n    visit('/')\n    verify_page\n  end\n\n  def search_for(search_term)\n    type SEARCH_BOX, search_term\n    find(SEARCH_BOX).send_keys(:enter)\n  end\n\n  def search_result_present?(search_result)\n    wait_for { displayed?(TOP_SEARCH_RESULT) }\n    text_of(TOP_SEARCH_RESULT).include? search_result\n  end\n\n  private\n\n    def verify_page\n      expect(driver.title).to include ('Google')\n    end\n\nend\n")),(0,i.kt)("p",null,"Once that's done, we'll add our actual test script."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run {\n  google = GoogleSearch.new(@driver)\n  google.search_for 'elemental selenium tips'\n  result = google.search_result_present? 'Elemental Selenium'\n  expect(result).to be == true\n}\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Load Google"),(0,i.kt)("li",{parentName:"ul"},"Search for ",(0,i.kt)("em",{parentName:"li"},"elemental selenium tips")),(0,i.kt)("li",{parentName:"ul"},"Wait for the first search result to render"),(0,i.kt)("li",{parentName:"ul"},"Grab the text from it"),(0,i.kt)("li",{parentName:"ul"},"Assert that the text we want is within it")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Now we are in a position to write more Page Objects that leverage common actions without duplication or any Selenium code directly in them."),(0,i.kt)("p",null,"Hopefully this tip has helped you find your way further down the rabbit hole of Page Objects (in a good way)."),(0,i.kt)("p",null,"Happy Testing!"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"),(0,i.kt)("p",null,"Dave Haeffner is the original writer of Elemental Selenium -- a free, once weekly Selenium tip newsletter that's read by thousands of testing professionals. He also created and maintains the-internet (an open-source web app that's perfect for writing automated tests against)."),(0,i.kt)("p",null,"Dave has helped numerous companies successfully implement automated acceptance testing; including The Motley Fool, ManTech International, Sittercity, and Animoto. He is also an active member of the Selenium project and has spoken at numerous conferences and meetups around the world about automated acceptance testing."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Dave Haeffner profile picture",src:a(89417).Z+"#author-img",title:"a title",width:"280",height:"280"})))}h.isMDXComponent=!0},47042:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"csharp",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"template/csharp",id:"template/csharp",title:"csharp",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/template/csharp.md",sourceDirName:"template",slug:"/template/csharp",permalink:"/docs/template/csharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/template/csharp.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"csharp",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},11036:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"java",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"template/java",id:"template/java",title:"java",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/template/java.md",sourceDirName:"template",slug:"/template/java",permalink:"/docs/template/java",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/template/java.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"java",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},23634:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"javascript",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"template/javascript",id:"template/javascript",title:"javascript",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/template/javascript.md",sourceDirName:"template",slug:"/template/javascript",permalink:"/docs/template/javascript",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/template/javascript.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"javascript",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},65412:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"python",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"template/python",id:"template/python",title:"python",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/template/python.md",sourceDirName:"template",slug:"/template/python",permalink:"/docs/template/python",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/template/python.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"python",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},62905:(e,t,a)=>{"use strict";a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={language:"ruby",level:null,hide_sidebar:!0,publish_date:new Date("2019-11-30T00:00:00.000Z"),last_update:{date:new Date("2019-11-30T00:00:00.000Z")}},o=void 0,l={unversionedId:"template/ruby",id:"template/ruby",title:"ruby",description:"Oh no! It seems like we are missing code here.",source:"@site/docs/template/ruby.md",sourceDirName:"template",slug:"/template/ruby",permalink:"/docs/template/ruby",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/template/ruby.md",tags:[],version:"current",lastUpdatedBy:"Paloma Oliveira",lastUpdatedAt:1575072e3,formattedLastUpdatedAt:"Nov 30, 2019",frontMatter:{language:"ruby",level:null,hide_sidebar:!0,publish_date:"2019-11-30T00:00:00.000Z",last_update:{date:"2019-11-30T00:00:00.000Z"}}},s={},u=[{value:"A Solution",id:"a-solution",level:2},{value:"Example(s)",id:"examples",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2},{value:"About The Author",id:"about-the-author",level:2}],d={toc:u},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Oh no! It seems like we are missing code here.\nHelp the community"),(0,i.kt)("button",{className:"hello"},(0,i.kt)("a",{href:"https://github.com/saucelabs/elemental-next/blob/main/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"},"ADD EXAMPLE")),(0,i.kt)("h2",{id:"a-solution"},"A Solution"),(0,i.kt)("h2",{id:"examples"},"Example(s)"),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("h2",{id:"about-the-author"},"About The Author"))}h.isMDXComponent=!0},74180:(e,t,a)=>{"use strict";a.d(t,{Z:()=>n});const n=a.p+"assets/images/grid-console-9bf5440f0883d8546a58533d06efed07.png"},89073:(e,t,a)=>{"use strict";a.d(t,{Z:()=>n});const n=a.p+"assets/images/in_tip-fa92b9cb5e50b3595d26147938e33a10.png"},94183:(e,t,a)=>{"use strict";a.d(t,{Z:()=>n});const n=a.p+"assets/images/list_category-8b5b01ec76f491a5958a1196d678a23e.png"},40512:(e,t,a)=>{"use strict";a.d(t,{Z:()=>n});const n=a.p+"assets/images/list_tag-218331c90c3829e0682572c177b8bed5.png"},93330:(e,t,a)=>{"use strict";a.d(t,{Z:()=>n});const n=a.p+"assets/images/brian-goad-f109f0435f7d26dd999383b3b4ba1994.jpeg"},44193:(e,t,a)=>{"use strict";a.d(t,{Z:()=>n});const n=a.p+"assets/images/chris-kenst-e4079537da75a7d2568585c5c5f3078c.png"},89417:(e,t,a)=>{"use strict";a.d(t,{Z:()=>n});const n=a.p+"assets/images/dave-haeffner-4b48111a5789c5e16142754eb2f51920.jpeg"},39769:(e,t,a)=>{"use strict";a.d(t,{Z:()=>n});const n=a.p+"assets/images/kwo-ding-7d169191ad4e0240fa577b4e01d1c56d.jpeg"},98784:(e,t,a)=>{"use strict";a.d(t,{Z:()=>n});const n=a.p+"assets/images/lindsay-walker-d59120d9426c0dae9e12ea5d3757a4b5.jpeg"}}]);