"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[6977],{6977:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>d,frontMatter:()=>i,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const i={},o=void 0,s=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}],l={toc:s},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"Let's start with an example -- testing a login form on a website (e.g., with ",(0,r.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/login"},"this example")," on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet"),")."),(0,r.kt)("p",null,"First, we are going to create a file to store the test inputs and expected outputs in. In this case, a CSV (comma-separated value) file called ",(0,r.kt)("inlineCode",{parentName:"p"},"user_data.csv"),", like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"account_type,username,password,notification_message\nbad_password,tomsmith,badPassword,Your password is invalid!\nbad_username,badUsername,SuperSecretPassword!,Your username is invalid!\nstandard_user,tomsmith,SuperSecretPassword!,You logged into a secure area!\n")),(0,r.kt)("p",null,"Next let's create our test file, require our requisite libraries (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to control the browser, ",(0,r.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," & ",(0,r.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers")," for our assertion, and ",(0,r.kt)("inlineCode",{parentName:"p"},"csv")," to import the data from our CSV file) and add some simple ",(0,r.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," methods."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: data_driven.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\nrequire 'csv'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,r.kt)("p",null,"Now let's wire up our CSV parsing."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"def user_data\n  user_data = CSV.read Dir.pwd + '/user_data.csv'\n  descriptor = user_data.shift\n  descriptor = descriptor.map { |key| key.to_sym }\n  user_data.map { |user| Hash[ descriptor.zip(user) ] }\nend\n")),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"user_data")," we read the CSV file in and grab the first row in it with ",(0,r.kt)("inlineCode",{parentName:"p"},".shift"),". We store this row in a variable called ",(0,r.kt)("inlineCode",{parentName:"p"},"descriptor")," and convert each value into a symbol. We then iterate over the rest of the CSV data and create a Hash object for each row of user data. In each Hash we are binding the relevant descriptor to each piece of user data (through the use of ",(0,r.kt)("inlineCode",{parentName:"p"},".zip"),"). This enables us to reference each of the user values by looking them up in the Hash by their descriptor symbol."),(0,r.kt)("p",null,"Next we'll need a helper method that will responsibly obtain the notification text from the page. It will need to both wait for the text to appear and clean up the resulting text so it doesn't include any extraneous characters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"def notification_text\n  wait = Selenium::WebDriver::Wait.new(timeout: 5)\n  wait.until { @driver.find_element(class: 'flash').displayed? }\n  @driver.find_element(class: 'flash').text.delete('^a-zA-z !.')\nend\n")),(0,r.kt)("p",null,"We use the stock Selenium Wait function (e.g., an explicit wait) to continuously perform an action until either the timeout is reached or the action is true (whichever comes first). We then use it to see if the notification text is displayed on the page. If it is, then we grab the text and clean it up with a regular expression that deletes non-letter characters while preserving ",(0,r.kt)("inlineCode",{parentName:"p"},"!")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".")," (which are expected in the output we're testing for)."),(0,r.kt)("p",null,"Now we're ready to wire up our test. In it we will iterate through each of the user entries in the CSV file and use their data to both complete a login action and verify the notification message."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"user_data.each do |user|\n  run do\n    @driver.get 'http://the-internet.herokuapp.com/login'\n    @driver.find_element(id: 'username').send_keys user[:username]\n    @driver.find_element(id: 'password').send_keys user[:password]\n    @driver.find_element(id: 'login').submit\n    begin\n      expect(notification_text).to eql user[:notification_message]\n    rescue Exception => error\n      puts error.message\n    end\n  end\nend\n")),(0,r.kt)("p",null,"We wrap the notification message assertion in a ",(0,r.kt)("inlineCode",{parentName:"p"},"rescue")," block so that when an exception occurs the test will continue on with the next piece of user data after outputting the failure message to the command prompt."),(0,r.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,r.kt)("p",null,"If you save this file and run it (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"ruby data_driven.rb")," from the command-line) the script will parse the CSV file and perform the following for each entry:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Open the browser"),(0,r.kt)("li",{parentName:"ul"},"Load the login page"),(0,r.kt)("li",{parentName:"ul"},"Submit the login form with user data"),(0,r.kt)("li",{parentName:"ul"},"Grab the notification message and assert it against the expected value"),(0,r.kt)("li",{parentName:"ul"},"Close the browser")),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"By storing data in a central repository to use for your tests and using Data-driven testing, you can simplify running repeated tests with various outputs."),(0,r.kt)("p",null,"Happy Testing!"))}d.isMDXComponent=!0}}]);