"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[7114],{47114:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>l,default:()=>s,frontMatter:()=>i,toc:()=>o});var n=a(87462),r=(a(67294),a(3905));const i={},l=void 0,o=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}],p={toc:o},d="wrapper";function s(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"Our example application is available ",(0,r.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/hovers"},"here")," on ",(0,r.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the-internet"),". It has a few avatars displayed in a grid layout. When you hover over each of them, they display additional user information and a link to view a full profile."),(0,r.kt)("p",null,"We're going to write a test that will hover over the first avatar and make sure that this additional information appears."),(0,r.kt)("p",null,"First, we'll want to include our requisite libraries (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to control the browser, and ",(0,r.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers")," for our assertion) and wire up some ",(0,r.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," methods."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: hover.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,r.kt)("p",null,"Now let's write our test."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/hovers'\n  an_avatar = @driver.find_element(class: 'figure')\n  @driver.action.move_to(an_avatar).perform\n  expect(@driver.find_element(class: 'figcaption').displayed?).to eql true\nend\n")),(0,r.kt)("p",null,"After loading the page we find the first avatar and store it in a variable (",(0,r.kt)("inlineCode",{parentName:"p"},"an_avatar"),"). We then use Selenium's ",(0,r.kt)("inlineCode",{parentName:"p"},"action.move_to")," method and feed the avatar variable to it (which triggers the hover)."),(0,r.kt)("p",null,"We then check to see if the additional user information is displayed with ",(0,r.kt)("inlineCode",{parentName:"p"},".displayed?")," and wrap that in an assertion."),(0,r.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,r.kt)("p",null,"If we save this file and run it (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"ruby hover.rb")," from the command-line) here is what will happen:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Open the browser"),(0,r.kt)("li",{parentName:"ul"},"Visit the page"),(0,r.kt)("li",{parentName:"ul"},"Hover over the first avatar"),(0,r.kt)("li",{parentName:"ul"},"Assert that the caption appeared on the page"),(0,r.kt)("li",{parentName:"ul"},"Close the browser")),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"Hopefully this will help you handle more complex user interactions like hovers."),(0,r.kt)("p",null,"Happy Testing!"))}s.isMDXComponent=!0}}]);