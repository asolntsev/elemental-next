"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[9930],{69930:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>s,default:()=>d,frontMatter:()=>i,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={},s=void 0,l=[{value:"An Example",id:"an-example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}],p={toc:l},o="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(o,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"an-example"},"An Example"),(0,r.kt)("p",null,"First we'll include our requisite libraries, declare the test class, and wire up some simple ",(0,r.kt)("inlineCode",{parentName:"p"},"setUp")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"tearDown")," methods."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# filename: keyboard_keys.py\nimport unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.common.action_chains import ActionChains\nfrom selenium.webdriver.common.by import By\n\nclass KeyboardKeys(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n\n    def tearDown(self):\n        self.driver.quit()\n# ...\n")),(0,r.kt)("p",null,"Now we can wire up our test."),(0,r.kt)("p",null,"Let's use an example from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet")," that will display what key has been pressed (",(0,r.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/key_presses"},"link"),"). We'll use the result text that gets displayed to perform our assertion."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# filename: keyboard_keys.py\n# ...\n    def test_example_1(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/key_presses')\n        ddriver.find_element(By.CLASS_NAME, 'example').send_keys(Keys.SPACE)\n        assert driver.find_element(By.ID, 'result').text == 'You entered: SPACE'\n        ActionChains(driver).send_keys(Keys.TAB).perform()\n        assert driver.find_element(By.ID, 'result').text == 'You entered: TAB'\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,r.kt)("p",null,"After visiting the page we find an element that's visible (e.g., the div that contains the example on the page) and send the space key to it (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},".send_keys(Keys.SPACE"),"). Then we grab the resulting text (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"driver.find_element(By.ID, 'result').text"),") and assert that it says what we expect (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"'You entered: SPACE'"),")."),(0,r.kt)("p",null,"Alternatively, we can also issue a key press without finding the element first by using the Action Builder (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"ActionChains"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# filename: keyboard_keys.py\n# ...\n    def test_example_1(self):\n        # ...\n        ActionChains(driver).send_keys(Keys.TAB).perform()\n        assert driver.find_element(By.ID, 'result').text == 'You entered: TAB'\n\nif __name__ == \"__main__\":\n    unittest.main()\n")),(0,r.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,r.kt)("p",null,"When we save this file and run it (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"python keyboard_keys.py")," from the command-line) here is what will happen:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Open the browser"),(0,r.kt)("li",{parentName:"ul"},"Visit the page"),(0,r.kt)("li",{parentName:"ul"},"Find the element and send the space key to it"),(0,r.kt)("li",{parentName:"ul"},"Find the result text on the page and check that it's what we expect"),(0,r.kt)("li",{parentName:"ul"},"Send the tab key to the element that's currently in focus"),(0,r.kt)("li",{parentName:"ul"},"Find the result text on the page and check that it's what we expect"),(0,r.kt)("li",{parentName:"ul"},"Close the browser")),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"If you have a specific element that you want to issue key presses to, then finding the element first is the way to go. But if you don't have a receiving element, or you need to string together multiple key presses, then the Action Builder is what you should reach for."),(0,r.kt)("p",null,"Happy Testing!"))}d.isMDXComponent=!0}}]);