"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[3396],{43396:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>i,default:()=>u,frontMatter:()=>a,toc:()=>s});var n=r(87462),o=(r(67294),r(3905));const a={},i=void 0,s=[{value:"A Solution",id:"a-solution",level:2},{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}],p={toc:s},l="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(l,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"a-solution"},"A Solution"),(0,o.kt)("p",null,"The tried and true approach that Selenium Committers and Practitioners recommend is to use a proxy server. With it, you will be able to watch and manipulate network traffic to and from the application you're testing. Thus giving you access to a whole host of functionality that isn't available otherwise."),(0,o.kt)("p",null,"Let's step through an example using ",(0,o.kt)("a",{parentName:"p",href:"http://bmp.lightbody.net/"},"BrowserMob Proxy"),"."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"First we need to download a copy of ",(0,o.kt)("a",{parentName:"p",href:"http://bmp.lightbody.net/"},"BrowserMob Proxy"),"."),(0,o.kt)("p",null,"Next we'll create a script and pull in our requisite libraries (e.g., ",(0,o.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to drive the browser, ",(0,o.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," and it's matchers for our assertion, and the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/jarib/browsermob-proxy-rb"},(0,o.kt)("inlineCode",{parentName:"a"},"browsermob/proxy"))," library to control the proxy server)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: status_codes.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\nrequire 'browsermob/proxy'\n")),(0,o.kt)("p",null,"Now let's create a method to prepare the proxy for use with Selenium. In it we start the proxy server, configure a browser profile to use it (for Firefox in this case), and return the profile object."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"def configure_proxy\n  server = BrowserMob::Proxy::Server.new(\n    File.join(Dir.pwd, 'browsermob-proxy-2.0.0/bin/browsermob-proxy'))\n  @proxy = server.start.create_proxy\n  profile = Selenium::WebDriver::Firefox::Profile.new\n  profile.proxy = @proxy.selenium_proxy\n  profile\nend\n")),(0,o.kt)("p",null,"Next we wire up some simple ",(0,o.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"run")," methods to handle our test configuration."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"def setup\n  @driver = Selenium::WebDriver.for :firefox, profile: configure_proxy\nend\n\ndef teardown\n  @driver.quit\n  @proxy.close\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"setup")," we use the ",(0,o.kt)("inlineCode",{parentName:"p"},"configure_proxy")," method when specifying the profile object. And we close the proxy in ",(0,o.kt)("inlineCode",{parentName:"p"},"teardown")," (after quitting the Selenium session)."),(0,o.kt)("p",null,"Now let's create a helper method to pull the status code out of the browser's ",(0,o.kt)("a",{parentName:"p",href:"http://www.softwareishard.com/blog/har-12-spec/"},"HTTP Archive")," (a.k.a. HAR) when an action is performed on the page."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"def retrieve_status_code\n  @proxy.new_har\n  yield\n  @proxy.har.entries.first.response.status\nend\n")),(0,o.kt)("p",null,"Now we're ready to wire up our test."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  status_code = retrieve_status_code do\n    @driver.get 'http://the-internet.herokuapp.com/status_codes/404'\n  end\n\n  expect(status_code).to eql 404\nend\n")),(0,o.kt)("p",null,"When visiting the page we are passing the Selenium command to the ",(0,o.kt)("inlineCode",{parentName:"p"},"retrieve_status_code")," method which returns the HTTP response code. We store this in a ",(0,o.kt)("inlineCode",{parentName:"p"},"status_code")," variable and use it to check that the response code is what we expect (",(0,o.kt)("inlineCode",{parentName:"p"},"404"),")."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"NOTE:")," If you get an error when running your test, be sure to append ",(0,o.kt)("inlineCode",{parentName:"p"},"log: true")," when creating an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"Browsermob::Proxy::Server"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"  server = BrowserMob::Proxy::Server.new(\n    File.join(Dir.pwd, 'browsermob-proxy-2.0.0/bin/browsermob-proxy'), log: true)\n")),(0,o.kt)("p",null,"Now when you run your test, you will see more detailed information as to why the server was unable to start."),(0,o.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,o.kt)("p",null,"If you save this file and run it (e.g., ",(0,o.kt)("inlineCode",{parentName:"p"},"ruby status_codes.rb")," from the command-line) here is what will happen:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Proxy server starts"),(0,o.kt)("li",{parentName:"ul"},"Proxy server session created"),(0,o.kt)("li",{parentName:"ul"},"Browser opens"),(0,o.kt)("li",{parentName:"ul"},"Visit the URL"),(0,o.kt)("li",{parentName:"ul"},"Retrieve the HTTP Status Code from loading the page"),(0,o.kt)("li",{parentName:"ul"},"Check that the status code is what was expected"),(0,o.kt)("li",{parentName:"ul"},"Browser closes"),(0,o.kt)("li",{parentName:"ul"},"Proxy session closes")),(0,o.kt)("h2",{id:"summary"},"Summary"),(0,o.kt)("p",null,"This tip was inspired by ",(0,o.kt)("a",{parentName:"p",href:"https://twitter.com/jimevansmusic"},"Jim Evans'")," multi-part blog post series on doing the same thing in C# with Fiddler (",(0,o.kt)("a",{parentName:"p",href:"http://jimevansmusic.blogspot.com/2013/08/implementing-webdriver-http-status.html"},"1"),", ",(0,o.kt)("a",{parentName:"p",href:"http://jimevansmusic.blogspot.com/2013/08/implementing-http-status-codes-in.html"},"2"),", ",(0,o.kt)("a",{parentName:"p",href:"http://jimevansmusic.blogspot.com/2013/08/implementing-http-status-codes-in_17.html"},"3"),") which was in response to ",(0,o.kt)("a",{parentName:"p",href:"https://code.google.com/p/selenium/issues/detail?id=141"},"Selenium Issue 141"),". Thanks Jim!"),(0,o.kt)("p",null,"Happy Testing!"))}u.isMDXComponent=!0}}]);