"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[4065],{34065:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>a,default:()=>p,frontMatter:()=>l,toc:()=>o});var r=t(87462),i=(t(67294),t(3905));const l={},a=void 0,o=[{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}],s={toc:o},d="wrapper";function p(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("p",null,"For this example we'll use ",(0,i.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/login"},"a login example")," from ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the-internet"),"."),(0,i.kt)("p",null,"First let's require our necessary libraries (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to control the browser and ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"RSpec::Matchers")," for our assertions) and wire up some simple ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: exception_handling.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef wait_for(seconds)\n  Selenium::WebDriver::Wait.new(timeout: seconds).until { yield }\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"To demonstrate the problem, let's write a basic test to exercise the login page. After logging in, we'll check to see that the login form is no longer displayed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/login'\n  @driver.find_element(id: 'username').send_keys('tomsmith')\n  @driver.find_element(id: 'password').send_keys('SuperSecretPassword!')\n  @driver.find_element(id: 'login').submit\n  wait_for(10) { @driver.find_element(css: '.icon-2x').displayed? }\n  expect(@driver.find_element(id: 'login').displayed?).to eql false\nend\n")),(0,i.kt)("p",null,"When we run this (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby exception_handling.rb")," from the command-line) our test will not pass. It will log in just fine, but it will error when performing the assertion -- returning the following exception:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'Unable to locate element: {"method":"id","selector":"login"} (Selenium::WebDriver::Error::NoSuchElementError)\n')),(0,i.kt)("p",null,"In the Python Selenium bindings they have a section of actions called ",(0,i.kt)("a",{parentName:"p",href:"https://www.selenium.dev/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html"},"expected conditions"),". One of them is designed specifically for this use case (called ",(0,i.kt)("inlineCode",{parentName:"p"},"visibility_of_element_located"),"). It checks to see if an element is displayed and returns ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," if it's not (rather than throwing an exception)."),(0,i.kt)("p",null,"Unfortunately the Ruby Selenium bindings do not come with this functionality built-in, and there are no plans to add it. So let's go through how to do it ourselves. For that we'll need a basic understanding of exceptions and how to rescue them (",(0,i.kt)("a",{parentName:"p",href:"https://skorks.com/2009/09/ruby-exceptions-and-exception-handling/"},"here's a quick primer"),") and the name of the exception we want to rescue. You can find a full list of the Selenium exceptions for Ruby ",(0,i.kt)("a",{parentName:"p",href:"https://seleniumhq.github.io/selenium/docs/api/rb/Selenium/WebDriver/Error.html"},"here"),". But we shouldn't need all of them since our previous test run told us the name of the exception."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Selenium::WebDriver::Error::NoSuchElementError")," is the one we want. Let's put it to use by wrapping the last display check in our test with a ",(0,i.kt)("inlineCode",{parentName:"p"},"rescue")," block, making it return ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," if it's triggered."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/login'\n  @driver.find_element(id: 'username').send_keys('tomsmith')\n  @driver.find_element(id: 'password').send_keys('SuperSecretPassword!')\n  @driver.find_element(id: 'login').submit\n  begin\n    expect(@driver.find_element(id: 'login').displayed?).to eql false\n  rescue Selenium::WebDriver::Error::NoSuchElementError\n    false\n  rescue Selenium::WebDriver::Error::StaleElementReferenceError\n    false\n  end\nend\n")),(0,i.kt)("p",null,"Now if we run the test (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby exception_handling.rb")," from the command-line) it will pass. But this is far from a clean implementation. Let's clean things up a bit."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"def rescue_exceptions\n  begin\n    yield\n  rescue Selenium::WebDriver::Error::NoSuchElementError\n    false\n  rescue Selenium::WebDriver::Error::StaleElementReferenceError\n    false\n  end\nend\n\ndef is_displayed?(locator = {})\n  rescue_exceptions { @driver.find_element(locator).displayed? }\nend\n\nrun do\n  @driver.get 'http://the-internet.herokuapp.com/login'\n  @driver.find_element(id: 'username').send_keys('tomsmith')\n  @driver.find_element(id: 'password').send_keys('SuperSecretPassword!')\n  @driver.find_element(id: 'login').submit\n  expect(is_displayed?(id: 'login')).to eql false\nend\n")),(0,i.kt)("p",null,"By breaking apart our rescue block (into a ",(0,i.kt)("inlineCode",{parentName:"p"},"rescue_exceptions")," method) and our ",(0,i.kt)("inlineCode",{parentName:"p"},"displayed?")," check (into an ",(0,i.kt)("inlineCode",{parentName:"p"},"is_displayed?")," method) we're left with a cleaner (and reusable) implementation in our test code. And if you wanted to add another Selenium exception to the mix, then you would simply add a new ",(0,i.kt)("inlineCode",{parentName:"p"},"rescue")," statement along with the result you want in ",(0,i.kt)("inlineCode",{parentName:"p"},"rescue_exceptions"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"def rescue_exceptions\n  begin\n    yield\n  rescue Selenium::WebDriver::Error::NoSuchElementError\n    false\n  rescue Selenium::WebDriver::Error::StaleElementReferenceError\n    false\n  end\nend\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: ",(0,i.kt)("inlineCode",{parentName:"strong"},"NoSuchElementError")," and ",(0,i.kt)("inlineCode",{parentName:"strong"},"StaleElementReferenceError")," are the two most common errors you'll run into when using Selenium.")),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("p",null,"If your test is still failing, it might not have enough time to find the ",(0,i.kt)("inlineCode",{parentName:"p"},"login")," element. In this case, you will have to add a ",(0,i.kt)("inlineCode",{parentName:"p"},"wait")," to your test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# exception-with-wait.rb\n\ndef wait_for(seconds)\n  Selenium::WebDriver::Wait.new(timeout: seconds).until { yield }\nend\n")),(0,i.kt)("p",null,"Also add this line to your run code, just before the ",(0,i.kt)("inlineCode",{parentName:"p"},"expect")," line:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# exception-with-wait.rb\n\nwait_for(10) { @driver.find_element(css: '.icon-2x').displayed? }\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"The full script with ",(0,i.kt)("inlineCode",{parentName:"strong"},"wait")," added will be as follows:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# exception-with-wait.rb\n\n# filename: exception_handling.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n\ndef rescue_exceptions\n  begin\n    yield\n  rescue Selenium::WebDriver::Error::NoSuchElementError\n    false\n  rescue Selenium::WebDriver::Error::StaleElementReferenceError\n    false\n  end\nend\n\ndef is_displayed?(locator = {})\n  rescue_exceptions { @driver.find_element(locator).displayed? }\nend\n\ndef wait_for(seconds)\n  Selenium::WebDriver::Wait.new(timeout: seconds).until { yield }\nend\n\n\nrun do\n  @driver.get 'http://the-internet.herokuapp.com/login'\n  @driver.find_element(id: 'username').send_keys('tomsmith')\n  @driver.find_element(id: 'password').send_keys('SuperSecretPassword!')\n  @driver.find_element(id: 'login').submit\n  wait_for(10) { @driver.find_element(css: '.icon-2x').displayed? }\n  expect(is_displayed?(id: 'login')).to eql false\nend\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"If you save the file and run it (e.g, ",(0,i.kt)("inlineCode",{parentName:"p"},"ruby exception_handling.rb")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the page"),(0,i.kt)("li",{parentName:"ul"},"Log in"),(0,i.kt)("li",{parentName:"ul"},"Check to see that the login form is NOT displayed"),(0,i.kt)("li",{parentName:"ul"},"Catch the exception from Selenium and return ",(0,i.kt)("inlineCode",{parentName:"li"},"false")," instead"),(0,i.kt)("li",{parentName:"ul"},"Complete the assertion using the boolean response (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),")"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip has helped you learn how to work effectively with exceptions in Selenium."),(0,i.kt)("p",null,"Happy Testing!"))}p.isMDXComponent=!0}}]);