"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[65087],{65087:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>d,frontMatter:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={},o=void 0,p=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}],l={toc:p},s="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(s,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"Our example page is from ",(0,r.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the-internet")," and can be seen ",(0,r.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/abtest"},"here"),". There are three different versions of the page that are available. On each page the heading text will vary:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Control: ",(0,r.kt)("inlineCode",{parentName:"li"},"A/B Test Control")),(0,r.kt)("li",{parentName:"ul"},"Variation 1: ",(0,r.kt)("inlineCode",{parentName:"li"},"A/B Test Variation 1")),(0,r.kt)("li",{parentName:"ul"},"Opt-out: ",(0,r.kt)("inlineCode",{parentName:"li"},"No A/B Test"))),(0,r.kt)("p",null,"Let's kick things off by loading our requisite libraries (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to control the browser and ",(0,r.kt)("inlineCode",{parentName:"p"},"rspec/expectations")," and it's matchers for our assertions) and adding some simple ",(0,r.kt)("inlineCode",{parentName:"p"},"setup"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"teardown"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," methods to handle our test configuration."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: split_test.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude ::RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,r.kt)("p",null,"Now let's wire up our first test to step through loading the split testing page and verifying that the text changes as we forge an opt-out cookie."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/abtest'\n  heading_text = @driver.find_element(css: 'h3').text\n  expect(['A/B Test Variation 1', 'A/B Test Control'].include? heading_text).to eql true\n  @driver.manage.add_cookie(name: 'optimizelyOptOut', value: 'true')\n  @driver.navigate.refresh\n  heading_text = @driver.find_element(css: 'h3').text\n  expect(heading_text).to eql('No A/B Test')\nend\n")),(0,r.kt)("p",null,"After navigating to the page we confirm that we are in one of the A/B test groups by grabbing the heading text and checking to see if it matches what we expect. After that we add the opt-out cookie, refresh the page, and then confirm that we are no longer in the A/B test group by checking the heading text again."),(0,r.kt)("p",null,"We could also load the opt-out cookie before navigating to this page."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com'\n  @driver.manage.add_cookie(name: 'optimizelyOptOut', value: 'true')\n  @driver.get 'http://the-internet.herokuapp.com/abtest'\n  expect(@driver.find_element(css: 'h3').text).to eql('No A/B Test')\nend\n")),(0,r.kt)("p",null,"Here we first navigate to the main page of the site and then add the opt-out cookie. After that, we navigate to the split test page and perform our checks. Alternatively, we could opt out without forging a cookie. Instead we would need to append an opt out request to the URL."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.get 'http://the-internet.herokuapp.com/abtest?optimizely_opt_out=true'\n  @driver.switch_to.alert.dismiss\n  expect(@driver.find_element(css: 'h3').text).to eql('No A/B Test')\nend\n")),(0,r.kt)("p",null,"By appending ",(0,r.kt)("inlineCode",{parentName:"p"},"?optimizely_opt_out=true")," we achieve the same outcome as before. Keep in mind that this approach triggers a JavaScript alert, so we have to switch to and dismiss it (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"@driver.switch_to.alert.dismiss"),") before performing our check."),(0,r.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,r.kt)("p",null,"If you save this file and run it (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"ruby split_test.rb")," from the command-line) here is what will happen:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Open the browser"),(0,r.kt)("li",{parentName:"ul"},"Opt-out of the split tests (either by cookie or appended URL)"),(0,r.kt)("li",{parentName:"ul"},"Visit the split testing page"),(0,r.kt)("li",{parentName:"ul"},"Grab the header text"),(0,r.kt)("li",{parentName:"ul"},"Confirm that the session is opted out of the split tests"),(0,r.kt)("li",{parentName:"ul"},"Close the browser")),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"Hopefully this tip was helpful in guiding you in different methods of how to opt out of split tests."),(0,r.kt)("p",null,"Happy Testing!"))}d.isMDXComponent=!0}}]);