"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[41654],{41654:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>o,default:()=>u,frontMatter:()=>r,toc:()=>l});var n=a(87462),i=(a(67294),a(3905));const r={},o=void 0,l=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}],p={toc:l},s="wrapper";function u(e){let{components:t,...a}=e;return(0,i.kt)(s,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: We are using ",(0,i.kt)("a",{parentName:"strong",href:"http://the-internet.herokuapp.com/upload"},"a file upload example")," found on ",(0,i.kt)("a",{parentName:"strong",href:"https://github.com/tourdedave/the-internet"},"the-internet"),".")),(0,i.kt)("p",null,"First let's import our requisite classes for annotations (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.junit.After"),", etc.), driving the browser with Selenium (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.openqa.selenium.WebDriver"),", etc.), matchers for assertions (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"org.hamcrest.CoreMatchers"),", etc. ), and something to handle local files (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"java.io.File"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// filename: Upload.java\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.firefox.FirefoxDriver;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.assertThat;\nimport java.io.File;\n")),(0,i.kt)("p",null,"Now to create a class and take care of the test's setup and teardown."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// filename: Upload.java\n// ...\npublic class Upload {\n    WebDriver driver;\n\n    @Before\n    public void setUp() throws Exception {\n        driver = new FirefoxDriver();\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        driver.quit();\n    }\n")),(0,i.kt)("p",null,"After specifying the class (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"public class Upload {"),") we create a field variable (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"WebDriver driver;"),") to store our Selenium instance for reuse throughout the class. We then create a ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp()")," method with a ",(0,i.kt)("inlineCode",{parentName:"p"},"@Before")," annotation so it runs before our test. In this method we are creating an instance of Selenium with Firefox (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"driver = new FirefoxDriver();"),")."),(0,i.kt)("p",null,"After our test executes, the ",(0,i.kt)("inlineCode",{parentName:"p"},"tearDown()")," method will run thanks to the ",(0,i.kt)("inlineCode",{parentName:"p"},"@After")," annotation. This calls ",(0,i.kt)("inlineCode",{parentName:"p"},"driver.quit();")," which will close the browser instance."),(0,i.kt)("p",null,"Now to wire up our test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'    @Test\n    public void uploadFile() throws Exception {\n        String filename = "some-file.txt";\n        File file = new File(filename);\n        String path = file.getAbsolutePath();\n        driver.get("http://the-internet.herokuapp.com/upload");\n        driver.findElement(By.id("file-upload")).sendKeys(path);\n        driver.findElement(By.id("file-submit")).click();\n        String text = driver.findElement(By.id("uploaded-files")).getText();\n        assertThat(text, is(equalTo(filename)));\n    }\n\n}\n')),(0,i.kt)("p",null,"We create an ",(0,i.kt)("inlineCode",{parentName:"p"},"uploadFile()")," method and annotate it with ",(0,i.kt)("inlineCode",{parentName:"p"},"@Test")," so it is run as a test. In it we create a new file called ",(0,i.kt)("inlineCode",{parentName:"p"},"some-file.txt")," in the present working directory and get it's absolute path."),(0,i.kt)("p",null,"Next we visit the page with the upload form, input the string value of ",(0,i.kt)("inlineCode",{parentName:"p"},"path")," (e.g., the full path to the file plus the filename with it's extension), and submit the form. After the file is uploaded to the page it will display the filename it just processed. We use this text to perform our assertion (making sure the uploaded file is what we expect)."),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("p",null,"When we save this file and run it (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn clean test")," from the command-line) here is what will happen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open the browser"),(0,i.kt)("li",{parentName:"ul"},"Visit the upload form page"),(0,i.kt)("li",{parentName:"ul"},"Inject the file path into the form and submit it"),(0,i.kt)("li",{parentName:"ul"},"Page displays the uploaded filename"),(0,i.kt)("li",{parentName:"ul"},"Grab the text from the page and assert it's what we expect"),(0,i.kt)("li",{parentName:"ul"},"Close the browser")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"This approach will work across all browsers. But if you want to use it with a remote instance (e.g., a Selenium Grid or Sauce Labs), then you'll want to have a look at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SeleniumHQ/selenium/blob/ab1e647d0fc8fc39e6b00ae94321ab228b6728f2/java/client/src/org/openqa/selenium/remote/FileDetector.java"},(0,i.kt)("inlineCode",{parentName:"a"},"FileDetector")),". You can see a write-up on it from Sauce Labs ",(0,i.kt)("a",{parentName:"p",href:"https://saucelabs.com/resources/articles/selenium-file-upload"},"here"),"."),(0,i.kt)("p",null,"Thanks to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/RomanIsko"},"Roman Isko")," for contributing the initial Java code for this tip!"),(0,i.kt)("p",null,"Happy Testing!"))}u.isMDXComponent=!0}}]);