"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[3704],{33704:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>d,frontMatter:()=>r,toc:()=>s});var i=n(87462),a=(n(67294),n(3905));const r={},l=void 0,s=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}],o={toc:s},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,i.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"For this example we will use ",(0,a.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/dropdown"},"a dropdown list")," from ",(0,a.kt)("a",{parentName:"p",href:"http://github.com/tourdedave/the-internet"},"the-internet"),". In this list there a few options to select, one which should be disabled. Let's find this element and assert that it is disabled.\nFirst let's require our dependent libraries (",(0,a.kt)("inlineCode",{parentName:"p"},"import unittest")," for our test framework and ",(0,a.kt)("inlineCode",{parentName:"p"},"from selenium import webdriver")," to drive the browser), declare our test class, and wire up some test ",(0,a.kt)("inlineCode",{parentName:"p"},"setUp")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"tearDown")," methods."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# filename: disabled_elements.py\nfrom time import sleep\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nimport unittest\n\n\nclass DisabledElements(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n\n    def tearDown(self):\n        self.driver.quit()\n# ...\n")),(0,a.kt)("p",null,"Now let's wire up our test."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# filename: disabled_elements.py\n# ...\n    def test_dropdown(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/dropdown')\n        wait = WebDriverWait(driver, 10)\n        dropdown_list = wait.until(\n            EC.presence_of_all_elements_located((By.ID, 'dropdown')))\n        assert not dropdown_list[0].is_enabled() is False\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n\n")),(0,a.kt)("p",null,"After loading the page, we find all of the elements that have an option tag (which are all of the items in the dropdown list). This returns a list of elements, so we use the first one (which is the one with the text of ",(0,a.kt)("inlineCode",{parentName:"p"},"'Please select an option'"),")."),(0,a.kt)("p",null,"Once we have the element we want we see if it's enabled (with ",(0,a.kt)("inlineCode",{parentName:"p"},".is_enabled"),") and assert based on the response."),(0,a.kt)("p",null,"And since we grabbed all of the dropdown list options, we can easily test the opposite case by checking the second or third option in the list."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"        assert dropdown_list[1].is_enabled() is True\n")),(0,a.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,a.kt)("p",null,"When we save this file and run it (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"python disabled_elements.py")," from the command-line) here is what will happen:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Open a browser"),(0,a.kt)("li",{parentName:"ul"},"Visit the page"),(0,a.kt)("li",{parentName:"ul"},"Grab all dropdown list elements"),(0,a.kt)("li",{parentName:"ul"},"Assert that the first element in the list is not enabled"),(0,a.kt)("li",{parentName:"ul"},"Assert that the second element in the list is enabled"),(0,a.kt)("li",{parentName:"ul"},"Close the browser")),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,"Hopefully this tip has helped make the task of seeing whether or not an element is enabled or disabled more approachable."),(0,a.kt)("p",null,"Happy Testing!"))}d.isMDXComponent=!0}}]);