"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[1589],{51589:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>l,default:()=>m,frontMatter:()=>i,toc:()=>o});var r=t(87462),a=(t(67294),t(3905));const i={},l=void 0,o=[{value:"Example 1 - A Proxy Example",id:"example-1---a-proxy-example",level:2},{value:"Example 2 - An HTTP Library Example",id:"example-2---an-http-library-example",level:2},{value:"Example 3 - A JavaScript Example",id:"example-3---a-javascript-example",level:2},{value:"Summary",id:"summary",level:2}],s={toc:o},p="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"example-1---a-proxy-example"},"Example 1 - A Proxy Example"),(0,a.kt)("p",null,"In this example we'll use Browsermob Proxy. For a primer on what this is and how to use it see ",(0,a.kt)("a",{parentName:"p",href:"/tips/64-limit-bandwidth"},"tip 64"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: broken_image_1.rb\n\nrequire 'browsermob/proxy'\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef configure_proxy\n  server = BrowserMob::Proxy::Server.new('./browsermob-proxy-2.0-beta-9/bin/browsermob-proxy')\n  server.start\n  @proxy = server.create_proxy\n  profile = Selenium::WebDriver::Firefox::Profile.new\n  profile.proxy = @proxy.selenium_proxy\n  return profile\nend\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox, profile: configure_proxy\nend\n\ndef teardown\n  @driver.quit\n  @proxy.close\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n\nrun do\n  @proxy.new_har\n\n  @driver.get 'http://the-internet.herokuapp.com/broken_images'\n\n  all_images = @driver.find_elements(tag_name: 'img')\n\n  broken_images = []\n  all_images.each do |img|\n    broken_images << @proxy.har.entries.find do |entry|\n      entry.request.url == img.attribute('src') && entry.response.status == 404\n    end\n  end\n\n  expect(broken_images).to be_empty\nend\n")),(0,a.kt)("p",null,"If you save this file and run it (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"ruby broken_image_1.rb"),") here is what will happen:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Proxy server starts"),(0,a.kt)("li",{parentName:"ul"},"Proxy server session created"),(0,a.kt)("li",{parentName:"ul"},"Browser opens"),(0,a.kt)("li",{parentName:"ul"},"Visit the page"),(0,a.kt)("li",{parentName:"ul"},"Iterate through each image in the HTTP Archive and see if it has a ",(0,a.kt)("inlineCode",{parentName:"li"},"404")," status code"),(0,a.kt)("li",{parentName:"ul"},"Store each broken image in a collection"),(0,a.kt)("li",{parentName:"ul"},"Check that the broken images collection is empty")),(0,a.kt)("h2",{id:"example-2---an-http-library-example"},"Example 2 - An HTTP Library Example"),(0,a.kt)("p",null,"For this example, we'll use a simple HTTP library called ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/rest-client/rest-client"},(0,a.kt)("inlineCode",{parentName:"a"},"rest-client")),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: broken_image_2.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n\nrun do\n  require 'rest-client'\n\n  @driver.get 'http://the-internet.herokuapp.com/broken_images'\n\n  all_images = @driver.find_elements(tag_name: 'img')\n\n  all_images.each do |img|\n    RestClient.get img.attribute('src') do |response, request, result|\n      expect(response.code).to eq 200\n    end\n  end\n\nend\n")),(0,a.kt)("p",null,"If you save this file and run it (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"ruby broken_images_2.rb")," from the command-line) here is what will happen:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Open the browser"),(0,a.kt)("li",{parentName:"ul"},"Find all images on the page"),(0,a.kt)("li",{parentName:"ul"},"Iterate through each image"),(0,a.kt)("li",{parentName:"ul"},"Perform a ",(0,a.kt)("inlineCode",{parentName:"li"},"GET")," request on the image and grab it's response status code"),(0,a.kt)("li",{parentName:"ul"},"Assert that the status code is ",(0,a.kt)("inlineCode",{parentName:"li"},"200")),(0,a.kt)("li",{parentName:"ul"},"Close the browser")),(0,a.kt)("p",null,"By using an HTTP library we get the same outcome as we saw with a proxy server. There are additional requests being made but it's substantially faster since it has less overhead."),(0,a.kt)("h2",{id:"example-3---a-javascript-example"},"Example 3 - A JavaScript Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: broken_image_3.rb\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\ninclude RSpec::Matchers\n\ndef setup\n  @driver = Selenium::WebDriver.for :firefox\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n\nrun do\n  @driver.get 'http://the-internet.herokuapp.com/broken_images'\n\n  all_images = @driver.find_elements tag_name: 'img'\n\n  broken_images = all_images.reject do |image|\n    @driver.execute_script(\n      \"return arguments[0].complete && \\\n        typeof arguments[0].naturalWidth != \\\"undefined\\\" && \\\n        arguments[0].naturalWidth > 0\",\n      image)\n  end\n\n  expect(broken_images).to be_empty\nend\n")),(0,a.kt)("p",null,"If you save this file and run it (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"broken_image_3.rb")," from the command-line) here is what will happen:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Open the browser"),(0,a.kt)("li",{parentName:"ul"},"Find all images on the page"),(0,a.kt)("li",{parentName:"ul"},"Iterate through each image and inspect that it finished loading and has a defined width"),(0,a.kt)("li",{parentName:"ul"},"Store images that fail inspection in a collection"),(0,a.kt)("li",{parentName:"ul"},"Assert that the collection is empty")),(0,a.kt)("p",null,"This is the leanest approach since it requires no additional setup or extra requests. It's just a matter of executing some JavaScript code to inspect the images."),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,"Your circumstance may vary, so choose the approach that works best for you and your team."),(0,a.kt)("p",null,"A big thanks to ",(0,a.kt)("a",{parentName:"p",href:"https://twitter.com/bbbco"},"Brian Goad")," for the JavaScript solution and pointing me towards ",(0,a.kt)("a",{parentName:"p",href:"http://stackoverflow.com/questions/16784534/find-broken-images-in-page-image-replace-by-another-image/"},"the StackOverflow post where he first came across this"),"."),(0,a.kt)("p",null,"Happy Testing!"))}m.isMDXComponent=!0}}]);