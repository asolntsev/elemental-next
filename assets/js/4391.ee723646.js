"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[4391],{84391:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>u,frontMatter:()=>i,toc:()=>o});var r=n(87462),a=(n(67294),n(3905));const i={},l=void 0,o=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}],s={toc:o},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"Let's start by importing our requisite classes for our test framework (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"NUnit.Framework"),"), driving the browser with Selenium (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"OpenQA.Selenium"),", etc.), and start our class off with some setup and teardown methods."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"// filename: RightClick.cs\nusing NUnit.Framework;\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Firefox;\nusing OpenQA.Selenium.Interactions;\n\npublic class RightClick\n{\n    IWebDriver Driver;\n\n    [SetUp]\n    public void SetUp()\n    {\n        Driver = new FirefoxDriver();\n    }\n\n    [TearDown]\n    public void TearDown()\n    {\n        Driver.Quit();\n    }\n// ...\n")),(0,a.kt)("p",null,"Now we're ready to write our test."),(0,a.kt)("p",null,"Let's use an example from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tourdedave/the-internet"},"the-internet")," that will render a custom context menu when we right-click on a specific area of the page (",(0,a.kt)("a",{parentName:"p",href:"http://the-internet.herokuapp.com/context_menu"},"link"),")."),(0,a.kt)("p",null,"Clicking the context menu item will trigger a JavaScript alert which will say ",(0,a.kt)("inlineCode",{parentName:"p"},"You selected a context menu"),". We'll grab this text and use it to assert that the menu was actually triggered."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'// filename: RightClick.cs\n// ...\n    [Test]\n    public void RightClickExample()\n    {\n        Driver.Navigate().GoToUrl("http://the-internet.herokuapp.com/context_menu");\n        IWebElement MenuArea = Driver.FindElement(By.Id("hot-spot"));\n        Actions Builder = new Actions(Driver);\n        Builder.ContextClick(MenuArea)\n            .SendKeys(Keys.ArrowDown)\n            .SendKeys(Keys.ArrowDown)\n            .SendKeys(Keys.ArrowDown)\n            .SendKeys(Keys.ArrowDown)\n            .SendKeys(Keys.ArrowDown)\n            .SendKeys(Keys.Enter)\n            .Perform();\n        IAlert Alert = Driver.SwitchTo().Alert();\n        Assert.That(Alert.Text.Equals("You selected a context menu"));\n    }\n}\n')),(0,a.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,a.kt)("p",null,"When you save this file and run it (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"nunit3-console.exe .\\RightClick.sln")," from the command-line) here is what will happen."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Open the browser"),(0,a.kt)("li",{parentName:"ul"},"Visit the page"),(0,a.kt)("li",{parentName:"ul"},"Find and right-click the area of the page that renders a custom context menu"),(0,a.kt)("li",{parentName:"ul"},"Navigate to the context menu option with keyboard keys and select it"),(0,a.kt)("li",{parentName:"ul"},"JavaScript alert appears"),(0,a.kt)("li",{parentName:"ul"},"Grab the text of the JavaScript alert"),(0,a.kt)("li",{parentName:"ul"},"Assert that the text from the alert is what we expect"),(0,a.kt)("li",{parentName:"ul"},"Close the browser")),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,"To learn more about context menus, you can read ",(0,a.kt)("a",{parentName:"p",href:"http://blog.teamtreehouse.com/building-html5-context-menus"},"this write-up from the Tree House blog"),"."),(0,a.kt)("p",null,"Happy Testing!"))}u.isMDXComponent=!0}}]);