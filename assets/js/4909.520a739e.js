"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[4909],{4909:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>a,default:()=>d,frontMatter:()=>s,toc:()=>h});var r=n(85893),i=n(11151);const s={},a=void 0,h=[{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}];function l(e){const t={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"example-1",children:"Example 1"}),"\n",(0,r.jsx)(t.p,{children:"We'll first need to pull in our requisite libraries, declare our test class, and wire up some setup and teardown methods for our tests."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"# filename: frames.py\n\nimport unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\nclass Frames(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n\n    def tearDown(self):\n        self.driver.quit()\n\n# ...\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Now onto our test. In it we'll step through ",(0,r.jsx)(t.a,{href:"http://the-internet.herokuapp.com/nested_frames",children:"an example of nested frames"})," which can be found on ",(0,r.jsx)(t.a,{href:"https://github.com/tourdedave/the-internet",children:"the-internet"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"# filename: frames.py\n# ...\n    def test_example_1(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/nested_frames')\n        driver.switch_to.frame('frame-top')\n        driver.switch_to.frame('frame-middle')\n        assert driver.find_element(By.ID,'content').text == \"MIDDLE\", \"content should be MIDDLE\"\n\n# ...\n"})}),"\n",(0,r.jsxs)(t.p,{children:["With Selenium's ",(0,r.jsx)(t.code,{children:".switch_to.frame"})," method we can easily switch to the frame we want. It accepts either an ID or name attribute. But in order to get the text of the middle frame (e.g., a frame nested within another frame), we need to switch to the parent frame (e.g., the top frame) ",(0,r.jsx)(t.em,{children:"and then"})," switch to the child frame (e.g., the middle frame)."]}),"\n",(0,r.jsx)(t.p,{children:"Once we've done that we're able to find the element we need, grab its text, and assert that it's what we expect."}),"\n",(0,r.jsx)(t.p,{children:"While this example helps illustrate the point of frame switching, it's not very practical."}),"\n",(0,r.jsx)(t.h2,{id:"example-2",children:"Example 2"}),"\n",(0,r.jsxs)(t.p,{children:["Here is a more likely example you'll run into -- working with a WYSIWYG Editor like ",(0,r.jsx)(t.a,{href:"http://www.tinymce.com/",children:"TinyMCE"}),". You can see the page we're testing ",(0,r.jsx)(t.a,{href:"http://the-internet.herokuapp.com/tinymce",children:"here"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"# filename: frames.py\n# ...\n    def test_example_2(self):\n        driver = self.driver\n        driver.get('http://the-internet.herokuapp.com/tinymce')\n        driver.switch_to.frame('mce_0_ifr')\n        editor = driver.find_element(By.ID,'tinymce')\n        before_text = editor.text\n        editor.clear()\n        editor.send_keys('Hello World!')\n        after_text = editor.text\n        assert after_text != before_text, \"%s equals %s\" % (before_text, after_text)\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n  assert driver.find_element(By.CSS_SELECTOR, 'h3').text != \"\", \"element should not be empty\"\n"})}),"\n",(0,r.jsx)(t.h2,{id:"expected-behavior",children:"Expected Behavior"}),"\n",(0,r.jsxs)(t.p,{children:["If we save the file and run it (e.g., ",(0,r.jsx)(t.code,{children:"python frames.py"})," from the command-line) here is what will happen:"]}),"\n",(0,r.jsx)("u",{children:"Example 1"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Open the browser"}),"\n",(0,r.jsx)(t.li,{children:"Visit the page"}),"\n",(0,r.jsx)(t.li,{children:"Switch to the nested frame"}),"\n",(0,r.jsx)(t.li,{children:"Grab the text from the frame and assert that Selenium is in the correct place"}),"\n",(0,r.jsx)(t.li,{children:"Close the browser"}),"\n"]}),"\n",(0,r.jsx)("u",{children:"Example 2"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Open the browser"}),"\n",(0,r.jsx)(t.li,{children:"Visit the page"}),"\n",(0,r.jsx)(t.li,{children:"Switch to the frame that contains the TinyMCE editor"}),"\n",(0,r.jsx)(t.li,{children:"Grab and clear the text in the editor"}),"\n",(0,r.jsx)(t.li,{children:"Input and grab new text in the edtitor"}),"\n",(0,r.jsx)(t.li,{children:"Assert that the original and new text entries don't match"}),"\n",(0,r.jsx)(t.li,{children:"Switch to the top level of the page"}),"\n",(0,r.jsx)(t.li,{children:"Grab the text from the top of the page and assert that it's not empty"}),"\n",(0,r.jsx)(t.li,{children:"Close the browser"}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(t.p,{children:"Now you're ready to handily defeat frames when they cross your path."}),"\n",(0,r.jsxs)(t.p,{children:["Thanks to ",(0,r.jsx)(t.a,{href:"https://github.com/trabulmonkee",children:"Mike Millgate"})," for contributing the Python code for this tip, and to ",(0,r.jsx)(t.a,{href:"https://github.com/Dude-X",children:"Isaul Vargas"})," & ",(0,r.jsx)(t.a,{href:"https://github.com/bittner",children:"Peter Bittner"})," for code reviewing!"]}),"\n",(0,r.jsx)(t.p,{children:"Happy Testing!"})]})}function d(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);