"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[9811],{59811:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>s,default:()=>d,frontMatter:()=>l,toc:()=>i});var a=n(87462),r=(n(67294),n(3905));const l={},s=void 0,i=[{value:"Example",id:"example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"Summary",id:"summary",level:2}],o={toc:i},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"Our initial setup stays mostly the same. There are only a couple of minor changes we'll need to make."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"ENV['SAUCE_USERNAME'] = 'your username'\nENV['SAUCE_API_KEY']  = 'your api key'\n\nrequire 'selenium-webdriver'\nrequire 'rspec/expectations'\n\ndef setup(browser_name, browser_version)\n  caps = Selenium::WebDriver::Remote::Capabilities.send(browser_name.to_sym)\n  caps.platform = 'Windows XP'\n  caps.version = browser_version.to_s\n\n  Thread.current[:driver] = Selenium::WebDriver.for(\n    :remote,\n    url: \"https://#{ENV['SAUCE_USERNAME']}:#{ENV['SAUCE_API_KEY']}@ondemand.saucelabs.com/wd/hub\",\n    desired_capabilities: caps)\nend\n\ndef teardown\n  Thread.current[:driver].quit\nend\n")),(0,r.kt)("p",null,"Since we are working with threads, we will need to use variables that are thread safe. The best candidates are\nthread local variables. They have a global scope (similar to global variables) but are only accessible from within\nthe thread that created it. This way we won't run into any odd collisions across simultaneous test runs."),(0,r.kt)("p",null,"So instead of instance variables (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"@driver"),") we are now storing each instance of Selenium in this new kind of\nvariable and referencing it as needed (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"Thread.current[:driver]"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"# filename: example42.rb\n\nBROWSERS = { firefox: '27',\n             chrome: '32',\n             internet_explorer: '8' }\n\ndef run\n  threads = []\n  BROWSERS.each_pair do |browser, browser_version|\n    threads << Thread.new do\n      setup(browser, browser_version)\n      yield\n      teardown\n    end\n  end\n  threads.each { |thread| thread.join }\nend\n")),(0,r.kt)("p",null,"Our browser list remains untouched, but our ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," method has been updated to spawn and join threads (which is how\nyou finish a thread). With this setup a new thread will be spawned for each of the browsers in the list, perform\nits actions, and finish."),(0,r.kt)("p",null,"Will all of that in place, we just need to update our test to use the new thread local driver variable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  Thread.current[:driver].get 'https://the-internet.herokuapp.com'\n  Thread.current[:driver].title.should == 'The Internet'\nend\n")),(0,r.kt)("p",null,"If we run this script from the command line (",(0,r.kt)("inlineCode",{parentName:"p"},"ruby examle42.rb"),") and head over\n",(0,r.kt)("a",{parentName:"p",href:"https://saucelabs.com/account"},"the Sauce Labs Account page"),", then we should see three tests running simultaneously."),(0,r.kt)("p",null,"NOTE: the number of parallel sessions allotted to your Sauce Labs account will dictate how quickly your tests will\nfinish. For instance, if you add two new browsers to ",(0,r.kt)("inlineCode",{parentName:"p"},"BROWSER_LIST")," and run this, only 3 sessions will run in Sauce\nLabs, queuing the other two until some of the original sessions finish."),(0,r.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Simultaneously loads each browser in a Sauce Labs job"),(0,r.kt)("li",{parentName:"ul"},"Each test loads the page and asserts the title is correct"),(0,r.kt)("li",{parentName:"ul"},"Each session closes when it is complete")),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"There are alternative ways to run your tests in parallel. Some more notable approaches include:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"through a test framework (e.g., TestNG in Java)"),(0,r.kt)("li",{parentName:"ul"},"through Continuous Integration"),(0,r.kt)("li",{parentName:"ul"},"through a third-party library (e.g., ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/grosser/parallel_tests"},"parallel_tests in Ruby"),").")),(0,r.kt)("p",null,"For a full write-up on how to parallel_tests, check out ",(0,r.kt)("a",{parentName:"p",href:"https://elementalselenium.com/docs/parallel/27-parallel"},"tip 27"),"."),(0,r.kt)("p",null,"Happy Testing!"))}d.isMDXComponent=!0}}]);