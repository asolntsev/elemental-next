"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[4594],{34594:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>p,default:()=>d,frontMatter:()=>o,toc:()=>r});var a=n(87462),i=(n(67294),n(3905));const o={},p=void 0,r=[{value:"A brief primer on Native App Testing In Sauce Labs",id:"a-brief-primer-on-native-app-testing-in-sauce-labs",level:2},{value:"An iPhone Example",id:"an-iphone-example",level:2},{value:"Expected Behavior",id:"expected-behavior",level:2},{value:"An Android Example",id:"an-android-example",level:2},{value:"Expected Behavior",id:"expected-behavior-1",level:2},{value:"Other Helpful Tidbits",id:"other-helpful-tidbits",level:2},{value:"Inspecting Elements",id:"inspecting-elements",level:3},{value:"Mobile Web Apps",id:"mobile-web-apps",level:3},{value:"Hybrid Apps",id:"hybrid-apps",level:3},{value:"Location Services",id:"location-services",level:3},{value:"Summary",id:"summary",level:2}],s={toc:r},l="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(l,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"a-brief-primer-on-native-app-testing-in-sauce-labs"},"A brief primer on Native App Testing In Sauce Labs"),(0,i.kt)("p",null,"In order to test your app in Sauce Labs you will need to zip it up and serve it somehow. Here are some options on how to do that:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"make it publicly available (e.g. an asset in a GitHub release)"),(0,i.kt)("li",{parentName:"ul"},"use ",(0,i.kt)("a",{parentName:"li",href:"https://docs.saucelabs.com/mobile-apps/app-storage/"},"Sauce Labs temporary storage")),(0,i.kt)("li",{parentName:"ul"},"use ",(0,i.kt)("a",{parentName:"li",href:"https://docs.saucelabs.com/secure-connections/sauce-connect-5/"},"Sauce Connect")," and grab it from a machine behind your firewall")),(0,i.kt)("p",null,"Once you have that you just need to set your test's desired capabilities accordingly. You can see a list of\noptions ",(0,i.kt)("a",{parentName:"p",href:"https://docs.saucelabs.com/dev/test-configuration-options/#mobile-appium-capabilities"},"here"),"."),(0,i.kt)("h2",{id:"an-iphone-example"},"An iPhone Example"),(0,i.kt)("p",null,"In this example we will be testing an application that has a form that takes 2 numbers, adds them together, and displays the result."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: Contrary to the Appium philosophy of not needing to recompile your app, there is one SMALL tweak you'll need\nto make before your app is ready for Sauce (if you care about testing against an iPhone). It's to make sure that\nthe correct simulator gets loaded. Instructions available ",(0,i.kt)("a",{parentName:"strong",href:"https://docs.saucelabs.com/mobile-apps/automated-testing/app-files/"},"here"),".")),(0,i.kt)("p",null,"We kick off our iPhone example by requiring our dependent libraries (",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to drive the browser,\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec-expectations")," for handling assertions). After that, we wire up our setup, teardown, and run methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'selenium-webdriver'\nrequire 'rspec-expectations'\n\ndef setup\n  caps = {\n    'platform'            => 'Mac 10.8',\n    'version'             => '6.1',\n    'device'              => 'iPhone Simulator',\n    'app'                 => 'https://appium.s3.amazonaws.com/TestApp6.0.app.zip',\n    'name'                => 'Ruby/iPhone Example for Appium'\n  }\n\n  @driver = Selenium::WebDriver.for(\n    :remote,\n    :url => \"https://SAUCE_USERNAME:SAUCE_API_KEY@ondemand.saucelabs.com/wd/hub\",\n    :desired_capabilities => caps)\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"Note that in ",(0,i.kt)("inlineCode",{parentName:"p"},"setup")," we configure our capabilities by setting them to a hash and storing them in a variable called\n",(0,i.kt)("inlineCode",{parentName:"p"},"caps"),". In it we are specifying the platform we would like (",(0,i.kt)("inlineCode",{parentName:"p"},"Mac 10.8"),"), the iOS version (",(0,i.kt)("inlineCode",{parentName:"p"},"6.1"),"), the device\n(",(0,i.kt)("inlineCode",{parentName:"p"},"iPhone Simulator"),"), and the app we would like to load (zipped up and served from AWS)."),(0,i.kt)("p",null,"We then instantiate Selenium Remote in a ",(0,i.kt)("inlineCode",{parentName:"p"},"@driver")," object; pointing it at Sauce Labs, and passing in our desired\ncapabilities."),(0,i.kt)("p",null,"And in our test we wire up interaction with the app using familiar Selenium WebDriver API actions and an assertion."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n    values = [rand(10), rand(10)]\n    expected_sum = values.reduce(&:+)\n\n    elements = @driver.find_elements(:tag_name, 'textField')\n    elements.each_with_index do |element, index|\n      element.send_keys values[index]\n    end\n\n    @driver.find_element(:tag_name, 'button').click\n    @driver.find_element(:tag_name, 'staticText').text.should == expected_sum.to_s\nend\n")),(0,i.kt)("h2",{id:"expected-behavior"},"Expected Behavior"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open a job with Sauce Labs"),(0,i.kt)("li",{parentName:"ul"},"Load an iPhone simulator on a Mac"),(0,i.kt)("li",{parentName:"ul"},"Load the test app"),(0,i.kt)("li",{parentName:"ul"},"Input two random numbers"),(0,i.kt)("li",{parentName:"ul"},"Sum them together"),(0,i.kt)("li",{parentName:"ul"},"Assert that they are correctly added together")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: You can see the test result complete with video ",(0,i.kt)("a",{parentName:"strong",href:"https://saucelabs.com/tests/6736add27ae544409e7ae918ff74ae8d"},"here"),".")),(0,i.kt)("h2",{id:"an-android-example"},"An Android Example"),(0,i.kt)("p",null,"In this example we will be testing a simple note-taking app."),(0,i.kt)("p",null,"We kick off our Android example by requiring our dependent libraries (",(0,i.kt)("inlineCode",{parentName:"p"},"selenium-webdriver")," to drive the browser,\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"rspec-expectations")," for handling assertions). After that, we wire up our setup, teardown, and run methods."),(0,i.kt)("p",null,"==",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"!! Code snippet needs validation !!")),"=="),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'selenium-webdriver'\nrequire 'rspec-expectations'\n\ndef setup\n  caps = {\n    'platform'            => 'Linux',\n    'version'             => '4.2',\n    'device'              => 'Android',\n    'app'                 => 'https://appium.s3.amazonaws.com/NotesList.apk',\n    'app-package'         => 'com.example.android.notepad',\n    'app-activity'        => '.NotesList',\n    'name'                => 'Ruby/Android Example for Appium'\n  }\n\n  @driver = Selenium::WebDriver.for(\n    :remote,\n    :url => \"http://SAUCE_USERNAME:SAUCE_API_KEY@ondemand.saucelabs.com:80/wd/hub\",\n    :desired_capabilities => caps)\nend\n\ndef teardown\n  @driver.quit\nend\n\ndef run\n  setup\n  yield\n  teardown\nend\n")),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),", we configure our capabilities by setting them to a hash and storing them in a variable called ",(0,i.kt)("inlineCode",{parentName:"p"},"caps"),". In\nit we are specifying the platform (",(0,i.kt)("inlineCode",{parentName:"p"},"Linux"),"), the Android version (",(0,i.kt)("inlineCode",{parentName:"p"},"4.2"),"), the device (",(0,i.kt)("inlineCode",{parentName:"p"},"Android"),"), and where to find\nthe app (zipped and served from AWS). We then instantiate Selenium Remote in a ",(0,i.kt)("inlineCode",{parentName:"p"},"@driver")," object; pointing it at Sauce\nLabs, and passing in our desired capabilities."),(0,i.kt)("p",null,"The additional bits of info we need to provide in ",(0,i.kt)("inlineCode",{parentName:"p"},"caps")," (versus in our iPhone example) are ",(0,i.kt)("inlineCode",{parentName:"p"},"app-package")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"app-activity"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"app-package")," being the package name of your app, and ",(0,i.kt)("inlineCode",{parentName:"p"},"app-activity")," being the name of the activity\nyou would like to start. ",(0,i.kt)("inlineCode",{parentName:"p"},"app-activity")," gets appended to ",(0,i.kt)("inlineCode",{parentName:"p"},"app-package")," and is used at Sauce run time to launch your\napp (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"com.example.android.notepad.NotesList"),")."),(0,i.kt)("p",null,"And in our test we wire up interaction with the app using familiar Selenium WebDriver API actions and an assertion."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"run do\n  @driver.find_element(:name, 'New note').click\n  @driver.find_element(:tag_name, 'textfield').send_keys 'This is a new note, from Ruby'\n  @driver.find_element(:name, 'Save').click\n\n  notes = @driver.find_elements(:tag_name, 'text')\n  notes[2].text.should == 'This is a new note, from Ruby'\nend\n")),(0,i.kt)("h2",{id:"expected-behavior-1"},"Expected Behavior"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Open a job with Sauce Labs"),(0,i.kt)("li",{parentName:"ul"},"Load an Android simulator on a Linux machine"),(0,i.kt)("li",{parentName:"ul"},"Load the test app"),(0,i.kt)("li",{parentName:"ul"},"Create a new note"),(0,i.kt)("li",{parentName:"ul"},"Fill in the new note"),(0,i.kt)("li",{parentName:"ul"},"Grab the note text and assert that it's what we inputted")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: You can see the test result complete with video ",(0,i.kt)("a",{parentName:"strong",href:"https://saucelabs.com/tests/e0dbb98af23540d8b43f0806d743fbd8"},"here"),".")),(0,i.kt)("h2",{id:"other-helpful-tidbits"},"Other Helpful Tidbits"),(0,i.kt)("h3",{id:"inspecting-elements"},"Inspecting Elements"),(0,i.kt)("p",null,"In order to easily inspect and identify the elements in your app, you can use Appium's Inspector which comes\nin ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/appium/appium-dot-app"},"appium-dot-app")," and requires you to set up Appium locally."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: You can see a demo of it in action with an iOS app ",(0,i.kt)("a",{parentName:"strong",href:"http://www.youtube.com/watch?v=Hv9A9WfYF4g"},"here"),".")),(0,i.kt)("h3",{id:"mobile-web-apps"},"Mobile Web Apps"),(0,i.kt)("p",null,"If instead you have a mobile web app, you can launch mobile Safari by switching out the URL in ",(0,i.kt)("inlineCode",{parentName:"p"},"app")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"safari"),",\nlike so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"  caps = {\n    'platform'            => 'Mac 10.8',\n    'version'             => '6.1',\n    'device'              => 'iPhone Simulator',\n    'app'                 => 'safari',\n    'name'                => 'Ruby/iPhone Example for Appium',\n  }\n")),(0,i.kt)("p",null,"But it's worth noting that Sauce Labs does not currently support the ability launch a mobile browser on\nAndroid (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"chrome"),"). This functionality is, however, available when running Appium locally\n(as documented ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/appium/appium/blob/master/docs/mobile-web.md#mobile-chrome-on-emulator-or-real-device"},"here"),")."),(0,i.kt)("h3",{id:"hybrid-apps"},"Hybrid Apps"),(0,i.kt)("p",null,"If you have a hybrid mobile app (e.g. an app with a native container that leverages the built in browser engine),\nthen you should be good to go both locally and in Sauce. For details, go ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/appium/appium/blob/master/docs/hybrid.md"},"here"),"."),(0,i.kt)("h3",{id:"location-services"},"Location Services"),(0,i.kt)("p",null,"If you have an iOS app that deals with geolocation, then working with the Location Services dialog can be a little tricky."),(0,i.kt)("p",null,"You can either do a blanket dismiss (which requires some elbow grease -- see\n",(0,i.kt)("a",{parentName:"p",href:"https://groups.google.com/d/msg/appium-discuss/k5gbfVFRPsE/cCkje7tczQcJ"},"this Appium Google Groups thread")," for details),\nor capture and dismiss the dialog as it appears (using functionality found in a library like ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/appium/ruby_lib/blob/master/docs/ios_docs.md#alert_click-ios"},"ruby_lib"),")."),(0,i.kt)("p",null,"And in Sauce Labs, Location Services is disabled by default on iOS 6.1, but enabled by default on iOS 7.1. This is\nnot configurable, but may be in the future through desired capabilities\n(there's ","[an active thread about this on Sauce's support site]","(",(0,i.kt)("a",{parentName:"p",href:"http://support.saucelabs.com/entries/25117411-Location-services-enabled-by-default-on-iOS-devices"},"http://support.saucelabs.com/entries/25117411-Location-services-enabled-by-default-on-iOS-devices"),", feel free to chime in!)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE: Sauce Labs now supports Location Services (as noted in ",(0,i.kt)("a",{parentName:"strong",href:"http://support.saucelabs.com/entries/25117411#view-post-21941225"},"this recent support thread comment"),"). You can set it in your desired capabilities with ",(0,i.kt)("inlineCode",{parentName:"strong"},"locationServicesEnabled")," and a ",(0,i.kt)("inlineCode",{parentName:"strong"},"true")," or ",(0,i.kt)("inlineCode",{parentName:"strong"},"false")," value.")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Hopefully this tip has helped give you enough to get started with mobile testing. In order to take full advantage of\nwhat Appium has to offer, getting it set up locally is key. I encourage you to check out the installation docs\n(available for ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/appium/appium/blob/master/docs/running-on-osx.md"},"OS X"),",\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/appium/appium/blob/master/docs/running-on-linux.md"},"Linux"),",\nand ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/appium/appium/blob/master/docs/running-on-windows.md"},"Windows"),")."),(0,i.kt)("p",null,"And if you're curious about other mobile automation frameworks, Alister Scott\nhas ",(0,i.kt)("a",{parentName:"p",href:"http://watirmelon.com/2013/11/04/the-current-state-of-ios-automated-functional-testing/"},"a good breakdown of them"),"."),(0,i.kt)("p",null,"Happy Testing!"))}d.isMDXComponent=!0}}]);